<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>BackSlasher - FOSS</title><link href="https://blog.backslasher.net/" rel="alternate"></link><link href="https://blog.backslasher.net/feeds/foss.atom.xml" rel="self"></link><id>https://blog.backslasher.net/</id><updated>2020-06-21T12:00:00+02:00</updated><entry><title>Extracting SGN files used by the Israeli Court System</title><link href="https://blog.backslasher.net/sgn-extractor.html" rel="alternate"></link><published>2020-06-21T12:00:00+02:00</published><updated>2020-06-21T12:00:00+02:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2020-06-21:/sgn-extractor.html</id><summary type="html">&lt;h1&gt;The Story&lt;/h1&gt;
&lt;p&gt;One of my friends has some dealings with the Israeli courts.&lt;br&gt;
The noteworthy (and annoying) part of their digital documents is that these documents are using a novel format instead of some industry standard.&lt;br&gt;
Files arriving by email have the SGN suffix, and the email includes the following …&lt;/p&gt;</summary><content type="html">&lt;h1&gt;The Story&lt;/h1&gt;
&lt;p&gt;One of my friends has some dealings with the Israeli courts.&lt;br&gt;
The noteworthy (and annoying) part of their digital documents is that these documents are using a novel format instead of some industry standard.&lt;br&gt;
Files arriving by email have the SGN suffix, and the email includes the following footer:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;המסמך המצורף חתום דיגיטלית. כדי לצפות בקובץ יש להוריד תוכנה בכתובת :
https://www.court.gov.il/NGCS.Web.Site/DigitalSignature/Court Digital Signature Application.msi
)התוכנה תואמת למערכת הפעלה Windows בלבד(
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;English Google translation:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;The attached document is digitally signed. To view the file you need to download software at:
https://www.court.gov.il/NGCS.Web.Site/DigitalSignature/Court Digital Signature Application.msi
) The software is compatible with Windows operating system only (
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This friend doesn't have Windows, so how can he read those docs?  &lt;/p&gt;
&lt;h2&gt;My solution&lt;/h2&gt;
&lt;p&gt;From taking a peek in the doc, I saw that it's basically a ginormous XML, with fields containing the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Original filename&lt;/li&gt;
&lt;li&gt;Content, encoded as base64&lt;/li&gt;
&lt;li&gt;Signer identity&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I was willing to skip verifying the signer, and settled instead for just extracting the original file.&lt;br&gt;
THe quick solution is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;xq -r &lt;span class="s1"&gt;&amp;#39;.DocumentEnvelope.SignaturePackage.Signature.Object.DocumentContent[&amp;quot;#text&amp;quot;]&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; base64 --decode
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href="https://github.com/mikefarah/yq"&gt;xq&lt;/a&gt; is a &lt;code&gt;jq&lt;/code&gt;-like command for XML. It has a YAML equivalent as well, and was highly useful here.&lt;br&gt;
&lt;code&gt;base64&lt;/code&gt; is a bash utility for decoding/encoding base64 data.&lt;/p&gt;
&lt;p&gt;I made a nicer version in my &lt;a href="https://github.com/BackSlasher/sgn-court-extract"&gt;sgn-court-extract repo&lt;/a&gt;. I might migrate it to a proper Python script one day.&lt;/p&gt;
&lt;p&gt;Feel free to use it yourself!&lt;/p&gt;</content><category term="FOSS"></category><category term="Scripts"></category><category term="Linux"></category></entry><entry><title>The BIG BUTTON with Arduino</title><link href="https://blog.backslasher.net/arduino-big-button.html" rel="alternate"></link><published>2019-12-15T10:00:00+01:00</published><updated>2019-12-15T10:00:00+01:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2019-12-15:/arduino-big-button.html</id><summary type="html">&lt;p&gt;I've created a dramatic big button, that actually sends key presses to the computer.&lt;br&gt;
It's connected to the computer via USB, and programmable via the same connection, meaning we can change the key presses it sends as we like.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://blog.backslasher.net/images/arduino-big-button/button.jpg"&gt;&lt;/p&gt;
&lt;h2&gt;The button&lt;/h2&gt;
&lt;p&gt;I got a factory button from eBay. The listing …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've created a dramatic big button, that actually sends key presses to the computer.&lt;br&gt;
It's connected to the computer via USB, and programmable via the same connection, meaning we can change the key presses it sends as we like.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://blog.backslasher.net/images/arduino-big-button/button.jpg"&gt;&lt;/p&gt;
&lt;h2&gt;The button&lt;/h2&gt;
&lt;p&gt;I got a factory button from eBay. The listing is no longer available, but you can see it in the pictures.&lt;br&gt;
Eventually, it doesn't matter as long as the button has enough room for the Arduino to fit in.&lt;/p&gt;
&lt;h2&gt;Arduino&lt;/h2&gt;
&lt;p&gt;I got an Arduino Leonardo knockoff on ebay (&lt;a href="https://www.ebay.com/itm/Arduino-Pro-Micro-USB-komp-ATmega-32U4-5V-3-3V-16MHz-Leonardo-Mini-Entwicklu/253050640080"&gt;link&lt;/a&gt;).&lt;br&gt;
I liked it because:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It's small, meaning it can fit inside the button.&lt;/li&gt;
&lt;li&gt;It can operate as a HID (Human Interface Device), meaning it can send key presses to the computer (no special drivers needed!)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Sadly, I didn't photograph the internal connections (I was so excited that everything works), but everything is pretty simple.&lt;br&gt;
All buttons connected to &lt;code&gt;GND&lt;/code&gt; on one side, and a separate pin on the other. You can infer it from the code. They're set up using &lt;code&gt;pinMode(pin_num, INPUT_PULLUP);&lt;/code&gt;. &lt;br&gt;
The contraption is powered via the same USB connection it's using to send keypresses.&lt;/p&gt;
&lt;h2&gt;The code&lt;/h2&gt;
&lt;p&gt;I added it to GitHub because it's free. I call it &lt;a href="https://github.com/BackSlasher/arduino-button/blob/master/tributton.ino"&gt;tributton.ino&lt;/a&gt;.&lt;br&gt;
The "business logic" part looks like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setButtons&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;buttonGreen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;digitalRead&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buttonGreenPin&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;buttonRed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;digitalRead&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buttonRedPin&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;buttonBreak&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;digitalRead&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buttonBreakPin&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buttonBreak&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buttonGreen&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Keyboard&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GREEN_KEY&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buttonRed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Keyboard&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RED_KEY&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Share your version with me please!&lt;/p&gt;</content><category term="FOSS"></category><category term="arduino"></category><category term="linux"></category></entry><entry><title>Adding a child element in XSLT</title><link href="https://blog.backslasher.net/xslt-add-child.html" rel="alternate"></link><published>2018-09-07T12:00:00+02:00</published><updated>2018-09-07T12:00:00+02:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2018-09-07:/xslt-add-child.html</id><summary type="html">&lt;p&gt;I recently had to edit a big XML file, and add a child elemnt to every element within.
To simplify matters, say I had something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;rooty&lt;/span&gt; &lt;span class="na"&gt;xmlns:ppl=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;some_identifier&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;ppl:person&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;age&amp;gt;&lt;/span&gt;42&lt;span class="nt"&gt;&amp;lt;/age&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;name&amp;gt;&lt;/span&gt;bob&lt;span class="nt"&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/ppl:person&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;ppl:person&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;age …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;I recently had to edit a big XML file, and add a child elemnt to every element within.
To simplify matters, say I had something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;rooty&lt;/span&gt; &lt;span class="na"&gt;xmlns:ppl=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;some_identifier&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;ppl:person&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;age&amp;gt;&lt;/span&gt;42&lt;span class="nt"&gt;&amp;lt;/age&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;name&amp;gt;&lt;/span&gt;bob&lt;span class="nt"&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/ppl:person&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;ppl:person&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;age&amp;gt;&lt;/span&gt;53&lt;span class="nt"&gt;&amp;lt;/age&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;name&amp;gt;&lt;/span&gt;doggo&lt;span class="nt"&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/ppl:person&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/rooty&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I wanted to add a &lt;code&gt;&amp;lt;cow&amp;gt;&lt;/code&gt; element to every person, like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;rooty&lt;/span&gt; &lt;span class="na"&gt;xmlns:ppl=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;some_identifier&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;ppl:person&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;age&amp;gt;&lt;/span&gt;42&lt;span class="nt"&gt;&amp;lt;/age&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;name&amp;gt;&lt;/span&gt;bob&lt;span class="nt"&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;cow&amp;gt;&lt;/span&gt;Bessy&lt;span class="nt"&gt;&amp;lt;/cow&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/ppl:person&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;ppl:person&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;age&amp;gt;&lt;/span&gt;53&lt;span class="nt"&gt;&amp;lt;/age&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;name&amp;gt;&lt;/span&gt;doggo&lt;span class="nt"&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;cow&amp;gt;&lt;/span&gt;Bessy&lt;span class="nt"&gt;&amp;lt;/cow&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/ppl:person&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/rooty&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;My first approach was to spend 10 minutes manually editing the file, but why do that when you can spend &lt;strong&gt;30 minutes&lt;/strong&gt; writing automation to do it for you?&lt;br&gt;
I then spent some time getting pissed off on Python's XML libraries, as they didn't properly handle custom XML namespaces (the &lt;code&gt;ppl&lt;/code&gt; part).&lt;br&gt;
I decided then that the "right" way to do it was using XSLT.  &lt;/p&gt;
&lt;h2&gt;The solution&lt;/h2&gt;
&lt;p&gt;I still don't fully understand &lt;a href="https://en.wikipedia.org/wiki/XSLT"&gt;XSLT&lt;/a&gt;, so I won't try and explain it.&lt;br&gt;
After some help from &lt;a href="https://stackoverflow.com/q/52205660/950275"&gt;StackOverflow&lt;/a&gt;, I got a working XSLT file, which I'm happy to share:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;&amp;lt;xsl:stylesheet&lt;/span&gt; &lt;span class="na"&gt;xmlns:xsl=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.w3.org/1999/XSL/Transform&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;xmlns:ppl=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;some_identifier&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;version=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;&amp;lt;xsl:output&lt;/span&gt; &lt;span class="na"&gt;omit-xml-declaration=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;no&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;indent=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;yes&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;encoding=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;&amp;lt;xsl:strip-space&lt;/span&gt; &lt;span class="na"&gt;elements=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;*&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- Identity transform --&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;&amp;lt;xsl:template&lt;/span&gt; &lt;span class="na"&gt;match=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@* | node()&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;&amp;lt;xsl:copy&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="k"&gt;&amp;lt;xsl:apply-templates&lt;/span&gt; &lt;span class="na"&gt;select=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@* | node()&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;&amp;lt;/xsl:copy&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;&amp;lt;/xsl:template&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- Add cow to a person --&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;&amp;lt;xsl:template&lt;/span&gt; &lt;span class="na"&gt;match=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ppl:person&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;&amp;lt;xsl:copy&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="k"&gt;&amp;lt;xsl:copy-of&lt;/span&gt; &lt;span class="na"&gt;select=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@*&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="k"&gt;&amp;lt;xsl:copy-of&lt;/span&gt; &lt;span class="na"&gt;select=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;node()&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;cow&amp;gt;&lt;/span&gt;Bessy&lt;span class="nt"&gt;&amp;lt;/cow&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;&amp;lt;/xsl:copy&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;&amp;lt;/xsl:template&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;&amp;lt;/xsl:stylesheet&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I run it using &lt;code&gt;xsltproc&lt;/code&gt;, which is widely available for Linux distros, and the command looks like &lt;code&gt;xsltproc XSLT_PATH XML_PATH&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The file, broken down, looks like this:&lt;/p&gt;
&lt;h3&gt;Formatting&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;  &amp;lt;xsl:output omit-xml-declaration=&amp;quot;no&amp;quot; indent=&amp;quot;yes&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;/&amp;gt;&lt;/span&gt;
&lt;span class="err"&gt;  &amp;lt;xsl:strip-space elements=&amp;quot;*&amp;quot;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The above part controls the formatting. Without it, the resulting XML might have weird linebreaks and spaces.&lt;/p&gt;
&lt;h3&gt;Identity transform&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;  &lt;span class="c"&gt;&amp;lt;!-- Identity transform --&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;&amp;lt;xsl:template&lt;/span&gt; &lt;span class="na"&gt;match=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@* | node()&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;&amp;lt;xsl:copy&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="k"&gt;&amp;lt;xsl:apply-templates&lt;/span&gt; &lt;span class="na"&gt;select=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@* | node()&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;&amp;lt;/xsl:copy&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;&amp;lt;/xsl:template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This part makes every node appear in the transformed document.&lt;/p&gt;
&lt;h3&gt;Adding the child elemennt&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;  &lt;span class="c"&gt;&amp;lt;!-- Add cow to a person --&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;&amp;lt;xsl:template&lt;/span&gt; &lt;span class="na"&gt;match=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ppl:person&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;&amp;lt;xsl:copy&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="k"&gt;&amp;lt;xsl:copy-of&lt;/span&gt; &lt;span class="na"&gt;select=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@*&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="k"&gt;&amp;lt;xsl:copy-of&lt;/span&gt; &lt;span class="na"&gt;select=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;node()&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;cow&amp;gt;&lt;/span&gt;Bessy&lt;span class="nt"&gt;&amp;lt;/cow&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;&amp;lt;/xsl:copy&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;&amp;lt;/xsl:template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This part matches only the elements we want to add children to.&lt;br&gt;
We tell the transformer to copy the node, and include all of the original attributes (&lt;code&gt;@*&lt;/code&gt;) and child elements (&lt;code&gt;node()&lt;/code&gt;), and add our own new child element (the &lt;code&gt;&amp;lt;cow&amp;gt;&lt;/code&gt; part).&lt;br&gt;
Removing this part will effectively make the XSLT file a "reformatter".&lt;/p&gt;
&lt;p&gt;Have fun!&lt;/p&gt;</content><category term="FOSS"></category><category term="XSLT"></category><category term="scripts"></category></entry><entry><title>Disqus instead of Juvia</title><link href="https://blog.backslasher.net/disqus.html" rel="alternate"></link><published>2018-04-12T12:00:00+02:00</published><updated>2018-04-12T12:00:00+02:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2018-04-12:/disqus.html</id><summary type="html">&lt;h2&gt;TL;DR:&lt;/h2&gt;
&lt;p&gt;I switched from &lt;a href="https://github.com/phusion/juvia"&gt;Juvia&lt;/a&gt; to &lt;a href="https://disqus.com/"&gt;Disqus&lt;/a&gt; after losing all of my blog's comments&lt;/p&gt;
&lt;h2&gt;Why I lost all of my blog's comments&lt;/h2&gt;
&lt;p&gt;Basically, I was a fool.&lt;br&gt;
I had my Juvia setup running on a single server in AWS, with a standalone mySQL server.&lt;br&gt;
My setup auto-updated every time …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;TL;DR:&lt;/h2&gt;
&lt;p&gt;I switched from &lt;a href="https://github.com/phusion/juvia"&gt;Juvia&lt;/a&gt; to &lt;a href="https://disqus.com/"&gt;Disqus&lt;/a&gt; after losing all of my blog's comments&lt;/p&gt;
&lt;h2&gt;Why I lost all of my blog's comments&lt;/h2&gt;
&lt;p&gt;Basically, I was a fool.&lt;br&gt;
I had my Juvia setup running on a single server in AWS, with a standalone mySQL server.&lt;br&gt;
My setup auto-updated every time a new version of Juvia was released, which never happened until a couple of days ago, as the project is relatively unmaintained.&lt;br&gt;
I also neglected to backup my DB, as I'm stupid.&lt;br&gt;
A couple of days ago, the Juvia project got a &lt;a href="https://github.com/phusion/juvia/pull/70"&gt;new code of conduct&lt;/a&gt;. As part of this, they released a new version, which caused my setup to auto-update, wiping my DB.&lt;/p&gt;
&lt;h2&gt;Why move to Disqus&lt;/h2&gt;
&lt;p&gt;I decided to move to a managed comment service.&lt;br&gt;
In retrospect, maintaining my Juvia setup was way more effort than it's worth, as I never really customized it, and I neglected to take basic actions (e.g. DB backup, SSL setup).&lt;br&gt;
I saw that Disqus offers guest commenting (although it's relatively hidden), and allows you to export comments to a file. This means that if I'm unhappy with the platform, I can migrate away.&lt;br&gt;
Sounds like a good deal.&lt;/p&gt;
&lt;h2&gt;First impressions&lt;/h2&gt;
&lt;p&gt;Looks legit. &lt;/p&gt;</content><category term="FOSS"></category><category term="Disqus"></category><category term="Rambling"></category></entry><entry><title>Sortiq - sort, uniq, sort</title><link href="https://blog.backslasher.net/sortiq.html" rel="alternate"></link><published>2018-01-07T12:00:00+01:00</published><updated>2018-01-07T12:00:00+01:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2018-01-07:/sortiq.html</id><summary type="html">&lt;p&gt;This is a small snippet I find extremely useful. You should have it in your &lt;code&gt;~/.bashrc&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;sortiq() { sort | uniq -c | sort -rn ; }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It will count the instances of each line, sorting them from most common to least common.&lt;/p&gt;
&lt;h2&gt;What is this for&lt;/h2&gt;
&lt;p&gt;It answers the question "How much of each …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is a small snippet I find extremely useful. You should have it in your &lt;code&gt;~/.bashrc&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;sortiq() { sort | uniq -c | sort -rn ; }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It will count the instances of each line, sorting them from most common to least common.&lt;/p&gt;
&lt;h2&gt;What is this for&lt;/h2&gt;
&lt;p&gt;It answers the question "How much of each line do I have?"
e.g. for this input:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;badger&lt;/span&gt;
&lt;span class="err"&gt;badger&lt;/span&gt;
&lt;span class="err"&gt;badger&lt;/span&gt;
&lt;span class="err"&gt;badger&lt;/span&gt;
&lt;span class="err"&gt;mushroom&lt;/span&gt;
&lt;span class="err"&gt;mushroom&lt;/span&gt;
&lt;span class="err"&gt;badger&lt;/span&gt;
&lt;span class="err"&gt;badger&lt;/span&gt;
&lt;span class="err"&gt;badger&lt;/span&gt;
&lt;span class="err"&gt;badger&lt;/span&gt;
&lt;span class="err"&gt;mushroom&lt;/span&gt;
&lt;span class="err"&gt;mushroom&lt;/span&gt;
&lt;span class="err"&gt;snake&lt;/span&gt;
&lt;span class="err"&gt;snake&lt;/span&gt;
&lt;span class="err"&gt;snake&lt;/span&gt;
&lt;span class="err"&gt;snake&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Piping it via sortiq (like &lt;code&gt;echo "$GOOD_INPUT" | sortiq&lt;/code&gt;) will give you:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;      8 badger&lt;/span&gt;
&lt;span class="err"&gt;      4 snake&lt;/span&gt;
&lt;span class="err"&gt;      4 mushroom&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Very handy.&lt;/p&gt;</content><category term="FOSS"></category><category term="Linux"></category><category term="Scripting"></category><category term="Bash"></category></entry><entry><title>Populating a NetworkX graph with a scanner</title><link href="https://blog.backslasher.net/networkx-populate.html" rel="alternate"></link><published>2017-07-26T12:00:00+02:00</published><updated>2017-07-26T12:00:00+02:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2017-07-26:/networkx-populate.html</id><summary type="html">&lt;p&gt;I had a graph living outside Pythonland (a commit tree with dependencies) and wanted to do graphy things to it. To do that, I first had to put the data into a NetworkX graph.
I wrote this code bit to discover a graph-like structure and put into a NetworkX (or …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I had a graph living outside Pythonland (a commit tree with dependencies) and wanted to do graphy things to it. To do that, I first had to put the data into a NetworkX graph.
I wrote this code bit to discover a graph-like structure and put into a NetworkX (or similar enough) object.
It's basically a BFS scan, that delegates the actual node-to-edge discovery to a callable:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/usr/bin/env python3&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;populate_graph_from_node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;first_node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;edge_extractor&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;visited&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;next_nodes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;first_node&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next_nodes&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;new_edges&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;next_nodes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;new_edges&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;edge_extractor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_edges_from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_edges&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;visited&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next_nodes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;next_nodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;edge&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;edge&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;new_edges&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;visited&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;edge_extractor&lt;/code&gt; callable should accept a node, and return edge-like tuples (either &lt;code&gt;(source, dest)&lt;/code&gt; or &lt;code&gt;(source, dest, data_dict)&lt;/code&gt;).&lt;br&gt;
I do not bother to validate that the source node in the edges is indeed the node we're currently scanning.&lt;br&gt;
An example call could be something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/usr/bin/env python3&lt;/span&gt;
&lt;span class="n"&gt;edge_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;networkx&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;nx&lt;/span&gt;
&lt;span class="n"&gt;graph&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DiGraph&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;populate_graph_from_node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="n"&gt;graph&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt;
    &lt;span class="n"&gt;edge_dict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;graph&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;edges&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="c1"&gt;# [(1, 2), (2, 3), (2, 4), (4, 3)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="FOSS"></category><category term="Scripts"></category><category term="Python"></category><category term="Graphing"></category></entry><entry><title>Getting Magent Links from Deluge</title><link href="https://blog.backslasher.net/deluge-show-magnet.html" rel="alternate"></link><published>2017-04-01T12:00:00+02:00</published><updated>2017-04-01T12:00:00+02:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2017-04-01:/deluge-show-magnet.html</id><summary type="html">&lt;p&gt;My latest weekend-hack is a plugin that shows the magnet link for a torrent entry&lt;/p&gt;
&lt;h2&gt;Why&lt;/h2&gt;
&lt;p&gt;I had something torrented a long time ago, and a friend asked me for the torrent.&lt;br&gt;
However, I haven't kept the original &lt;code&gt;.torrent&lt;/code&gt; file, she was tech-oriented enough so I can give her the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;My latest weekend-hack is a plugin that shows the magnet link for a torrent entry&lt;/p&gt;
&lt;h2&gt;Why&lt;/h2&gt;
&lt;p&gt;I had something torrented a long time ago, and a friend asked me for the torrent.&lt;br&gt;
However, I haven't kept the original &lt;code&gt;.torrent&lt;/code&gt; file, she was tech-oriented enough so I can give her the hash/trackers by hand.&lt;br&gt;
I ended up manually composing a magnet link for her, and figured "I wish this was a built-in functionality in Deluge".  &lt;/p&gt;
&lt;p&gt;I then saw &lt;a href="http://dev.deluge-torrent.org/ticket/1337"&gt;ticket #1337&lt;/a&gt; that asked for something like this, which was implemented using &lt;a href="http://forum.deluge-torrent.org/viewtopic.php?f=9&amp;amp;t=47501"&gt;CopyMagnetURI&lt;/a&gt; plugin.&lt;br&gt;
My problem with this plugin is that it didn't work for me, and I figured interfacing with the clipboard is inherently more complicated that just displaying the link.&lt;br&gt;
I decided I'll roll my own&lt;/p&gt;
&lt;h2&gt;Result&lt;/h2&gt;
&lt;p&gt;Check it out:
&lt;a href="https://github.com/BackSlasher/deluge-ShowMagnet"&gt;https://github.com/BackSlasher/deluge-ShowMagnet&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Screenshot" src="https://raw.githubusercontent.com/BackSlasher/deluge-ShowMagnet/master/readme/screnshot.png"&gt;&lt;/p&gt;
&lt;h2&gt;Process&lt;/h2&gt;
&lt;p&gt;I started from copying the &lt;a href="https://github.com/nicklan/Deluge-Pieces-Plugin"&gt;Deluge Pieces Plugin&lt;/a&gt;, because it had some of the behaviour I was looking for (adding a UI element to the torrent details pane).&lt;br&gt;
I then removed all of the bits related to the pieces, and instead displayed a label that occupied the whole panel.&lt;br&gt;
I then moved to understanding how to build a magnet URI from torrent information, and added this to &lt;code&gt;core.py&lt;/code&gt; to make it reusable from the WebUI, if I ever feel like it.&lt;br&gt;
After that came integration, and voilà!&lt;/p&gt;</content><category term="FOSS"></category><category term="Python"></category><category term="Scripts"></category><category term="BitTorrent"></category><category term="Deluge"></category></entry><entry><title>Prettify HTML pages with BeautifulSoup</title><link href="https://blog.backslasher.net/bs-prettify.html" rel="alternate"></link><published>2016-10-01T12:00:00+02:00</published><updated>2016-10-01T12:00:00+02:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2016-10-01:/bs-prettify.html</id><summary type="html">&lt;h1&gt;The story&lt;/h1&gt;
&lt;p&gt;Today I wrote some HTML page by hand (&lt;a href="http://backslasher.net"&gt;my new homepage&lt;/a&gt;).&lt;br&gt;
I then used this script to make the HTML code nicer:&lt;/p&gt;
&lt;h1&gt;The script&lt;/h1&gt;
&lt;p&gt;This requires the BeautifulSoup module for python&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bs4&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;bs_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;r …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h1&gt;The story&lt;/h1&gt;
&lt;p&gt;Today I wrote some HTML page by hand (&lt;a href="http://backslasher.net"&gt;my new homepage&lt;/a&gt;).&lt;br&gt;
I then used this script to make the HTML code nicer:&lt;/p&gt;
&lt;h1&gt;The script&lt;/h1&gt;
&lt;p&gt;This requires the BeautifulSoup module for python&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bs4&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;bs_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;lxml&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;new_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;prettify&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]:&lt;/span&gt;
  &lt;span class="n"&gt;bs_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It's pretty simple - The &lt;code&gt;bs_file&lt;/code&gt; method reads a file, asks BS to prettify its content, and writes the result to the file again.&lt;br&gt;
&lt;strong&gt;Do note&lt;/strong&gt; that BS takes a lot of liberty in interpreting files - it might add tags where it decides they're missing etc.&lt;br&gt;
To use the script, run it and provide the filenames you wish to prettify as arguments, e.g. &lt;code&gt;/tmp/bs.py index.html&lt;/code&gt;&lt;/p&gt;</content><category term="FOSS"></category><category term="Scripts"></category><category term="Python"></category><category term="BeautifulSoup"></category><category term="HTML"></category></entry><entry><title>Chef "Share This" script</title><link href="https://blog.backslasher.net/chef-share.html" rel="alternate"></link><published>2016-03-26T12:00:00+01:00</published><updated>2016-03-26T12:00:00+01:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2016-03-26:/chef-share.html</id><summary type="html">&lt;p&gt;I wrote this little script to upload the current cookbook to the Chef Supermarket.&lt;br&gt;
It should be run from within the cookbook's directory.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
knife cookbook site share -o ../ &lt;span class="k"&gt;$(&lt;/span&gt;basename &lt;span class="k"&gt;$(&lt;/span&gt;realpath .&lt;span class="k"&gt;))&lt;/span&gt; -c ~/.chef/knife-supermarket.rb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Where my supermarket config is as simple as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;node_name&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;SUPERMARKET_USERNAME&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;client_key&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;CLIENTKEY_LOCATION&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Interesting points …&lt;/h3&gt;</summary><content type="html">&lt;p&gt;I wrote this little script to upload the current cookbook to the Chef Supermarket.&lt;br&gt;
It should be run from within the cookbook's directory.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
knife cookbook site share -o ../ &lt;span class="k"&gt;$(&lt;/span&gt;basename &lt;span class="k"&gt;$(&lt;/span&gt;realpath .&lt;span class="k"&gt;))&lt;/span&gt; -c ~/.chef/knife-supermarket.rb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Where my supermarket config is as simple as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;node_name&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;SUPERMARKET_USERNAME&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;client_key&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;CLIENTKEY_LOCATION&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Interesting points:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;I'm using a specific Knife config file (that references the Supermarket credentials file)&lt;/li&gt;
&lt;li&gt;The entire &lt;code&gt;-o ../ $(basename $(realpath .))&lt;/code&gt; bit tells Knife our "cookbook library" is &lt;code&gt;..&lt;/code&gt; (the parent directory) and the "cookbook name" is our current directory's name.&lt;br&gt;
    Assuming we're running the script in &lt;code&gt;~/projects/cookbooks/backslasher-python&lt;/code&gt;, it'll be similar to &lt;code&gt;-o ~/projects/cookbooks/ backslasher-python&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="FOSS"></category><category term="Chef"></category><category term="Ruby"></category><category term="Scripts"></category></entry><entry><title>Dry Run for Python Pip</title><link href="https://blog.backslasher.net/pip-dry-run.html" rel="alternate"></link><published>2016-03-18T12:00:00+01:00</published><updated>2016-03-18T12:00:00+01:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2016-03-18:/pip-dry-run.html</id><summary type="html">&lt;p&gt;As I wrote &lt;a href="https://blog.backslasher.net/backslasher-python.html"&gt;some time ago&lt;/a&gt;, I started my own &lt;a href="https://github.com/BackSlasher/chef-backslasher-python"&gt;python cookbook&lt;/a&gt; for Chef because I didn't like the direction the "default" one was going.&lt;br&gt;
I recently added a new feature that I wanted to talk about. I called it &lt;code&gt;smart_install&lt;/code&gt; in the cookbook, but it's actually a "dry-run" mode …&lt;/p&gt;</summary><content type="html">&lt;p&gt;As I wrote &lt;a href="https://blog.backslasher.net/backslasher-python.html"&gt;some time ago&lt;/a&gt;, I started my own &lt;a href="https://github.com/BackSlasher/chef-backslasher-python"&gt;python cookbook&lt;/a&gt; for Chef because I didn't like the direction the "default" one was going.&lt;br&gt;
I recently added a new feature that I wanted to talk about. I called it &lt;code&gt;smart_install&lt;/code&gt; in the cookbook, but it's actually a "dry-run" mode for &lt;code&gt;pip install&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Motivation&lt;/h3&gt;
&lt;p&gt;When installing a Pip package using Chef, I have the "install" command, which is something like &lt;code&gt;pip install PACKAGENAME&lt;/code&gt;. After I do so, I consider the resource "updated" (as in, its state has changed), which means it'll notify any resoures subscribed to it (e.g. restarting a service after a package is upgraded).&lt;br&gt;
I have 3 constraints:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The &lt;code&gt;install&lt;/code&gt; action of the Pip resource should look like it ran &lt;code&gt;pip install&lt;/code&gt; every time. In other words, if &lt;code&gt;pip install&lt;/code&gt; would do something, it should run.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;install&lt;/code&gt; action shouldn't notify other resources that subscribed to it if &lt;code&gt;pip install&lt;/code&gt; would have done nothing (e.g. if package is installed at the right version).&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;install&lt;/code&gt; action should notify other resources that subscribed to it if &lt;code&gt;pip install&lt;/code&gt; would have done something (e.g. installed a package if it's missing).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I saw 2 options to solve my constraints:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Run &lt;code&gt;pip install&lt;/code&gt; every time, and parse its output to determine whether it did something or not.&lt;/li&gt;
&lt;li&gt;Mark the resource as updated whenever I run &lt;code&gt;pip install&lt;/code&gt;, and use something beforehand to determine whether running &lt;code&gt;pip install&lt;/code&gt; is even needed (as in, would it do something).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Option 1 seemed too unreliable for me as it involved parsing a pretty verbose output that could change greatly between Pip versions, and might also include custom output (from installed packages' code), so I had to go for option 2.  &lt;/p&gt;
&lt;h3&gt;Initial implementation&lt;/h3&gt;
&lt;p&gt;The first implementation, which currently stays as a fallback to "smart install", is taken primarily from the original Python cookbook.&lt;br&gt;
It involves running &lt;code&gt;pip list&lt;/code&gt; and parsing its output to see which version is installed now, if any:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# https://github.com/BackSlasher/chef-backslasher-python/blob/5de6e03/providers/pip.rb#L51&lt;/span&gt;
&lt;span class="n"&gt;my_line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pip_command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;list&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compact&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This information is joined with what little info we have about the package we're about to install (e.g. do we have a manually set version) and our intended action (install/upgrade) to decide whether to run &lt;code&gt;pip install&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;My primary issue with it is that it didn't work when installing from a URL / complex requirement line (e.g. &lt;code&gt;requests&amp;gt;=2&lt;/code&gt;), and enriching it to work with these meant a lot of complexity (like downloading the package at the provided URL, extracting it and parsing its version) that I wasn't going to implement.&lt;/p&gt;
&lt;h3&gt;Smart install&lt;/h3&gt;
&lt;p&gt;To handle more complicated cases, I've decided to create a Python script that uses Pip's libraries to decide whether &lt;code&gt;pip install&lt;/code&gt; would do something.&lt;br&gt;
At first, I copied a lot of logic from &lt;code&gt;pip.commands.install&lt;/code&gt; and &lt;code&gt;pip.req&lt;/code&gt; to fill a &lt;code&gt;to_install&lt;/code&gt; array (the name given in the Pip code to a collection of "requirements" to be installed), and then check whether this array has anything in it.&lt;br&gt;
Problem was, some method headers differ between my tested Pip versions, so I decided to avoid using that script because it might break pretty easily, in addition to it being pretty bulky.&lt;br&gt;
The solution I settled on might look clever to some and stupid to others. I decided to patch the "install" method on the &lt;code&gt;RequirementSet&lt;/code&gt; object (used to represent a collection of needed packages) to add them all to my own array. I'm then checking whether this array is empty or not, and printing the result.&lt;br&gt;
The script looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# https://github.com/BackSlasher/chef-backslasher-python/blob/90631c3/files/default/smart_install.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pip.req&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;RequirementSet&lt;/span&gt;

&lt;span class="n"&gt;to_install&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;my_install&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;install_options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;global_options&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;to_install&lt;/span&gt;
    &lt;span class="n"&gt;to_install&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;requirements&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;satisfied_by&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="n"&gt;RequirementSet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;my_install&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pip&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;-q&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-q&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# keep it quiet&lt;/span&gt;
&lt;span class="n"&gt;pip&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#print &amp;#39;to_install is&amp;#39;,[r.name for r in to_install]&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;any&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_install&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Interesting points:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The script is invoked just like Pip would, i.e. &lt;code&gt;python /tmp/smart_install.py install requests&amp;gt;=2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;I'm forcing &lt;code&gt;-q&lt;/code&gt; or "quiet" mode to avoid littering STDOUT with Pip's usual chatter.&lt;/li&gt;
&lt;li&gt;A non-0 exit code means failure to run. Whether anything is to be installed is determined by the script returning &lt;code&gt;True&lt;/code&gt;/&lt;code&gt;False&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;I'm not sure the script is fit for every use-case, so it's disabled by default. I'm especially afraid of it actually doing something (and not tellng Chef that it did).&lt;br&gt;
I would like to integrate it into Pip some day as &lt;code&gt;--dry-run&lt;/code&gt; (thinking big). I still haven't decided how it will behave in the way of output - I'm not big on changing the exit code on one hand, and afraid of my meaningful output drowning in Pip's output.&lt;br&gt;
As usual, any comments are welcome!&lt;/p&gt;</content><category term="FOSS"></category><category term="Scripts"></category><category term="Python"></category><category term="Pip"></category></entry><entry><title>Some Jenkins helpers for Chef</title><link href="https://blog.backslasher.net/chef-jenkins-helpers.html" rel="alternate"></link><published>2016-03-16T15:00:00+01:00</published><updated>2016-03-16T15:00:00+01:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2016-03-16:/chef-jenkins-helpers.html</id><summary type="html">&lt;p&gt;I've decided to share some code I use in Chef to pull some data and files from Jenkins&lt;/p&gt;
&lt;h3&gt;JenkinsQuery&lt;/h3&gt;
&lt;p&gt;This is a helper class, in charge of getting build-related data&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# slasher_development/libraries/jenkins_query.rb&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;SlasherDevelopment&lt;/span&gt;
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;JenkinsQuery&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="vi"&gt;@scheme&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https&amp;#39;&lt;/span&gt; &lt;span class="c1"&gt;# Modify if needed&lt;/span&gt;
      &lt;span class="vi"&gt;@server …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;I've decided to share some code I use in Chef to pull some data and files from Jenkins&lt;/p&gt;
&lt;h3&gt;JenkinsQuery&lt;/h3&gt;
&lt;p&gt;This is a helper class, in charge of getting build-related data&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# slasher_development/libraries/jenkins_query.rb&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;SlasherDevelopment&lt;/span&gt;
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;JenkinsQuery&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="vi"&gt;@scheme&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https&amp;#39;&lt;/span&gt; &lt;span class="c1"&gt;# Modify if needed&lt;/span&gt;
      &lt;span class="vi"&gt;@server&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;
      &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;
      &lt;span class="vi"&gt;@password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;
      &lt;span class="vi"&gt;@job&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;job&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_json&lt;/span&gt;
      &lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;uri&amp;#39;&lt;/span&gt;
      &lt;span class="n"&gt;uri&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;URI&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="vi"&gt;@scheme&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;://&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="vi"&gt;@server&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/job/&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="no"&gt;URI&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;escape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@job&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/api/json?depth=1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt;
      &lt;span class="no"&gt;Net&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;HTTP&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="ss"&gt;:use_ssl&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scheme&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
         &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Net&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;HTTP&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Get&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request_uri&lt;/span&gt;
         &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basic_auth&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="vi"&gt;@password&lt;/span&gt;
         &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="c1"&gt;# Net::HTTPResponse object&lt;/span&gt;
         &lt;span class="n"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;
       &lt;span class="k"&gt;end&lt;/span&gt;
       &lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;json&amp;#39;&lt;/span&gt;
       &lt;span class="n"&gt;dat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;JSON&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
       &lt;span class="n"&gt;dat&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;last_successful_build_revision&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;repository_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;dat&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;get_json&lt;/span&gt;
      &lt;span class="n"&gt;lastbuild&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;dat&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lastSuccessfulBuild&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;dat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nil?&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;
      &lt;span class="k"&gt;else&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;lastbuild&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;changeSet&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;revisions&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;module&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]==&lt;/span&gt;&lt;span class="n"&gt;repository_url&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;revision&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;to_s&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The constructor is job-specific, meaning an instance handles a single job.&lt;br&gt;
&lt;code&gt;get_json&lt;/code&gt; gets the job's metadata file. It contains several useful details (hit it yourself and find out).&lt;br&gt;
&lt;code&gt;last_successful_build_revision&lt;/code&gt; is a helper method for extracting a very specific detail - the source repository's revision that was used in the last successful build.&lt;br&gt;
It takes the repository url, since Jenkins assumes a single build can have multiple sources (rare but true).&lt;br&gt;
I use it for checking out a subversion repo to match an artifact's version (more on that later).&lt;br&gt;
This method can be generalized if needed.&lt;/p&gt;
&lt;h3&gt;JenkinsFile&lt;/h3&gt;
&lt;p&gt;This is a resource used to fetch an artifact from Jenkins&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# slasher_development/resources/jenkins_file.rb&lt;/span&gt;

&lt;span class="n"&gt;actions&lt;/span&gt; &lt;span class="ss"&gt;:create&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:delete&lt;/span&gt;
&lt;span class="n"&gt;default_action&lt;/span&gt; &lt;span class="ss"&gt;:create&lt;/span&gt;

&lt;span class="n"&gt;attribute&lt;/span&gt; &lt;span class="ss"&gt;:path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:kind_of&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:name_attribute&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
&lt;span class="n"&gt;attribute&lt;/span&gt; &lt;span class="ss"&gt;:mode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:kind_of&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;
&lt;span class="n"&gt;attribute&lt;/span&gt; &lt;span class="ss"&gt;:owner&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:kind_of&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;
&lt;span class="n"&gt;attribute&lt;/span&gt; &lt;span class="ss"&gt;:group&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:kind_of&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;

&lt;span class="n"&gt;attribute&lt;/span&gt; &lt;span class="ss"&gt;:artifact&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:kind_of&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:required&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
&lt;span class="n"&gt;attribute&lt;/span&gt; &lt;span class="ss"&gt;:job&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:kind_of&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:required&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
&lt;span class="n"&gt;attribute&lt;/span&gt; &lt;span class="ss"&gt;:build&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:kind_of&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:default&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;lastSuccessfulBuild&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# slasher_development/providers/jenkins_file.rb&lt;/span&gt;

&lt;span class="n"&gt;use_inline_resources&lt;/span&gt;

&lt;span class="n"&gt;source_credentials&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data_bag_item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;secret_stuff&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;jenkins&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="ss"&gt;:create&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;jenkins_server&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;jenkins_user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;jenkins_password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;source_credentials&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values_at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;server&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;remote_file&lt;/span&gt; &lt;span class="vi"&gt;@new_resource&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;mode&lt;/span&gt;  &lt;span class="n"&gt;new_resource&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mode&lt;/span&gt;
    &lt;span class="n"&gt;group&lt;/span&gt; &lt;span class="n"&gt;new_resource&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;
    &lt;span class="n"&gt;owner&lt;/span&gt; &lt;span class="n"&gt;new_resource&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;owner&lt;/span&gt;
    &lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;jenkins_user&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;jenkins_password&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;@&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;jenkins_server&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/job/&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;new_resource&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;new_resource&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/artifact/&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;new_resource&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;artifact&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="ss"&gt;:delete&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="vi"&gt;@new_resource&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="ss"&gt;:delete&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you can see, this is a very simple use of &lt;code&gt;remote_file&lt;/code&gt;. The interesting thing here is the composition of the URL.&lt;br&gt;
Also note that Jenkins doesn't use "401 Unauthorized" to tell clients they need to login, it just flat-out rejects them. To handle this, you need to use &lt;a href="http://hc.apache.org/httpclient-3.x/authentication.html#Preemptive_Authentication"&gt;Preemptive Authentication&lt;/a&gt;, meaning that the client sends the credentials on the first request. Chef's &lt;code&gt;remote_file&lt;/code&gt; does so, but &lt;code&gt;wget&lt;/code&gt; doesn't.&lt;br&gt;
The default value for "build" causes it to retrieve the artifact from the last successful build.&lt;/p&gt;
&lt;h3&gt;JenkinsVersionedSvn&lt;/h3&gt;
&lt;p&gt;This is a resource used to check out an SVN repo in a specific version that matches the one used in the last successful build of a Jenkins job.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# slasher_development/resources/jenkins_versioned_svn.rb&lt;/span&gt;

&lt;span class="n"&gt;actions&lt;/span&gt; &lt;span class="ss"&gt;:checkout&lt;/span&gt;
&lt;span class="n"&gt;default_action&lt;/span&gt; &lt;span class="ss"&gt;:checkout&lt;/span&gt;

&lt;span class="n"&gt;attribute&lt;/span&gt; &lt;span class="ss"&gt;:path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:kind_of&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:name_attribute&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
&lt;span class="n"&gt;attribute&lt;/span&gt; &lt;span class="ss"&gt;:repository&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:kind_of&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;
&lt;span class="n"&gt;attribute&lt;/span&gt; &lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:kind_of&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;
&lt;span class="n"&gt;attribute&lt;/span&gt; &lt;span class="ss"&gt;:jenkins_job&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:kind_of&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# slasher_development/providers/jenkins_versioned_svn.rb&lt;/span&gt;

&lt;span class="n"&gt;use_inline_resources&lt;/span&gt;

&lt;span class="n"&gt;source_credentials&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data_bag_item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;secret_stuff&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;jenkins&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="ss"&gt;:checkout&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;jenkins_server&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;jenkins_user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;jenkins_password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;source_credentials&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values_at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;server&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;svn_user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;svn_pass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data_bag_item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;secret_deployment&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;svn&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values_at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pass&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="no"&gt;DyDevelopment&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;JenkinsQuery&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jenkins_server&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;jenkins_user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;jenkins_password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="vi"&gt;@new_resource&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jenkins_job&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;my_revision&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;last_successful_build_revision&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@new_resource&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;repository&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;my_revision&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dy_subversion&lt;/span&gt; &lt;span class="vi"&gt;@new_resource&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;repository&lt;/span&gt; &lt;span class="n"&gt;new_resource&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;repository&lt;/span&gt;
      &lt;span class="n"&gt;revision&lt;/span&gt; &lt;span class="n"&gt;my_revision&lt;/span&gt;
      &lt;span class="n"&gt;svn_username&lt;/span&gt; &lt;span class="n"&gt;svn_user&lt;/span&gt;
      &lt;span class="n"&gt;svn_password&lt;/span&gt; &lt;span class="n"&gt;svn_pass&lt;/span&gt;
      &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="n"&gt;new_resource&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="n"&gt;new_resource&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;updated_by_last_action&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;updated_by_last_action?&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="no"&gt;Chef&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="vi"&gt;@new_resource&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jenkins_job&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; has no last successful build. Will not deploy&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Again, this resource can be generalized to support more build types.&lt;/p&gt;</content><category term="FOSS"></category><category term="Jenkins"></category><category term="Chef"></category><category term="HTTP"></category></entry><entry><title>Filtering in Shell</title><link href="https://blog.backslasher.net/shell-filter.html" rel="alternate"></link><published>2016-02-29T13:00:00+01:00</published><updated>2016-02-29T13:00:00+01:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2016-02-29:/shell-filter.html</id><summary type="html">&lt;p&gt;Today I told someone that a feature I'm missing in Bash is filtering.&lt;br&gt;
Then I thought about how much I miss it, so I went ahead and "implemented" it.&lt;/p&gt;
&lt;h3&gt;Filtering in other lanaugaes&lt;/h3&gt;
&lt;p&gt;Basically, I'm referring to taking a collection/stream of items, running some code on every one, and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Today I told someone that a feature I'm missing in Bash is filtering.&lt;br&gt;
Then I thought about how much I miss it, so I went ahead and "implemented" it.&lt;/p&gt;
&lt;h3&gt;Filtering in other lanaugaes&lt;/h3&gt;
&lt;p&gt;Basically, I'm referring to taking a collection/stream of items, running some code on every one, and only passing on the ones that make the code evaluate to a "truthy" value.&lt;/p&gt;
&lt;p&gt;In PowerShell:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;Some-Command&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;where-object&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;SOME_CODE_HERE&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Other-Command&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In Ruby:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;some_command&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;SOME_CODE_HERE&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;other_command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In Python:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;collection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;some_command&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;collection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SOME_CODE_HERE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;other_command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Basic Implementation&lt;/h3&gt;
&lt;p&gt;I thought about writing a script file but settled for a function. It can be extracted and moved to a file, should it matter to anyone.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;filter&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;read&lt;/span&gt; __line&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    ! &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$__line&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$__line&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
  &lt;span class="k"&gt;done&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;All of the parameters passed are evaluated in a subshell that has the function's STDIN.&lt;br&gt;
My only issue was that I wanted to avoid designating a specific replacement string for the "current item" (like &lt;code&gt;$_&lt;/code&gt; in PowerShell / Perl), so I use &lt;code&gt;$(head -n1)&lt;/code&gt;&lt;br&gt;
For example, this is how I can pull a list of Chef nodes and only show the ones responding to SSH:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;knife node list &lt;span class="p"&gt;|&lt;/span&gt; filter &lt;span class="s1"&gt;&amp;#39;ssh $(head -n1) -o ConnectTimeout=1 -o StrictHostKeyChecking=no hostname &amp;lt;/dev/null &amp;amp;&amp;gt;/dev/null&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Assuming I have a test I want to run on each server in a script (e.g. does it have a problematic kernel version), I can do it like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="c1"&gt;# script in /tmp/bla.sh&lt;/span&gt;
ssh &lt;span class="k"&gt;$(&lt;/span&gt;head -n1&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;uname -a | grep &amp;#39; 2.6&amp;#39;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&amp;gt;/dev/null
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;knife node list &lt;span class="p"&gt;|&lt;/span&gt; filter /tmp/bla.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Also possible is actually using the internal variable:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;cat /tmp/servers.txt &lt;span class="p"&gt;|&lt;/span&gt; filter ssh &lt;span class="s1"&gt;&amp;#39;$__line&amp;#39;&lt;/span&gt; hostname &lt;span class="s1"&gt;&amp;#39;&amp;amp;&amp;gt;/dev/null&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Parallel implementation&lt;/h3&gt;
&lt;p&gt;Using the wonderful &lt;code&gt;parallel&lt;/code&gt; utility, I can get parallel filtering&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;filter_parallel() {&lt;/span&gt;
&lt;span class="err"&gt;  parallel &amp;quot;! (echo &amp;#39;{}&amp;#39; | ($@)) || echo &amp;#39;{}&amp;#39;&amp;quot;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Works about the same, except that because the command is evaluated in a sub-process rather than a sub-shell, no bash functions / variables are available&lt;/p&gt;
&lt;p&gt;I had a bet here whether this is useful to anyone. If you find that you've been missing this as well, please leave me a comment!&lt;/p&gt;</content><category term="FOSS"></category><category term="Scripts"></category><category term="Bash"></category><category term="Shell"></category></entry><entry><title>Cookbook Versioning Script</title><link href="https://blog.backslasher.net/cookbook-versioning.html" rel="alternate"></link><published>2016-02-29T12:00:00+01:00</published><updated>2016-02-29T12:00:00+01:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2016-02-29:/cookbook-versioning.html</id><summary type="html">&lt;h2&gt;The Problem&lt;/h2&gt;
&lt;p&gt;I've always disliked releasing cookbook versions manually. The process requires a lot of bureaucratic steps which are easy to forget and require no thought at all.&lt;br&gt;
Before I had this script, I sometimes avoided modifying the cookbook's version when I only applied "a little fix", losing the ability …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;The Problem&lt;/h2&gt;
&lt;p&gt;I've always disliked releasing cookbook versions manually. The process requires a lot of bureaucratic steps which are easy to forget and require no thought at all.&lt;br&gt;
Before I had this script, I sometimes avoided modifying the cookbook's version when I only applied "a little fix", losing the ability to roll back to previous versions (for instance).&lt;br&gt;
I also had little success in having anybody else follow my tedious procedure, which led to the "only I can touch master" approach that turned me into a serious bottleneck in cookbook releases.&lt;/p&gt;
&lt;h2&gt;The Solution&lt;/h2&gt;
&lt;p&gt;Nowdays I have a Jenkins job which is in charge of taking a "topical" branch and merging it "properly" to the cookbook's master branch.&lt;br&gt;
The job contains these steps:&lt;/p&gt;
&lt;h3&gt;1. Valdate git-etiquette&lt;/h3&gt;
&lt;p&gt;I need to make sure that this branch is following my guidelines for PRs:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;It has to be a descendant of master&lt;br&gt;
    This is done to ensure that the resulting merge will be a fast-forward merge (FF), keeping my git history uncomplicated, saving me from unexpected merge conflicts, and avoiding merge-only issues (&lt;code&gt;master&lt;/code&gt; works fine, &lt;code&gt;topical&lt;/code&gt; works fine, their merge somehow doesn't. It happens).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It needs to be merge-commit free:&lt;br&gt;
    I really like my commit trees linear. I also expect merge-candidates to be short-lived topical branches, so it makes sense to expect a straightforward chain of commits from them&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt; -e

&lt;span class="c1"&gt;# `git merge-base --is-ancestor` on git&amp;gt;1.8&lt;/span&gt;
&lt;span class="nv"&gt;A&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;git rev-parse --short HEAD&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#current commit&lt;/span&gt;
&lt;span class="nv"&gt;B&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;master&amp;quot;&lt;/span&gt; &lt;span class="c1"&gt;# target_branch&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;git merge-base &lt;span class="nv"&gt;$A&lt;/span&gt; &lt;span class="nv"&gt;$B&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;git rev-parse --verify &lt;span class="nv"&gt;$A&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Will not merge &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;B&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; into itself&amp;quot;&lt;/span&gt; &amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;
  &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;git merge-base &lt;span class="nv"&gt;$B&lt;/span&gt; &lt;span class="nv"&gt;$A&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; !&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;git rev-parse --verify &lt;span class="nv"&gt;$B&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Will not perform a non-FF merge&amp;quot;&lt;/span&gt; &amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;
  &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -n &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;git log --merges &lt;span class="nv"&gt;$A&lt;/span&gt;..&lt;span class="nv"&gt;$B&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Will not introduce merge commits&amp;quot;&lt;/span&gt; &amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;
  &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="c1"&gt;# All OK&lt;/span&gt;
&lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;2. Test Cookbook&lt;/h3&gt;
&lt;p&gt;In real life, this is done by a different Jenkins job, since "testing a cookbook" is an action I use a lot in my workflows.
The simplest way of doing it, however, can be something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;berks install &lt;span class="c1"&gt;# Fetch dependencies&lt;/span&gt;
berks verify  &lt;span class="c1"&gt;# Check syntax etc&lt;/span&gt;
foodcritic .  &lt;span class="c1"&gt;# Linting&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;These steps require the ChefDK installed, obviously&lt;/p&gt;
&lt;h3&gt;3. Choose a new version number&lt;/h3&gt;
&lt;p&gt;I use the &lt;a href="http://semver.org/"&gt;semantic versioning&lt;/a&gt; standard versioning, which basically means that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If I break backwards-compatibility, it's a major version (X.x.x)&lt;/li&gt;
&lt;li&gt;Else-if I add new features, it's a minor version (x.X.x)&lt;/li&gt;
&lt;li&gt;Else it's a build number (x.x.X)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To determine the increment required, I've decided to look through git commit messages and detect strings indicating big changes.&lt;br&gt;
My reasoning is that when a developer adds a significant change (e.g. a breaking change), they can include the string &lt;code&gt;MAJOR_BUMP&lt;/code&gt; in their commit message and forget about it.&lt;br&gt;
This script will see that the new commits include such messages and increment the major version.&lt;br&gt;
It might look a bit hackish, but it works&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/usr/bin/env ruby&lt;/span&gt;
&lt;span class="c1"&gt;# monkey patching&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt; 

&lt;span class="n"&gt;target_branch&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;master&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;has_minor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`git log &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;target_branch&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;.. --grep=BUMP_MINOR`&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;has_major&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`git log &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;target_branch&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;.. --grep=BUMP_MAJOR`&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;bump_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;has_major&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;major&amp;#39;&lt;/span&gt;
          &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="n"&gt;has_minor&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;minor&amp;#39;&lt;/span&gt;
          &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;build&amp;#39;&lt;/span&gt;
          &lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# Get next version&lt;/span&gt;
&lt;span class="n"&gt;split_options&lt;/span&gt;&lt;span class="o"&gt;=[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;major&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;minor&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;build&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;split_index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;split_options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bump_type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;unknown bump modifier&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;split_index&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nil?&lt;/span&gt;
&lt;span class="n"&gt;metadata_file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;./metadata.rb&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metadata_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;version_line&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="sr"&gt;/^\s*version\W/&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;last&lt;/span&gt;
&lt;span class="n"&gt;version_regex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sr"&gt;/(&amp;quot;|&amp;#39;)([\d\.]+)(&amp;quot;|&amp;#39;)/&lt;/span&gt;
&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;version_line&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;version_regex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;v_arr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;v_arr&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;split_index&lt;/span&gt;&lt;span class="o"&gt;]=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v_arr&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;split_index&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;to_i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_s&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;split_index&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="n"&gt;v_arr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;v_arr&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;]=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;# Zero other cells&lt;/span&gt;
&lt;span class="n"&gt;new_version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;v_arr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Export new_version somehow to the other scripts&lt;/span&gt;
&lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;NEW_VERSION&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;new_version&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;4. Modify the version identifier&lt;/h3&gt;
&lt;p&gt;Now that we have a version, we need to update the &lt;code&gt;metadata.rb&lt;/code&gt; file with the new version number&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/usr/bin/env ruby&lt;/span&gt;
&lt;span class="c1"&gt;# monkey patching&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;new_version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="no"&gt;ENV&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;NEW_VERSION&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# Read file&lt;/span&gt;
&lt;span class="n"&gt;metadata_file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;./metadata.rb&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metadata_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Find version line&lt;/span&gt;
&lt;span class="n"&gt;version_regex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sr"&gt;/(&amp;quot;|&amp;#39;)([\d\.]+)(&amp;quot;|&amp;#39;)/&lt;/span&gt;
&lt;span class="n"&gt;version_line&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="sr"&gt;/^\s*version\W/&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;last&lt;/span&gt;

&lt;span class="c1"&gt;# Generate new one&lt;/span&gt;
&lt;span class="n"&gt;new_version_line&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;version_line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gsub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;version_regex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;new_version&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;new_metadata&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gsub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/\n&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="no"&gt;Regexp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;escape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;version_line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sr"&gt;\n/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;new_version_line&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Write back to file&lt;/span&gt;
&lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metadata_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;new_metadata&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;5. Create changelog&lt;/h3&gt;
&lt;p&gt;This is by far the most tedious step to do manually, and also the hardest (IMO) to automate. I insist on maintaining a changelog for cookbooks, because:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The git history isn't always available (e.g. in the cookbook's "compiled" form)&lt;/li&gt;
&lt;li&gt;Compiled artifacts shouldn't rely on version-control-specific details, such as commits.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I support the changelog formats created by both &lt;code&gt;berks cookbook&lt;/code&gt; and &lt;code&gt;knife cookbook create&lt;/code&gt;.&lt;br&gt;
The gist of the script is:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Extract commit message in a specific format from every commit to be merged&lt;/li&gt;
&lt;li&gt;Combine them into a markdown-like list&lt;/li&gt;
&lt;li&gt;Add the list at the right place in the &lt;code&gt;CHANGELOG&lt;/code&gt; file - before the topmost version&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/usr/bin/env ruby&lt;/span&gt;
&lt;span class="c1"&gt;# monkey patching&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;target_branch&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;master&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;new_version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="no"&gt;ENV&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;NEW_VERSION&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# Collect messages&lt;/span&gt;
&lt;span class="n"&gt;messages&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`git log &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;target_branch&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;.. --format=&amp;#39;%w(0,0,4)- [%h] (%an) %s%n%n%b&amp;#39;`&lt;/span&gt;

&lt;span class="c1"&gt;# Combine to markdown&lt;/span&gt;
&lt;span class="n"&gt;new_changes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;# &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;new_version&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;messages&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# Modify file&lt;/span&gt;
&lt;span class="n"&gt;changes_file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;./CHANGELOG.md&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;changes_content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;changes_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# Handle multiple formats&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;changes_content&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="sr"&gt;/^#/&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# Berks format&lt;/span&gt;
  &lt;span class="n"&gt;changes_content&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/#/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;new_changes&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;#&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="n"&gt;changes_content&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="sr"&gt;/^.* CHANGELOG\n=*\n/&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# Knife format&lt;/span&gt;
  &lt;span class="n"&gt;changes_content&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/\n[\d\.]+\n-*\n/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;new_changes&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\n\\&lt;/span&gt;&lt;span class="s2"&gt;0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Added pound&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
  &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Unknown format in &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;changes_file&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;changes_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;changes_content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;6. Create the version commit&lt;/h3&gt;
&lt;p&gt;The modifications to the files need to be commited as the "version bump" commit. This commit will also be the tip for the new version.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git commit metadata.rb CHANGELOG.md -m &lt;span class="s2"&gt;&amp;quot;Upgraded to version &lt;/span&gt;&lt;span class="nv"&gt;$NEW_VERSION&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;7. Tag and push&lt;/h3&gt;
&lt;p&gt;The new version should be pushed to &lt;code&gt;master&lt;/code&gt; and tagged as &lt;code&gt;vNEW_VERSION&lt;/code&gt;. In my case, this is done in a Jenkins-specific action, but it can be scripted like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git tag &lt;span class="s2"&gt;&amp;quot;v&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;NEW_VERSION&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
git push --tags
git push origin HEAD:master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;8. Upload to production&lt;/h3&gt;
&lt;p&gt;This is the simple version:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;berks upload
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And this is the one I actually use, which helps me generate a nice message about which cookbooks were modified:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;BERKS_OUT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;berks upload &lt;span class="p"&gt;|&lt;/span&gt; grep &lt;span class="s1"&gt;&amp;#39;^Uploaded&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Uploaded: &amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$BERKS_OUT&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Update 25.11.16&lt;/h2&gt;
&lt;p&gt;I joined all of these to a standalone script I use for my own cookbooks:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/usr/bin/env ruby&lt;/span&gt;

&lt;span class="c1"&gt;# Arguments&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;optparse&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;target_branch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;master&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="no"&gt;OptionParser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-M&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Major bump&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:major_bump&lt;/span&gt;&lt;span class="o"&gt;]=&lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-m&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Minor bump&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:minor_bump&lt;/span&gt;&lt;span class="o"&gt;]=&lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;--directory D&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Working directory&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:directory&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-t&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;--target TAR&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Commit containing current version&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:target_branch&lt;/span&gt;&lt;span class="o"&gt;]=&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse!&lt;/span&gt;

&lt;span class="n"&gt;target_branch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:target_branch&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# monkey patching&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# cd to target directory&lt;/span&gt;
&lt;span class="no"&gt;Dir&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:directory&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:directory&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# New version&lt;/span&gt;
&lt;span class="n"&gt;split_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:major_bump&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
              &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:minor_bump&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
              &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
              &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="n"&gt;metadata_file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;./metadata.rb&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metadata_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;version_line&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="sr"&gt;/^\s*version\W/&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;last&lt;/span&gt;
&lt;span class="n"&gt;version_regex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sr"&gt;/(&amp;quot;|&amp;#39;)([\d\.]+)(&amp;quot;|&amp;#39;)/&lt;/span&gt;
&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;version_line&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;version_regex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;v_arr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;v_arr&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;split_index&lt;/span&gt;&lt;span class="o"&gt;]=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v_arr&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;split_index&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;to_i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_s&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;split_index&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="n"&gt;v_arr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;v_arr&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;]=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;# Zero other cells&lt;/span&gt;
&lt;span class="n"&gt;new_version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;v_arr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#### Changelog&lt;/span&gt;

&lt;span class="c1"&gt;# Collect messages&lt;/span&gt;
&lt;span class="n"&gt;messages&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`git log &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;target_branch&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;.. --format=&amp;#39;%w(0,0,4)- [%h] (%an) %s&amp;#39;`&lt;/span&gt;

&lt;span class="c1"&gt;# Combine to markdown&lt;/span&gt;
&lt;span class="n"&gt;new_changes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;# &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;new_version&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;messages&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# Modify file&lt;/span&gt;
&lt;span class="n"&gt;changes_file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;./CHANGELOG.md&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;changes_content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;changes_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# Handle multiple formats&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;changes_content&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="sr"&gt;/^#/&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# Berks format&lt;/span&gt;
  &lt;span class="n"&gt;changes_content&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/#/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;new_changes&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;#&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="n"&gt;changes_content&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="sr"&gt;/^.* CHANGELOG\n=*\n/&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# Knife format&lt;/span&gt;
  &lt;span class="n"&gt;changes_content&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/\n[\d\.]+\n-*\n/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;new_changes&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\n\\&lt;/span&gt;&lt;span class="s2"&gt;0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Added pound&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
  &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Unknown format in &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;changes_file&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;changes_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;changes_content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#### Metadata file&lt;/span&gt;

&lt;span class="c1"&gt;# Read file&lt;/span&gt;
&lt;span class="n"&gt;metadata_file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;./metadata.rb&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metadata_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Find version line&lt;/span&gt;
&lt;span class="n"&gt;version_regex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sr"&gt;/(&amp;quot;|&amp;#39;)([\d\.]+)(&amp;quot;|&amp;#39;)/&lt;/span&gt;
&lt;span class="n"&gt;version_line&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="sr"&gt;/^\s*version\W/&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;last&lt;/span&gt;

&lt;span class="c1"&gt;# Generate new one&lt;/span&gt;
&lt;span class="n"&gt;new_version_line&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;version_line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gsub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;version_regex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;new_version&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;new_metadata&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gsub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/\n&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="no"&gt;Regexp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;escape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;version_line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sr"&gt;\n/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;new_version_line&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Write back to file&lt;/span&gt;
&lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metadata_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;new_metadata&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# TODO git tag&lt;/span&gt;
&lt;span class="c1"&gt;# TODO merge master&lt;/span&gt;
&lt;span class="c1"&gt;# TODO push&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content><category term="FOSS"></category><category term="Scripts"></category><category term="Ruby"></category><category term="Bash"></category><category term="Chef"></category></entry><entry><title>Migrating Grafana's Dashboards</title><link href="https://blog.backslasher.net/grafana-migrate-dashboards.html" rel="alternate"></link><published>2016-02-22T12:00:00+01:00</published><updated>2016-02-22T12:00:00+01:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2016-02-22:/grafana-migrate-dashboards.html</id><summary type="html">&lt;p&gt;Similar to my &lt;a href="https://blog.backslasher.net/graphite-migrate-dashboards.html"&gt;Graphite dashboard migration script&lt;/a&gt;, I made a Grafana one.&lt;br&gt;
I'm targeting Grafana v2+.&lt;br&gt;
Note it's using &lt;a href="https://github.com/httprb/http"&gt;http&lt;/a&gt; for its HTTP calls.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;old_server&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://OLDY&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;new_server&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://NEWY&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;creds&lt;/span&gt;&lt;span class="o"&gt;=[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pass&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;json&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="no"&gt;HTTP&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basic_auth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;creds&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;pass&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;creds&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;board_names&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="no"&gt;JSON&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Similar to my &lt;a href="https://blog.backslasher.net/graphite-migrate-dashboards.html"&gt;Graphite dashboard migration script&lt;/a&gt;, I made a Grafana one.&lt;br&gt;
I'm targeting Grafana v2+.&lt;br&gt;
Note it's using &lt;a href="https://github.com/httprb/http"&gt;http&lt;/a&gt; for its HTTP calls.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;old_server&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://OLDY&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;new_server&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://NEWY&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;creds&lt;/span&gt;&lt;span class="o"&gt;=[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pass&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;json&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="no"&gt;HTTP&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basic_auth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;creds&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;pass&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;creds&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;board_names&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="no"&gt;JSON&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;old_server&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/api/search&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;uri&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;gsub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/^db\//&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;

&lt;span class="n"&gt;board_names&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;dat&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="no"&gt;JSON&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;old_server&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/api/dashboards/db/&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;dat&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dashboard&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;new_server&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/api/dashboards/db&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;dashboard&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;dat&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dashboard&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;overwrite&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_json&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;application/json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_s&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="FOSS"></category><category term="Grafana"></category><category term="Ruby"></category><category term="Scripts"></category></entry><entry><title>Running external Ruby code from Vagrant</title><link href="https://blog.backslasher.net/running-external-ruby-code-from-vagrant.html" rel="alternate"></link><published>2016-02-21T12:00:00+01:00</published><updated>2016-02-21T12:00:00+01:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2016-02-21:/running-external-ruby-code-from-vagrant.html</id><summary type="html">&lt;h2&gt;The Story&lt;/h2&gt;
&lt;p&gt;Like a lot of Chef users, I'm using Vagrant for testing my cookbooks. I'm also using Berkshelf for providing the Vagrant box with the cookbooks it needs.&lt;br&gt;
Until recently, I was happy using the ChefDK-provided Berlshelf (v4.0.1). I stopped being happy when running &lt;code&gt;berks&lt;/code&gt; started consuming …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;The Story&lt;/h2&gt;
&lt;p&gt;Like a lot of Chef users, I'm using Vagrant for testing my cookbooks. I'm also using Berkshelf for providing the Vagrant box with the cookbooks it needs.&lt;br&gt;
Until recently, I was happy using the ChefDK-provided Berlshelf (v4.0.1). I stopped being happy when running &lt;code&gt;berks&lt;/code&gt; started consuming CPU for ~5 mins and then failing when my &lt;code&gt;Berksfile&lt;/code&gt; contained multiple sources (the Chef Supermarket and my private Chef server).&lt;br&gt;
While troubleshooting it I've learned that there's an issue with the native dependency graph solver, and I won't be able to fix it in less than a week.&lt;br&gt;
I also noticed that the latest version of the Berkshelf gem (v4.1.1) had no such issues (unless I'm mistaken, it's because it switched to the native Ruby graph solver).  &lt;/p&gt;
&lt;p&gt;The next logical step was migrating to the new version of Berkshelf&lt;/p&gt;
&lt;h3&gt;Attempting to upgrade Berkshelf in the ChefDK&lt;/h3&gt;
&lt;p&gt;I firstly tried working inside ChefDK by upgrading its version of ChefDK.&lt;br&gt;
This made me learn several interesting things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The &lt;code&gt;/usr/bin/berks&lt;/code&gt; file (actually &lt;code&gt;/opt/chefdk/bin/berks&lt;/code&gt;) loads specific versions of Gems.&lt;br&gt;
    This means that even if I install the new version of Berkshelf correctly, I'd have to modify this entry point, and it won't be trivial.&lt;/li&gt;
&lt;li&gt;The ChefDK Ruby environment is configured to install new Gems into the User's home directory (using &lt;code&gt;GEM_HOME&lt;/code&gt;).&lt;br&gt;
    I'm not sure why (&lt;a href="https://github.com/chef/chef-dk/pull/160"&gt;something related&lt;/a&gt; with developing gems?)&lt;/li&gt;
&lt;li&gt;The only way I could execute the new Berkshelf gem "properly" inside the ChefDK was using a &lt;code&gt;Gemfile&lt;/code&gt; and something like &lt;code&gt;chef exec bundle exec Berkshelf&lt;/code&gt;, which was really annoying&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Eventually I decided that the comfort of working inside the ChefDK isn't worth the effort, as taking a clean Ruby 2 environment (e.g. using RVM or Bundler) and installing the Berkshelf Gem inside was effortless.&lt;br&gt;
This worked well for non-Vagrant usage (e.g. calling it from Jenkins), but I still had quite a lot of work.&lt;/p&gt;
&lt;h3&gt;Running Ruby in Vagrant&lt;/h3&gt;
&lt;p&gt;My second issue was with running any Ruby code from inside Vagrant.&lt;br&gt;
As any Vagrant-Berkshelf veteran knows, the workflow goes something like this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;User runs some command requiring provisioning, like &lt;code&gt;vagrant up&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Vagrant calls the &lt;code&gt;vagrant-berkshelf&lt;/code&gt; methods pretty early in the Vagrant workflow (after &lt;code&gt;Vagrant::Action::Builtin::ConfigValidate&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vagrant-berkshelf&lt;/code&gt; runs &lt;code&gt;berks install&lt;/code&gt; to locate all relevant cookbooks and generate the &lt;code&gt;Bersfile.lock&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vagrant-berkshelf&lt;/code&gt; calls &lt;code&gt;berks vendor&lt;/code&gt; to make a directory containing all cookbooks that the VM needs, which will be accessed by the Chef client on the VM
And so forth&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This workflow heavily depends on Vagrant executing Berkshelf, which works with ChefDK's Berkshelf because its entry point is "environment-variable proof":&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/opt/chefdk/embedded/bin/ruby&lt;/span&gt;
&lt;span class="c1"&gt;#--APP_BUNDLER_BINSTUB_FORMAT_VERSION=1--&lt;/span&gt;
&lt;span class="no"&gt;ENV&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;GEM_HOME&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;ENV&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;GEM_PATH&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="no"&gt;ENV&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;APPBUNDLER_ALLOW_RVM&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;true&amp;quot;&lt;/span&gt;
&lt;span class="c1"&gt;#...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Compare this to the "normal" entry point generated by Gems:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/usr/bin/ruby2.0&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# This file was generated by RubyGems.&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# The application &amp;#39;berkshelf&amp;#39; is installed as part of a gem, and&lt;/span&gt;
&lt;span class="c1"&gt;# this file is here to facilitate running it.&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;

&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rubygems&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;gt;= 0&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="no"&gt;ARGV&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;
  &lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;ARGV&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;
  &lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;force_encoding&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;BINARY&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;respond_to?&lt;/span&gt; &lt;span class="ss"&gt;:force_encoding&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="sr"&gt;/\A_(.*)_\z/&lt;/span&gt;
    &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vg"&gt;$1&lt;/span&gt;
    &lt;span class="no"&gt;ARGV&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shift&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;berkshelf&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;
&lt;span class="nb"&gt;load&lt;/span&gt; &lt;span class="no"&gt;Gem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bin_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;berkshelf&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;berks&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The environment negation (deleting &lt;code&gt;GEM_HOME&lt;/code&gt; and &lt;code&gt;GEM_PATH&lt;/code&gt;) is (IMO) related to the Vagrant use-case.&lt;br&gt;
Fact is, Vagrant is polluting the environment of subprocesses with Vagrant-specific Ruby-related variables.&lt;/p&gt;
&lt;h3&gt;Vagrant, Bundler and external processes&lt;/h3&gt;
&lt;p&gt;Vagrant uses Bundler as a way of managing its Ruby dependencies (both internal and plugins), so Vagrant suffers from the same issue that Bundler has - it assumes that subprocesses are supposed to run inside its own Ruby environment. To do so, it modifies its own ruby-related environment variables, such as &lt;code&gt;GEM_PATH&lt;/code&gt; (where to look for gems) and &lt;code&gt;GEM_HOME&lt;/code&gt; (where gems should be installed).&lt;br&gt;
For cases where it's not true, Bundler offers a method called &lt;a href="http://www.rubydoc.info/github/bundler/bundler/Bundler.with_clean_env"&gt;&lt;code&gt;Bundler.with_clean_env&lt;/code&gt;&lt;/a&gt;. This should yield (execute a given code block) with the "original" environment (the one bundler had when it started), so any processes spawned from that block should be free of the Bundler contamination.&lt;br&gt;
Vagrant tries to utilize this method, but it doesn't work as expected.  &lt;/p&gt;
&lt;h4&gt;&lt;code&gt;with_clean_env&lt;/code&gt; internals&lt;/h4&gt;
&lt;p&gt;Let's drill down a bit:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# https://github.com/bundler/bundler/blob/5131fcd/lib/bundler.rb#L211&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;with_clean_env&lt;/span&gt;
  &lt;span class="n"&gt;with_original_env&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="no"&gt;ENV&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;MANPATH&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;ENV&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;BUNDLE_ORIG_MANPATH&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="no"&gt;ENV&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delete_if&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;BUNDLE_&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="no"&gt;ENV&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;has_key?&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;RUBYOPT&amp;#39;&lt;/span&gt;
      &lt;span class="no"&gt;ENV&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;RUBYOPT&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;ENV&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;RUBYOPT&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;-rbundler/setup&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
      &lt;span class="no"&gt;ENV&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;RUBYOPT&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;ENV&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;RUBYOPT&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;-I&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expand_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;..&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;__FILE__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# https://github.com/bundler/bundler/blob/5131fcd/lib/bundler.rb#L203&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;with_original_env&lt;/span&gt;
  &lt;span class="n"&gt;bundled_env&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;ENV&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_hash&lt;/span&gt;
  &lt;span class="no"&gt;ENV&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;ORIGINAL_ENV&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;yield&lt;/span&gt;
&lt;span class="k"&gt;ensure&lt;/span&gt;
  &lt;span class="no"&gt;ENV&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bundled_env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_hash&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# https://github.com/bundler/bundler/blob/5131fcd/lib/bundler.rb#L16&lt;/span&gt;
&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Bundler&lt;/span&gt;
  &lt;span class="no"&gt;ORIGINAL_ENV&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;environment_preserver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;restore&lt;/span&gt;
  &lt;span class="no"&gt;ENV&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environment_preserver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;backup&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So, when the Bundler module is loaded, it creates a backup of the current environment variables. This backup (plus some modifications) is used whenever &lt;code&gt;with_clean_env&lt;/code&gt; is called. How can it break?&lt;/p&gt;
&lt;p&gt;By adding debug prints inside the Bundler gem, I deduced the following facts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Bundler is invoked twice&lt;br&gt;
    First, the entry point is &lt;code&gt;pre-rubygems.rb&lt;/code&gt;, as evident from the &lt;a href="https://github.com/mitchellh/vagrant-installers/blob/c5eb9bb/substrate/launcher/main.go"&gt;vagrant launcher&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// Line 187&lt;/span&gt;

&lt;span class="nx"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;ruby&amp;quot;&lt;/span&gt;
&lt;span class="nx"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;filepath&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gemPath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;lib&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;vagrant&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;pre-rubygems.rb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note these bits at &lt;a href="https://github.com/mitchellh/vagrant/blob/27157b5/lib/vagrant/pre-rubygems.rb"&gt;lib/vagrant/pre-rubygems.rb&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Line 19&lt;/span&gt;
&lt;span class="n"&gt;require_relative&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;bundler&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;!-- --&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Line 30&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="no"&gt;ENV&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;VAGRANT_EXECUTABLE&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
  &lt;span class="no"&gt;Kernel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ruby&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;ENV&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;VAGRANT_EXECUTABLE&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="no"&gt;ARGV&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
  &lt;span class="no"&gt;Kernel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;vagrant&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="no"&gt;ARGV&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And finally, this in &lt;a href="https://github.com/mitchellh/vagrant/blob/27157b5/bin/vagrant"&gt;&lt;code&gt;bin/vagrant&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Line 69&lt;/span&gt;

&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;bundler&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you can see, the &lt;code&gt;pre-rubygems.rb&lt;/code&gt; file is invoked first, loads Bundler, and then &lt;a href="http://linux.die.net/man/3/exec"&gt;execs&lt;/a&gt; the Vagrant entry point, which loads its own Bundler.
So the Bundler gem is loaded twice, and the second instance "saves" the environment already modified by the first instace, meaning &lt;code&gt;with_clean_env&lt;/code&gt; is useless.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Vagrant works around this&lt;br&gt;
    The Vagrant devs tried to solve this issue by backing up the environment variables before any modification, like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// https://github.com/mitchellh/vagrant-installers/blob/c5eb9bb/substrate/launcher/main.go&lt;/span&gt;
&lt;span class="c1"&gt;// Line 18&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;envPrefix&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;VAGRANT_OLD_ENV&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;!-- --&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// https://github.com/mitchellh/vagrant-installers/blob/c5eb9bb/substrate/launcher/main.go&lt;/span&gt;
&lt;span class="c1"&gt;// Line 150&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="nx"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Environ&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;strings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;IndexRune&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;=&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%s_%s&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;envPrefix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="nx"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="nx"&gt;newEnv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;idx&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And then allow restoring from it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# https://github.com/mitchellh/vagrant/blob/27157b5/lib/vagrant.rb&lt;/span&gt;
&lt;span class="c1"&gt;# Line 236&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;original_env&lt;/span&gt;
    &lt;span class="p"&gt;{}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tap&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="no"&gt;ENV&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_with?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;VAGRANT_OLD_ENV&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/^VAGRANT_OLD_ENV_/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This method works (sort of).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;&lt;code&gt;with_original_env&lt;/code&gt; is done wrong&lt;/h3&gt;
&lt;p&gt;Both the Bundler backup environment and the Vagrant backup environment are being handled in &lt;a href="https://github.com/mitchellh/vagrant/blob/dec5f70/lib/vagrant/util/env.rb"&gt;&lt;code&gt;Vagrant::Util::Env.with_original_env&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;with_original_env&lt;/span&gt;
  &lt;span class="n"&gt;original_env&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;ENV&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_hash&lt;/span&gt;
  &lt;span class="no"&gt;ENV&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Bundler&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;ORIGINAL_ENV&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;defined?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Bundler&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;ORIGINAL_ENV&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="no"&gt;ENV&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Vagrant&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;original_env&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;yield&lt;/span&gt;
&lt;span class="k"&gt;ensure&lt;/span&gt;
  &lt;span class="no"&gt;ENV&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;original_env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_hash&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, notice the two issues here:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;In the normal Vagrant flow (working via the Vagrant launcher), the &lt;code&gt;Bundler::ORIGINAL_ENV&lt;/code&gt; hash is useless because of the double invocation of Bundler.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Because we're only using &lt;code&gt;update&lt;/code&gt; with the "proper" environment backup, values won't be deleted, only replaced:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;good&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;bad&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;bad&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;good&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;bad&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; {&amp;quot;a&amp;quot;=&amp;gt;1, &amp;quot;b&amp;quot;=&amp;gt;3}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So values that didn't exist in the backup and do exist in the current environment (e.g. &lt;code&gt;GEM_PATH&lt;/code&gt;) will stay.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;The Solution&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/mitchellh/vagrant/pull/7047"&gt;This&lt;/a&gt; is the relevant PR&lt;/p&gt;
&lt;p&gt;Firsty, I modified &lt;code&gt;Vagrant::Util::Env.with_original_env&lt;/code&gt;.&lt;br&gt;
I made the assumption that if we're going through the Vagrant launcher, we only need to restore its environment.&lt;br&gt;
If not, we'll restore the Bundler environment, if one exists.&lt;br&gt;
The result looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;proxy_env&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Vagrant&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;original_env&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="no"&gt;Vagrant&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;original_env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;any?&lt;/span&gt;
  &lt;span class="no"&gt;ENV&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;proxy_env&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="n"&gt;defined?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Bundler&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;ORIGINAL_ENV&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="no"&gt;ENV&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Bundler&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;ORIGINAL_ENV&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;After that, I had to locate the code in charge of spawning new processes and make sure that it's using the right logic.&lt;br&gt;
The interesting method is &lt;code&gt;Vagrant::Util::Subprocess#execute&lt;/code&gt; in &lt;a href="https://github.com/mitchellh/vagrant/blob/dec5f70/lib/vagrant/util/subprocess.rb"&gt;lib/vagrant/util/subprocess.rb&lt;/a&gt;.&lt;br&gt;
It's very long, but you can save yourself reading it by believing me that the only thing it does about saving the subprocess from the Bundler modifications is calling &lt;code&gt;jailbreak&lt;/code&gt;, which is defined in the same file.&lt;br&gt;
The introduction for this method is best quoted from the file direct:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is, quite possibly, the saddest function in all of Vagrant.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The method itself does plenty with the environment, mainly dealing with environment-related corner cases. Our interesting part is this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Bundler&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;ORIGINAL_ENV&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;defined?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Bundler&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;ORIGINAL_ENV&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;merge!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Vagrant&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;original_env&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Instead of repeating the logic from &lt;code&gt;with_original_env&lt;/code&gt;, I removed it from &lt;code&gt;jailbreak&lt;/code&gt;, and instead took &lt;code&gt;process.start&lt;/code&gt; from &lt;code&gt;execute&lt;/code&gt; and wrapped it in &lt;code&gt;with_original_env&lt;/code&gt;, like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="no"&gt;Vagrant&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Util&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;with_original_env&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I might have misunderstood jailbreak a bit, but hopefully it'll work OK.  &lt;/p&gt;
&lt;p&gt;And there you have it.&lt;/p&gt;</content><category term="FOSS"></category><category term="Linux"></category><category term="Vagrant"></category><category term="Ruby"></category><category term="Mysteries Solved"></category><category term="Chef"></category></entry><entry><title>Backslasher-Python: a simple Chef Python cookbook</title><link href="https://blog.backslasher.net/backslasher-python.html" rel="alternate"></link><published>2016-02-20T12:00:00+01:00</published><updated>2016-02-20T12:00:00+01:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2016-02-20:/backslasher-python.html</id><summary type="html">&lt;h3&gt;What's wrong with the current Python cookbook&lt;/h3&gt;
&lt;p&gt;Until now, we were using the &lt;a href="https://github.com/poise/python"&gt;Python cookbook&lt;/a&gt;. This worked well for a while, until I noticed these things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;This cookbook is being deprecated, and replaced by &lt;a href="https://github.com/poise/poise-python"&gt;poise-python&lt;/a&gt;, meaning some day the Python cookbook will be a wrapper around poise-python.&lt;/li&gt;
&lt;li&gt;Even today, when …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;h3&gt;What's wrong with the current Python cookbook&lt;/h3&gt;
&lt;p&gt;Until now, we were using the &lt;a href="https://github.com/poise/python"&gt;Python cookbook&lt;/a&gt;. This worked well for a while, until I noticed these things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;This cookbook is being deprecated, and replaced by &lt;a href="https://github.com/poise/poise-python"&gt;poise-python&lt;/a&gt;, meaning some day the Python cookbook will be a wrapper around poise-python.&lt;/li&gt;
&lt;li&gt;Even today, when the poise-python cookbook is used in a Chef-run, it's taking over the Python cookbook's resources&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;What's wrong with the Poise-Python cookbook&lt;/h3&gt;
&lt;p&gt;This new cookbook is way too magical for me.&lt;br&gt;
I'm not in the habit of criticising other people's work, and I'm sure CodeRanger knows what he's doing, but I find the following facts disturbing:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;All of the cookbook logic is stored inside &lt;code&gt;lib/&lt;/code&gt;, and processed using &lt;a href="https://github.com/poise/halite"&gt;halite&lt;/a&gt;&lt;br&gt;
    This means the division of recipes/resources/helpers is unclear and you have to "hunt" for the file containing the resource you want to troubleshoot.&lt;/li&gt;
&lt;li&gt;The resources use inheritance for state and logic&lt;br&gt;
    After you found the proper file for your resource, you might need to search other files for methods that are part of the flow you're troubleshooting.&lt;/li&gt;
&lt;li&gt;Some of the inheritance extends to other cookbooks, like &lt;a href="https://github.com/poise/poise-languages"&gt;poise-languages&lt;/a&gt; and &lt;a href="https://github.com/poise/poise"&gt;poise&lt;/a&gt;.&lt;br&gt;
    This is even more annoying because you now have multiple libraries/artifact to troubleshoot (so more lines in your Berksfile, more repos to clone etc), and it's unclear which logic arives from where.  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Some of the methods used are "magical"&lt;br&gt;
    By "magical" I mean methods that aren't defined in the normal way:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;methodname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="c1"&gt;# Logic here&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Instead, they are created by using &lt;a href="http://apidock.com/ruby/Module/define_method"&gt;define_method&lt;/a&gt; or &lt;a href="http://ruby-doc.org/core-2.1.0/BasicObject.html#method-i-method_missing"&gt;method_missing&lt;/a&gt;, and can't be easily found in the files.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Some resources automatically backreference other resources.&lt;br&gt;
    I'm talking about this usage pattern:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;python_runtime&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;python_virtualenv&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/opt/myapp/.env&amp;#39;&lt;/span&gt; &lt;span class="c1"&gt;# Uses the `python_runtime` defined above automatically&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is done by looking at the resource collection and looking for the last item matching some definition (as far as I could understand).&lt;br&gt;
While this might seem neat, in order for this method to work you have to reorder your code to match the "proper" way. For instance, you can't separate the runtime and the venv to diffent recipes, because then some other runtime (even from a different cookbook) might be declared and be the one discovered by the virtualenv resource.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;All of these facts, in addition to missing documentation, add up to make the cookbook code really difficult to understand or troubleshoot.&lt;br&gt;
On one hand, the reosurces included in this cookbook should be pretty simple. For instance, the package resource should install a python package (a single command), only if it's not already installed (another command).&lt;br&gt;
On the other hand, I wrestled with thie Poise-Python cookbook for 3 days and still couldn't get it to do what the original Python cookbook did. It might be because I have a unique use case (custom-compiled Python), but it's still furstrating.&lt;/p&gt;
&lt;h3&gt;Enter &lt;a href="https://supermarket.chef.io/cookbooks/backslasher-python"&gt;backslasher-python&lt;/a&gt; (&lt;a href="https://github.com/BackSlasher/chef-backslasher-python"&gt;source&lt;/a&gt;)&lt;/h3&gt;
&lt;p&gt;Eventually, I chose to re-implement the Python cookbook by myself.&lt;br&gt;
I made sure to choose a different namespace for the resources (&lt;code&gt;backslasher_python_*&lt;/code&gt;), so it won't interfere with the existing usage of the Python cookbook (external cookbooks etc).&lt;br&gt;
The new cookbook is written as plainly as possible. &lt;del&gt;Its only vice is using the new custom resource syntax&lt;/del&gt; (Edit: Moved back to old syntax. &lt;code&gt;comapt_resource&lt;/code&gt; breaks so easily).&lt;/p&gt;
&lt;p&gt;For instance, this is the entire &lt;code&gt;backslasher_python_virtualenv&lt;/code&gt; definition (34 lines of code):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;property&lt;/span&gt; &lt;span class="ss"&gt;:path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;name_attribute&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
&lt;span class="n"&gt;property&lt;/span&gt; &lt;span class="ss"&gt;:interpreter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;
&lt;span class="n"&gt;property&lt;/span&gt; &lt;span class="ss"&gt;:owner&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;regex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;Chef&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Config&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:user_valid_regex&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;property&lt;/span&gt; &lt;span class="ss"&gt;:group&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;regex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;Chef&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Config&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:group_valid_regex&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;property&lt;/span&gt; &lt;span class="ss"&gt;:options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt; &lt;span class="c1"&gt;# Additional options for venv initialization&lt;/span&gt;

&lt;span class="n"&gt;default_action&lt;/span&gt; &lt;span class="ss"&gt;:create&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;exists?&lt;/span&gt;
  &lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exist?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;directory?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;\&lt;/span&gt;
    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/bin/activate&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="ss"&gt;:create&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;nr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="c1"&gt;# me as new_resource&lt;/span&gt;
  &lt;span class="n"&gt;directory&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="n"&gt;nr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;owner&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;nr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;owner&lt;/span&gt;
    &lt;span class="n"&gt;group&lt;/span&gt; &lt;span class="n"&gt;nr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;nr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="n"&gt;execute&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;virtualenv &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;--python=&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;interpreter&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;interpreter&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="n"&gt;nr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;owner&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;nr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;owner&lt;/span&gt;
    &lt;span class="n"&gt;group&lt;/span&gt; &lt;span class="n"&gt;nr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;nr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;
    &lt;span class="n"&gt;environment&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;HOME&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Dir&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;nr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;owner&lt;/span&gt;

    &lt;span class="n"&gt;not_if&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;nr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists?&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="ss"&gt;:delete&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;directory&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="ss"&gt;:delete&lt;/span&gt;
    &lt;span class="n"&gt;recursive&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This code is not dependent on any external code (except for the Chef core logic), and is pretty easy to read.&lt;br&gt;
Compare it to the &lt;a href="https://github.com/poise/poise-python/blob/master/lib/poise_python/resources/python_virtualenv.rb"&gt;Poise-Python implementation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Personally, I've successfully replaced the Python cookbook with my Backslasher-Python cookbook in all of my internal uses and consider it a success. I'm curious to see what will happen in public cookbooks.&lt;/p&gt;</content><category term="FOSS"></category><category term="Ruby"></category><category term="Python"></category><category term="Chef"></category></entry><entry><title>Chef Custom Resources - Missing Documentation</title><link href="https://blog.backslasher.net/chef-custom-resources.html" rel="alternate"></link><published>2016-01-25T16:00:00+01:00</published><updated>2016-01-25T16:00:00+01:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2016-01-25:/chef-custom-resources.html</id><summary type="html">&lt;p&gt;The new Chef documentation for &lt;a href="https://docs.chef.io/custom_resources.html"&gt;Custom Resources&lt;/a&gt; is pretty lackluster.&lt;br&gt;
This is probably because they're too busy making awesome stuff, but I still needed to learn some stuff the hard way.&lt;br&gt;
Thought I'd share them.  &lt;/p&gt;
&lt;h3&gt;The basics&lt;/h3&gt;
&lt;p&gt;There is no longer a "state-only" resource and an implementing provider. Instead, there …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The new Chef documentation for &lt;a href="https://docs.chef.io/custom_resources.html"&gt;Custom Resources&lt;/a&gt; is pretty lackluster.&lt;br&gt;
This is probably because they're too busy making awesome stuff, but I still needed to learn some stuff the hard way.&lt;br&gt;
Thought I'd share them.  &lt;/p&gt;
&lt;h3&gt;The basics&lt;/h3&gt;
&lt;p&gt;There is no longer a "state-only" resource and an implementing provider. Instead, there is a single "resource" that contains both state and behaviour.&lt;br&gt;
A lot of terminology has been modified, partially to differentiate the new "custom resource" from the old "lightweight resource-provider" (LWRP) class.&lt;br&gt;
&lt;code&gt;attribute&lt;/code&gt; is now &lt;code&gt;property&lt;/code&gt; and the syntax is slightly different, but this is documented.&lt;br&gt;
If you want to use the "custom resource" paradigm on clients lower than Chef 12.5, you could depend on the 'compat_resource' cookbook and it'll work.&lt;/p&gt;
&lt;h3&gt;Actions are in the resource's context&lt;/h3&gt;
&lt;p&gt;Actions are part of the resource (and not the provider), so &lt;code&gt;self&lt;/code&gt; inside the action context refers to the resource.&lt;br&gt;
This means that this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# The LWRP way - Will not work in custom resources&lt;/span&gt;
&lt;span class="c1"&gt;# Resource&lt;/span&gt;
&lt;span class="n"&gt;attribute&lt;/span&gt; &lt;span class="ss"&gt;:path&lt;/span&gt;

&lt;span class="c1"&gt;# Provider&lt;/span&gt;
&lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="ss"&gt;:bla&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Path is &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;new_resource&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;One should use this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;property&lt;/span&gt; &lt;span class="ss"&gt;:path&lt;/span&gt;
&lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="ss"&gt;:bla&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Path is &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;load_current_value&lt;/h3&gt;
&lt;p&gt;This is a new way for generating the "existing" resource (to see if you need to do anything).&lt;br&gt;
You define a code block, using something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;load_current_value&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="c1"&gt;# DETECTION LOGIC HERE&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This code is promoted into a method:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# lib/chef/resource.rb L1135&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;load_current_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;load_block&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;define_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:load_current_value!&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;load_block&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And called by Chef (more details below):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# lib/chef/resource/action_class.rb L31&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;load_current_resource&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;new_resource&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;respond_to?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:load_current_value!&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# dup the resource and then reset desired-state properties.&lt;/span&gt;
    &lt;span class="n"&gt;current_resource&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new_resource&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dup&lt;/span&gt;

    &lt;span class="c1"&gt;# We clear desired state in the copy, because it is supposed to be actual state.&lt;/span&gt;
    &lt;span class="c1"&gt;# We keep identity properties and non-desired-state, which are assumed to be&lt;/span&gt;
    &lt;span class="c1"&gt;# &amp;quot;control&amp;quot; values like `recurse: true`&lt;/span&gt;
    &lt;span class="n"&gt;current_resource&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;property&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;property&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;desired_state?&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;property&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;identity?&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;property&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name_property?&lt;/span&gt;
        &lt;span class="n"&gt;property&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_resource&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;# Call the actual load_current_value! method. If it raises&lt;/span&gt;
    &lt;span class="c1"&gt;# CurrentValueDoesNotExist, set current_resource to `nil`.&lt;/span&gt;
    &lt;span class="k"&gt;begin&lt;/span&gt;
      &lt;span class="c1"&gt;# If the user specifies load_current_value do |desired_resource|, we&lt;/span&gt;
      &lt;span class="c1"&gt;# pass in the desired resource as well as the current one.&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;current_resource&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:load_current_value!&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arity&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="n"&gt;current_resource&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load_current_value!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_resource&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="n"&gt;current_resource&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load_current_value!&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;rescue&lt;/span&gt; &lt;span class="no"&gt;Chef&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Exceptions&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;CurrentValueDoesNotExist&lt;/span&gt;
      &lt;span class="n"&gt;current_resource&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="vi"&gt;@current_resource&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;current_resource&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This method:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Clones the resource&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Resets all fields that aren't:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Non "desired state" (&lt;code&gt;desired_state:false&lt;/code&gt;), meaning they describe the way to operate rather than a property of the resource&lt;/li&gt;
&lt;li&gt;"Identity" properties (&lt;code&gt;identity: true&lt;/code&gt;), meaning they help locate the resource&lt;/li&gt;
&lt;li&gt;"Name" properties (&lt;code&gt;name_property: true&lt;/code&gt;), meaning they default to the resource's name (like &lt;code&gt;path&lt;/code&gt; in the &lt;code&gt;directory&lt;/code&gt; resource) so it doesn't make sense to initialize them to another value&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Brackets contain the decorator used to mark an attribute that way.&lt;br&gt;
All other fields are cleared so that the detection code can populate them with "current" values.&lt;br&gt;
One could read &lt;code&gt;lib/chef/property.rb&lt;/code&gt; to see some of the attribute decorators and their documentation.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Executes the provided code block in the current resource's context (now defined as &lt;code&gt;load_current_value!&lt;/code&gt;).&lt;br&gt;
    If this block accepts any arguments, pass it the resource provided by the user.&lt;br&gt;
    This block is run in the "current" resource's context.&lt;br&gt;
    If it throws a &lt;code&gt;CurrentValueDoesNotExist&lt;/code&gt; exception (done by calling &lt;code&gt;current_value_does_not_exist!&lt;/code&gt;), the discovery process is aborted and there is no "current" resource.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So in short:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You're supplying a code block to discover the current state of the resource&lt;/li&gt;
&lt;li&gt;This block is executed in the context of the "current" resoruce&lt;/li&gt;
&lt;li&gt;It starts with the Identity/Name/Non-desired-state properties initialized to the value in the "desired" state of the resource&lt;/li&gt;
&lt;li&gt;It's up to this block to either populate the remaining fields with the current value, or call &lt;code&gt;current_value_does_not_exist!&lt;/code&gt; if the resource has no current state (e.g. a package that isn't currently installed)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;current_value instead of current_resource&lt;/h3&gt;
&lt;p&gt;Because of the &lt;code&gt;resource -&amp;gt; value&lt;/code&gt; terminology changes, the current state of the resource is now accessed by &lt;code&gt;current_value&lt;/code&gt; instead of &lt;code&gt;current_resource&lt;/code&gt; like in the past.&lt;br&gt;
This object can be &lt;code&gt;nil&lt;/code&gt; (if there is no current state for the resource) or a copy of this resource, populated with values from the &lt;code&gt;load_current_value&lt;/code&gt; block&lt;/p&gt;</content><category term="FOSS"></category><category term="Ruby"></category><category term="Chef"></category><category term="Scripts"></category></entry><entry><title>Parsing AWS billing</title><link href="https://blog.backslasher.net/aws-billing.html" rel="alternate"></link><published>2016-01-23T12:00:00+01:00</published><updated>2016-01-23T12:00:00+01:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2016-01-23:/aws-billing.html</id><summary type="html">&lt;h2&gt;The Story&lt;/h2&gt;
&lt;p&gt;I never understood the AWS billing very well and happily left it to my CTO.&lt;br&gt;
A couple of days ago, however, my CTO secretly told me he's mainly interested in learning 2 things from those bills:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;How much are we paying for every component of the application?&lt;/li&gt;
&lt;li&gt;How …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;h2&gt;The Story&lt;/h2&gt;
&lt;p&gt;I never understood the AWS billing very well and happily left it to my CTO.&lt;br&gt;
A couple of days ago, however, my CTO secretly told me he's mainly interested in learning 2 things from those bills:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;How much are we paying for every component of the application?&lt;/li&gt;
&lt;li&gt;How much are we paying for every type of AWS service?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;With that knowledge came the task of helping him extract that information from the billing statements.&lt;br&gt;
Being a strong believer in self-service, I crafted some scripts to generate a CSV to answer both questions (and possible intersections, which are also interesting).&lt;/p&gt;
&lt;h2&gt;Some prepwork&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Make sure your different AWS resources (EC2 VMs, S3 buckets, CloudFront distributions...) are tagged with the same tag, describing their "applicative" component (e.g. &lt;code&gt;Component: FrontEnd-PHP&lt;/code&gt;). This tag will help us aggregate the lines in the detailed AWS billing reports (see below)&lt;/li&gt;
&lt;li&gt;Include this tag under &lt;a href="https://console.aws.amazon.com/billing/home?region=us-east-1#/preferences/tags"&gt;"Cost Allocation Tags"&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Using the &lt;a href="https://console.aws.amazon.com/billing/home?region=us-east-1#/preferences"&gt;preferences page&lt;/a&gt;, set up a bucket and enable "Cost allocation report" (contains billing with our selected tags) and "Detailed billing report" (contains billing per resource). We'll use these reports as our data source&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Pivoting&lt;/h2&gt;
&lt;h3&gt;Abstract&lt;/h3&gt;
&lt;p&gt;If you take a look at the "Cost allocation report" (&lt;code&gt;aaaaaaaaaaaa-aws-cost-allocation-yyyy-mm.csv&lt;/code&gt;), you'll find these columns that are of interest:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;"user:TAGNAME", correlating with the tag we chose earlier (e.g. &lt;code&gt;user:Component&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;"UsageType", succinctly describing the type of usage (e.g. "EU-SAE1-AWS-In-Bytes")&lt;/li&gt;
&lt;li&gt;"TotalCost", containing the cost (in USD for me) of that usage of that resource&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Pivot_table"&gt;Pivoting&lt;/a&gt; these columns should give me a matrix I can pass the executives. I chose this form:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;| \              | UsageType     |
| user:Component | sum:TotalCost |
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So the columns will be the different usage types, the rows will be the different components, and the values will be the cost of this specific combination (the "sum" is just a formality, since every combination should appear only once).&lt;/p&gt;
&lt;h3&gt;Scripting&lt;/h3&gt;
&lt;p&gt;One can do that pivot manually (using LibreOffice Calc / Microsoft Excel, for instance), but I like scripts.&lt;br&gt;
I chose to use the Pandas library in Python because it's built for stuff like this (I believe a vanilla Python solution is possible but will take more time).&lt;br&gt;
This is a basic script for pivoting our data:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt;
&lt;span class="n"&gt;tag_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user:Component&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;raw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pandas&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;COST_ALOCATION.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;skiprows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# First row is some warning about tags not included by default&lt;/span&gt;
&lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;UsageType&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fillna&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;???&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;inplace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;tag_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fillna&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;???&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;inplace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;pivot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pivot_table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;tag_name&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;cols&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;UsageType&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;TotalCost&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;aggfunc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;margins&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# for newer versions of pandas: raw.pivot_table(index=[tag_name], columns=[&amp;#39;UsageType&amp;#39;], values=[&amp;#39;TotalCost&amp;#39;], aggfunc=numpy.sum, margins=True)&lt;/span&gt;
&lt;span class="n"&gt;pivot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;OUT_FILE.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;Things to note&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;I'm using &lt;code&gt;fillna&lt;/code&gt; to replace "empty" items in selected columns (e.g. lines with the component tag empty) with "???". This is important as Pandas discards such rows, but still includes them for its subtotals&lt;/li&gt;
&lt;li&gt;Using &lt;code&gt;numpy.sum&lt;/code&gt; is somehow better than using &lt;code&gt;sum&lt;/code&gt; as an aggregator. If I don't use it, I don't get a grand total&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Drilldown&lt;/h2&gt;
&lt;p&gt;Say you have a cell that costs you more than you think is proper (for instance, "queue-manager"/"EU-SAE1-AWS-In-Bytes") and you want to analyze it.&lt;br&gt;
The "Detailed billing report with resources and tags" (&lt;code&gt;aaaaaaaaaaaa-aws-billing-detailed-line-items-with-resources-and-tags-yyyy-mm.csv.zip&lt;/code&gt;), which is also located in our billing bucket (although zipped) contains the billing at an item-level detail, along with our tags.&lt;br&gt;
You can try analyzing this report manually (e.g. using Excel), but since it's a huge file it will take some time.&lt;br&gt;
Using the same library, this is how we extract the values for a specific pivot cell (Component/Usage combination):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt;
&lt;span class="n"&gt;tag_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user:Component&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;tag_value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ExpensiveComonent&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;usage_value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ExpensiveUsage&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;raw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pandas&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;DETAILED.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;filtered&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;tag_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;tag_value&lt;/span&gt;&lt;span class="p"&gt;][[&lt;/span&gt;&lt;span class="n"&gt;tag_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ResourceId&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;UsageType&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Cost&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;

&lt;span class="c1"&gt;# Optionally filter by non-zero costs&lt;/span&gt;
&lt;span class="n"&gt;filtered&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filtered&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;filtered&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Cost&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;filtered&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;OUT_FILE.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Other sugggestions&lt;/h2&gt;
&lt;p&gt;These are some other reports I did that might be interesting&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Pivot by resource id / usage type in a specific component:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt;
&lt;span class="n"&gt;tag_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user:Component&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;tag_value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ExpensiveComonent&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;raw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pandas&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;DETAILED.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;filtered&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;tag_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;tag_value&lt;/span&gt;&lt;span class="p"&gt;][[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ResourceId&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;UsageType&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Cost&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;span class="n"&gt;filtered&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ResourceId&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fillna&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;???&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;inplace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;pivot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filtered&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pivot_table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ResourceId&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;cols&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;UsageType&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Cost&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;aggfunc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;margins&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Newer pandas - see above&lt;/span&gt;
&lt;span class="n"&gt;pivot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;OUT_FILE.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pivot component/usage type, use regex to select usage type, only show cells that cost money, and show Usage amount instead of cost&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt;
&lt;span class="n"&gt;tag_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user:Component&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;usage_regex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.*-Out-Bytes$&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;raw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pandas&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;COST_ALOCATION.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;skiprows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;raw_nonna&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dropna&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;UsageType&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;# Drop lines without usage type&lt;/span&gt;
&lt;span class="n"&gt;filtered&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;raw_nonna&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;raw_nonna&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;UsageType&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;usage_regex&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="n"&gt;filtered&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;tag_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fillna&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;???&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;inplace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;filtered&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filtered&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;filtered&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Cost&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;pivot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filtered&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pivot_table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;tag_name&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;cols&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;UsageType&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Rate&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;UsageQuantity&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;aggfunc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;margins&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#TODO complete&lt;/span&gt;
&lt;span class="n"&gt;pivot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;OUT_FILE.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;/ul&gt;</content><category term="FOSS"></category><category term="AWS"></category><category term="Billing"></category><category term="Scripts"></category><category term="Python"></category></entry><entry><title>Managing Jenkins API Tokens</title><link href="https://blog.backslasher.net/jenkins-token.html" rel="alternate"></link><published>2015-12-31T00:00:00+01:00</published><updated>2015-12-31T00:00:00+01:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2015-12-31:/jenkins-token.html</id><summary type="html">&lt;h2&gt;The problem&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://wiki.jenkins-ci.org/display/JENKINS/Authenticating+scripted+clients"&gt;Api Tokens&lt;/a&gt; are like user passwords, except they are always managed by Jenkins (even if you're using an external authentication scheme), and can only be used for "API" actions (e.g. using &lt;code&gt;curl&lt;/code&gt;).&lt;br&gt;
The storage scheme of these tokens is a little weird - the stored value is hashed …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;The problem&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://wiki.jenkins-ci.org/display/JENKINS/Authenticating+scripted+clients"&gt;Api Tokens&lt;/a&gt; are like user passwords, except they are always managed by Jenkins (even if you're using an external authentication scheme), and can only be used for "API" actions (e.g. using &lt;code&gt;curl&lt;/code&gt;).&lt;br&gt;
The storage scheme of these tokens is a little weird - the stored value is hashed and then compared to the user-submitted input (usually the process goes the other way around):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// https://github.com/jenkinsci/jenkins/blob/master/core/src/main/java/jenkins/security/ApiTokenProperty.java#L111&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;matchesPassword&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;  &lt;span class="nf"&gt;getApiTokenInsecure&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;!-- --&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// https://github.com/jenkinsci/jenkins/blob/master/core/src/main/java/jenkins/security/ApiTokenProperty.java#L99&lt;/span&gt;
&lt;span class="nd"&gt;@Nonnull&lt;/span&gt;
&lt;span class="nd"&gt;@Restricted&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NoExternalUse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="cm"&gt;/*package*/&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;getApiTokenInsecure&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;apiToken&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getPlainText&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getDigestOf&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Jenkins&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getInstance&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;getSecretKey&lt;/span&gt;&lt;span class="o"&gt;()+&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;:&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getId&lt;/span&gt;&lt;span class="o"&gt;())))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// if the current token is the initial value created by pre SECURITY-49 Jenkins, we can&amp;#39;t use that.&lt;/span&gt;
        &lt;span class="c1"&gt;// force using the newer value&lt;/span&gt;
        &lt;span class="n"&gt;apiToken&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Secret&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;fromString&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;API_KEY_SEED&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;mac&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getId&lt;/span&gt;&lt;span class="o"&gt;()));&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getDigestOf&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The implication of this is that in order to modify the API token, it's not enough to know the token, but rather the "seed" used to calculate it. One could say that the UI/API doesn't offer a way to set the token directly anyway (only to &lt;a href="https://github.com/jenkinsci/jenkins/blob/master/core/src/main/java/jenkins/security/ApiTokenProperty.java#L148"&gt;generate a random one&lt;/a&gt;), but I still don't see the logic behind this.&lt;br&gt;
Because of the storage scheme, the normal "ensure password is XYZ" action one would expect is split into 2 actions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Calculate the token from the current seed and compare it to our required token, and if there's a mismatch, get angry (provided the required token)&lt;/li&gt;
&lt;li&gt;Compare the seed to our required seed, and modify it if it mismatches (provided the required seed)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I don't want my clients to depend on the hashing method done by Jenkins, so I have to present them with the token.&lt;br&gt;
I also want to be able to reset the token if it diverges (rather than throw a tantrum), so I have to keep the seed.
So sadly I have to keep both.  &lt;/p&gt;
&lt;h2&gt;The solution&lt;/h2&gt;
&lt;p&gt;I created this Groovy script to do both tasks (modify the seed if needed, and ensure it matches the token):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;???&amp;#39;&lt;/span&gt;
&lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;???&amp;#39;&lt;/span&gt;
&lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;seed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;???&amp;#39;&lt;/span&gt; &lt;span class="c1"&gt;// Leave null if unkown&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;hudson.model.User&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;jenkins.security.ApiTokenProperty&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;hudson.util.Secret&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Get the actual token&lt;/span&gt;
&lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;tokprop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getProperty&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ApiTokenProperty&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;actual_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tok&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getApiTokenInsecure&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;// Get pissed if not equal&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;actual_token&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// Try to modify seed&lt;/span&gt;
    &lt;span class="n"&gt;tokprop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;apiToken&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Secret&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;fromString&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;// Check that seed will yield required token&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;tokprop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getApiTokenInsecure&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt;
      &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;save&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Exception&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sprintf&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Token mismatch, seed wont cause token to become required token\\ncurrent key:%s\\nresulting key:%s&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,[&lt;/span&gt;&lt;span class="n"&gt;actual_token&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tokprop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getApiTokenInsecure&lt;/span&gt;&lt;span class="o"&gt;()]))&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="c1"&gt;// Can&amp;#39;t set a better token, just complain&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Exception&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sprintf&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Mismatching tokens. Actual token:%s&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;actual_token&lt;/span&gt;&lt;span class="o"&gt;]))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I actually implemented this as a LWRP in Chef using the &lt;code&gt;jenkins_script&lt;/code&gt; resource found in the &lt;a href="https://github.com/chef-cookbooks/jenkins"&gt;Jenkins cookbook&lt;/a&gt;. If the implementation is interesting, leave me a comment and I might add it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update 20.02.16&lt;/strong&gt;: Here is my current implementation&lt;/p&gt;
&lt;h3&gt;Chef implementation&lt;/h3&gt;
&lt;p&gt;resources/jenkins_key:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;actions&lt;/span&gt; &lt;span class="ss"&gt;:set&lt;/span&gt;
&lt;span class="n"&gt;default_action&lt;/span&gt; &lt;span class="ss"&gt;:set&lt;/span&gt;

&lt;span class="n"&gt;attribute&lt;/span&gt; &lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;kind_of&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;name_attribute&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
&lt;span class="n"&gt;attribute&lt;/span&gt; &lt;span class="ss"&gt;:key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;kind_of&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt; &lt;span class="c1"&gt;# We can&amp;#39;t set this, only verify it matches&lt;/span&gt;
                                               &lt;span class="c1"&gt;# This is because the actual key is being realtime-hashed from some string&lt;/span&gt;
&lt;span class="n"&gt;attribute&lt;/span&gt; &lt;span class="ss"&gt;:raw_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;kind_of&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt; &lt;span class="c1"&gt;# Used to allow setting the new key&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;providers/jenkins_key:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;use_inline_resources&lt;/span&gt;

&lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="ss"&gt;:set&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;

  &lt;span class="n"&gt;jenkins_script&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ensure_key&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;-&lt;/span&gt;&lt;span class="dl"&gt;EOH&lt;/span&gt;
&lt;span class="sh"&gt;    def username = &amp;#39;#{new_resource.user}&amp;#39;&lt;/span&gt;
&lt;span class="sh"&gt;    def wanted_key = &amp;#39;#{new_resource.key}&amp;#39;&lt;/span&gt;
&lt;span class="sh"&gt;    def raw_key = &amp;#39;#{new_resource.raw_key.to_s}&amp;#39;&lt;/span&gt;

&lt;span class="sh"&gt;    import hudson.model.User;&lt;/span&gt;
&lt;span class="sh"&gt;    import jenkins.security.ApiTokenProperty;&lt;/span&gt;
&lt;span class="sh"&gt;    import hudson.util.Secret;&lt;/span&gt;

&lt;span class="sh"&gt;    // Get the actual key&lt;/span&gt;
&lt;span class="sh"&gt;    u = User.get(username)&lt;/span&gt;
&lt;span class="sh"&gt;    tok =  u.getProperty(ApiTokenProperty.class)&lt;/span&gt;
&lt;span class="sh"&gt;    actual_key = tok.getApiTokenInsecure()&lt;/span&gt;

&lt;span class="sh"&gt;    // Get pissed if not equal&lt;/span&gt;
&lt;span class="sh"&gt;    if (wanted_key != actual_key)&lt;/span&gt;
&lt;span class="sh"&gt;      if (raw_key) {&lt;/span&gt;
&lt;span class="sh"&gt;        old_key = tok.getApiTokenInsecure()&lt;/span&gt;
&lt;span class="sh"&gt;        tok.apiToken = Secret.fromString(raw_key)&lt;/span&gt;
&lt;span class="sh"&gt;        // Check that raw key will yield required key&lt;/span&gt;
&lt;span class="sh"&gt;        if (wanted_key == tok.getApiTokenInsecure())&lt;/span&gt;
&lt;span class="sh"&gt;          u.save()&lt;/span&gt;
&lt;span class="sh"&gt;        else&lt;/span&gt;
&lt;span class="sh"&gt;          throw new Exception(sprintf(&amp;#39;Key mismatch, raw_key wont cause wanted_key to become actualy key\\ncurrent key:%s\\nresulting key:%s&amp;#39;,[actual_key, tok.getApiTokenInsecure()]))&lt;/span&gt;
&lt;span class="sh"&gt;      }&lt;/span&gt;
&lt;span class="sh"&gt;      else&lt;/span&gt;
&lt;span class="sh"&gt;        // Can&amp;#39;t set a better key, just complain&lt;/span&gt;
&lt;span class="sh"&gt;        throw new Exception(sprintf(&amp;#39;Mismatching keys. Actual key:%s&amp;#39;, [actual_key]))&lt;/span&gt;
&lt;span class="dl"&gt;    EOH&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="FOSS"></category><category term="Jenkins"></category><category term="Security"></category><category term="Scripts"></category><category term="Groovy"></category></entry><entry><title>Open-Gridview - the FOSS Out-Gridview</title><link href="https://blog.backslasher.net/open-gridview.html" rel="alternate"></link><published>2015-12-13T00:00:00+01:00</published><updated>2015-12-13T00:00:00+01:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2015-12-13:/open-gridview.html</id><summary type="html">&lt;h2&gt;The Story&lt;/h2&gt;
&lt;p&gt;I've been a Microsoft SysAdmin for a long time before switching for Linux. During which, I scripted a lot in PowerShell.&lt;br&gt;
PowerShell has several "output" functions like &lt;code&gt;Out-File&lt;/code&gt; (which passes the input to a file), &lt;code&gt;Out-Null&lt;/code&gt; etc.&lt;br&gt;
One of these functions was &lt;a href="https://technet.microsoft.com/en-us/library/hh849920.aspx"&gt;Out-Gridview&lt;/a&gt; which tabularizes its input and …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;The Story&lt;/h2&gt;
&lt;p&gt;I've been a Microsoft SysAdmin for a long time before switching for Linux. During which, I scripted a lot in PowerShell.&lt;br&gt;
PowerShell has several "output" functions like &lt;code&gt;Out-File&lt;/code&gt; (which passes the input to a file), &lt;code&gt;Out-Null&lt;/code&gt; etc.&lt;br&gt;
One of these functions was &lt;a href="https://technet.microsoft.com/en-us/library/hh849920.aspx"&gt;Out-Gridview&lt;/a&gt; which tabularizes its input and displays it in an interactive table:&lt;br&gt;
&lt;img alt="out-gridview" src="https://blog.backslasher.net/images/open-gridview/out-gridview.jpg"&gt;&lt;br&gt;
You can see how easy it is to tabulate your objects.  &lt;/p&gt;
&lt;p&gt;The advantage might be hard to explain to hardcore *nix CLI users - they might scoff and say that you can filter using &lt;code&gt;grep&lt;/code&gt;, sort using &lt;code&gt;sort&lt;/code&gt; and extract columns using &lt;code&gt;awk&lt;/code&gt;, and that all output is beautiful in its own way.&lt;br&gt;
However, since switching to Linux I've had numerous incidents of either trying to format my output so that it is both readable and parsable, or piping output to some filter and regret filtering it. How I missed being able to pass the output to &lt;code&gt;Out-Gridview&lt;/code&gt; and being able to manipulate it via GUI.&lt;/p&gt;
&lt;h2&gt;The Solution&lt;/h2&gt;
&lt;p&gt;I've decided that Out-Gridview is a basic enough problem so I can tackle it, and also writing UI is fun (as if), so I implemented it via GTK and Python.&lt;br&gt;
The result is the package &lt;a href="https://pypi.python.org/pypi/opengridview"&gt;opengridview&lt;/a&gt;.  &lt;/p&gt;
&lt;h3&gt;Installation&lt;/h3&gt;
&lt;p&gt;For regular usage, use the pip package:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo pip install opengridview
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For modification and hacking, set up a venv in the git repo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git clone https://github.com/BackSlasher/opengridview .
virtualenv . --system-site-packages
. bin/activate
pip install -e .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Basic usage&lt;/h3&gt;
&lt;p&gt;To use it, pipe your output into &lt;code&gt;ogv&lt;/code&gt; (or &lt;code&gt;open-gridview&lt;/code&gt;), optionally specifying how to parse each row (the default is "autosplit") and how the columns are named (usually the first row is taken as a header row).&lt;br&gt;
&lt;code&gt;ogv&lt;/code&gt; can accept regular files, but it's more interesting to pipe streams into it.&lt;br&gt;
Multiple files can be passed (causing multiple windows to appear) by using bash's &lt;a href="http://tldp.org/LDP/abs/html/process-sub.html"&gt;process substitution&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ogv &amp;lt;&lt;span class="o"&gt;(&lt;/span&gt;ls -l /home/bob &lt;span class="p"&gt;|&lt;/span&gt; tail -n+2&lt;span class="o"&gt;)&lt;/span&gt; &amp;lt;&lt;span class="o"&gt;(&lt;/span&gt;ls -l /var &lt;span class="p"&gt;|&lt;/span&gt; tail -n+2&lt;span class="o"&gt;)&lt;/span&gt; --headers permissions,links,user,group,size,mod-month,mod-day,mod-time,name
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Parsers&lt;/h3&gt;
&lt;h4&gt;autosplit&lt;/h4&gt;
&lt;p&gt;Emulates perl's &lt;code&gt;autosplit&lt;/code&gt;, using &lt;code&gt;re.split&lt;/code&gt; and a delimiter (defaults to &lt;code&gt;\s+&lt;/code&gt;)&lt;/p&gt;
&lt;h4&gt;csv&lt;/h4&gt;
&lt;p&gt;Uses the &lt;code&gt;csv&lt;/code&gt; module to prase every line. Configurable delimeter (defaults to &lt;code&gt;,&lt;/code&gt;)&lt;/p&gt;
&lt;h4&gt;line_json&lt;/h4&gt;
&lt;p&gt;Treats each line as a separate JSON object&lt;/p&gt;
&lt;h3&gt;Neat features&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The autosplit parser uses &lt;code&gt;re.split&lt;/code&gt; to create the columns. This method honors capturing groups inside the separator, meaning you can use the separator as a Regex parser, and discard the "split" columns using empty column headers, like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip list &lt;span class="p"&gt;|&lt;/span&gt; ogv -s &lt;span class="s1"&gt;&amp;#39;^([^ ]*) \(([^ ]*)\)$&amp;#39;&lt;/span&gt; --headers ,name,version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(see below for screenshot of the result)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I implemented &lt;code&gt;Ctrl+c&lt;/code&gt; (inside the GUI) to copy selected rows as CSV text, in order to ease copying data into spreadsheet applications (a common action for me when handling tabulated data)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Example use cases&lt;/h2&gt;
&lt;h3&gt;Filesystem stuff&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ls -l &lt;span class="p"&gt;|&lt;/span&gt; tail -n+2 &lt;span class="p"&gt;|&lt;/span&gt; ogv --headers permissions,links,user,group,size,mod-month,mod-day,mod-time,name &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;
du -h &lt;span class="p"&gt;|&lt;/span&gt; ogv --separator &lt;span class="s1"&gt;&amp;#39;\t&amp;#39;&lt;/span&gt; --headers size,path &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;
&lt;span class="nb"&gt;wait&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt="" src="https://blog.backslasher.net/images/open-gridview/filesystem.png"&gt;&lt;/p&gt;
&lt;h3&gt;Show all packages installed&lt;/h3&gt;
&lt;p&gt;Preset the filter to "python"&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;aptitude search ~i --disable-columns -F &lt;span class="s1"&gt;&amp;#39;%p,%v,%t&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; ogv -p csv --headers name,version,source --filter python
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt="" src="https://blog.backslasher.net/images/open-gridview/aptitude.png"&gt;&lt;/p&gt;
&lt;h3&gt;Pip package list&lt;/h3&gt;
&lt;p&gt;Custom headers, column extraction using capturing groups&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip list &lt;span class="p"&gt;|&lt;/span&gt; ogv -s &lt;span class="s1"&gt;&amp;#39;^([^ ]*) \(([^ ]*)\)$&amp;#39;&lt;/span&gt; --headers ,name,version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt="" src="https://blog.backslasher.net/images/open-gridview/pip.png"&gt;&lt;/p&gt;
&lt;h3&gt;Multiple module search&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;(&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; platform name version
  pip list &lt;span class="p"&gt;|&lt;/span&gt; perl -ne &lt;span class="s1"&gt;&amp;#39;print &amp;quot;python $_&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  gem list &lt;span class="p"&gt;|&lt;/span&gt; grep &lt;span class="s1"&gt;&amp;#39;(&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; perl -ne &lt;span class="s1"&gt;&amp;#39;print &amp;quot;ruby $_&amp;quot;&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; ogv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt="" src="https://blog.backslasher.net/images/open-gridview/pip-gem.png"&gt;&lt;/p&gt;
&lt;h2&gt;Interesting bits&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;I chose to implement Open-Gridview on GTK because I'm running Gnome&lt;/li&gt;
&lt;li&gt;I chose Python (as opposed to Ruby / Perl) because Python comes preinstalled on most major Linux distros&lt;/li&gt;
&lt;li&gt;Since I chose &lt;a href="https://wiki.gnome.org/action/show/Projects/PyGObject?action=show&amp;amp;redirect=PyGObject"&gt;PyGObject&lt;/a&gt; as my GTK library, I'm annoyingly missing some features, like:&lt;ul&gt;
&lt;li&gt;Writing custom data to the clipboard&lt;/li&gt;
&lt;li&gt;Directly connecting functions to key shortcuts (I'm currently using menu items as a middleman)&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;Gtk.Application&lt;/code&gt; class forces "single-instance" applications on you (think firefox). Although there was &lt;a href="https://mail.gnome.org/archives/gtk-devel-list/2011-February/msg00091.html"&gt;some discussion&lt;/a&gt; about this decision, it seems mandated. I had to work around this by managing multiple &lt;code&gt;Gtk.Window&lt;/code&gt; instances by myself&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Some Python utilities (e.g. &lt;code&gt;csv.reader&lt;/code&gt;) use internal buffering when reading streams. This means that using them directly caused delay when parsing a live stream (and not a file). I'm currently reading one line at a time, then feeding it to a parser. This is also why all current parsers are line-based&lt;/li&gt;
&lt;li&gt;I found no easy/elegant way to interrupt streams while they were waiting for input. Eventually I found about "daemon threads", which are threads that don't justify keeping the process alive (if only daemon threads are left, the process is closed)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;TODOs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Add item selection functionality (like out-gridview's &lt;code&gt;OutputMode&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Support advanced filtering (e.g. regex, specific columns)&lt;/li&gt;
&lt;li&gt;Support hiding and re-ordering columns&lt;/li&gt;
&lt;li&gt;Add a progress bar if the stream isn't closed (EOFed)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Please let me know if you find this useful.&lt;/p&gt;</content><category term="FOSS"></category><category term="Python"></category><category term="PowerShell"></category><category term="Scripts"></category></entry><entry><title>Using a global lock in Chef</title><link href="https://blog.backslasher.net/chef-lock.html" rel="alternate"></link><published>2015-12-03T18:00:00+01:00</published><updated>2015-12-03T18:00:00+01:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2015-12-03:/chef-lock.html</id><summary type="html">&lt;h2&gt;The Story&lt;/h2&gt;
&lt;p&gt;Our dev team is currently using a &lt;a href="https://blog.twitter.com/2010/announcing-snowflake"&gt;Snowflake&lt;/a&gt;-like ID generation scheme that looks like this:&lt;br&gt;
&lt;img alt="snowflake diagram" src="https://blog.backslasher.net/images/chef-lock/snowflake.jpg"&gt;&lt;br&gt;
(Diagram by Elad Rosenhim, architect and companion at Dynamic Yield. See &lt;a href="https://www.dynamicyield.com/2015/05/apache-hbase-for-the-win-2/"&gt;his post&lt;/a&gt; about distributed keys and how to survive managing an HBase cluster)  &lt;/p&gt;
&lt;p&gt;Those familiar with MongoDB might notice this structure …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;The Story&lt;/h2&gt;
&lt;p&gt;Our dev team is currently using a &lt;a href="https://blog.twitter.com/2010/announcing-snowflake"&gt;Snowflake&lt;/a&gt;-like ID generation scheme that looks like this:&lt;br&gt;
&lt;img alt="snowflake diagram" src="https://blog.backslasher.net/images/chef-lock/snowflake.jpg"&gt;&lt;br&gt;
(Diagram by Elad Rosenhim, architect and companion at Dynamic Yield. See &lt;a href="https://www.dynamicyield.com/2015/05/apache-hbase-for-the-win-2/"&gt;his post&lt;/a&gt; about distributed keys and how to survive managing an HBase cluster)  &lt;/p&gt;
&lt;p&gt;Those familiar with MongoDB might notice this structure is very similar to &lt;a href="https://docs.mongodb.org/manual/reference/object-id/"&gt;MongoDB's ObjectId&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;This ID generator has several advantages over sequential generation, mainly:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Partitioning-friendly:&lt;br&gt;
    Because the most significant bits are rotated frequently, consecutive IDs will go to different partitions, avoiding a "hot-zone" problem.&lt;/li&gt;
&lt;li&gt;Independent generation:&lt;br&gt;
    Every machine can generate IDs by itself, meaning there's no single point of failure (as opposed to using MySQL sequences for ID generation)&lt;/li&gt;
&lt;li&gt;Packed metadata:&lt;br&gt;
    The key allows including 4 bytes of arbitrary metadata (e.g. user's country of origin), which can be later inferred from the key, in addition to the creation date. This metadata is "free" (not requiring an auxilary lookup).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;The problematic bit for me&lt;/strong&gt; is the need to assign a unique ID for every machine (to avoid machines creating duplicate keys).&lt;br&gt;
As you can see from the diagram, I have 2 bytes allocated for this, which might seem like a lot (255 different machines), but this is not enough space to just put unique machine identifiers I already have (like FQDN, SSH fingerprint, EC2 instance ID).&lt;br&gt;
I therefore needed to tell Chef to pick a machine ID that no other node has and use that.&lt;br&gt;
Naively one could do something like this in a Chef recipe:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;machine&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
  &lt;span class="n"&gt;range&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_a&lt;/span&gt; &lt;span class="c1"&gt;# Total range allowed&lt;/span&gt;
  &lt;span class="c1"&gt;# IDs in used, extracted using Chef search:&lt;/span&gt;
  &lt;span class="n"&gt;used_ids&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;machine_id:*&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="ss"&gt;filter_result&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;machine&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
    &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;available_ids&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;used_ids&lt;/span&gt; &lt;span class="c1"&gt;# Deduce remaining pool&lt;/span&gt;
  &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;No free ids&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;available_ids&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;any?&lt;/span&gt; &lt;span class="c1"&gt;# Upset if none&lt;/span&gt;
  &lt;span class="n"&gt;my_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;available_ids&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;
  &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normal&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;machine&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;my_id&lt;/span&gt; &lt;span class="c1"&gt;# save it&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;However&lt;/strong&gt;, several nodes could be running the same code at the same time, and since Chef offers no concurrency control, those nodes could get identical &lt;code&gt;available_ids&lt;/code&gt; and choose the same &lt;code&gt;my_id&lt;/code&gt;, leading to nodes with duplicate machine IDs, meaning they might create duplicate user IDs.&lt;/p&gt;
&lt;h2&gt;The solution&lt;/h2&gt;
&lt;p&gt;I initially thoguht about outsourcing the ID generation to a single-threaded HTTP application to eliminate any concurrency issues.&lt;br&gt;
However, this application would have to hold all of the assigned IDs (as opposed to them being stored in the Chef server), and I find stateful applications much harder to maintain (backups, scaling etc).&lt;br&gt;
Eventually, I thought about keeping the code inside a Chef recipe, but rely on an external service to ensure concurrency.&lt;br&gt;
I found the &lt;a href="https://github.com/thefab/restful-distributed-lock-manager"&gt;RDLM&lt;/a&gt; (Restful Distributed Lock Manager) which is a simple global lock holder, where locks are acquired and released via HTTP requests, which was perfect for me.  &lt;/p&gt;
&lt;p&gt;To utilize the RDLM in Chef recipes, I built the &lt;a href="https://github.com/BackSlasher/chef-lock_rdlm"&gt;lock_rdlm&lt;/a&gt; cookbook  which includes several interesting functions.&lt;br&gt;
The first is &lt;a href="https://github.com/BackSlasher/chef-lock_rdlm/#user-content-lockrdlmwith_lock"&gt;&lt;code&gt;LockRDLM::with_lock&lt;/code&gt;&lt;/a&gt;, which executes a code block as a critical section, using a specified lock name.&lt;br&gt;
One could use it to run a "critical" code section like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="no"&gt;LockRDLM&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;with_lock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lockname&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="c1"&gt;# Code here will be exclusive&lt;/span&gt;
  &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data_bag_item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;misc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;last_run&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;]=&lt;/span&gt;&lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;
  &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The second is &lt;a href="https://github.com/BackSlasher/chef-lock_rdlm/#user-content-lockrdlmassign_identity"&gt;&lt;code&gt;LockRDLM::assign_identity&lt;/code&gt;&lt;/a&gt;, which uses &lt;code&gt;with_lock&lt;/code&gt; to look for identities of other machines and choose a different one (out of a range) for the current node.&lt;br&gt;
It's using the &lt;code&gt;with_lock&lt;/code&gt; method internally, with the critical section doing the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Iterates over all of the nodes in the Chef server and collects their values&lt;/li&gt;
&lt;li&gt;Chooses a free value for its own use&lt;/li&gt;
&lt;li&gt;Saves the value in the node object (for the current run).  &lt;/li&gt;
&lt;li&gt;Loads this node's object from the server, saves the value and immediately saves it back.&lt;br&gt;
    This is done to ensure that the newly chosen value is present in the server upon leaving the critical section, and not in the run's end (when the Chef client updates the node object).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I use it to solve my use unique identity issue like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="no"&gt;LockRDLM&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;assign_identity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:machine&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;254&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# Now I can use node[&amp;#39;machine&amp;#39;][&amp;#39;id&amp;#39;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Interesting bits&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Because the identities are stored in Chef node attributes, they are cleaned up when node objects are removed. This is another benefit over having all of the ID assignment handled in a separate application.&lt;/li&gt;
&lt;li&gt;When creating the lock handling functions, I couldn't rely on the Chef HTTP methods because they don't return HTTP headers, which I needed. I had to fall back to &lt;code&gt;net/http&lt;/code&gt;, but it wasn't so bad.&lt;/li&gt;
&lt;li&gt;I found &lt;a href="https://github.com/websterclay/chef-dominodes"&gt;Dominodes&lt;/a&gt; that solves the same problem (critical sections accross nodes), but uses data bag items as the locks.&lt;br&gt;
    I didn't take it becaue it doesn't seem to handle race conditions. Also, it's unmaintained since 2011, and I don't think it's because it's perfect.&lt;/li&gt;
&lt;li&gt;I use the helper function &lt;code&gt;LockRDLM::find_duplicate_identity&lt;/code&gt; to monitor for duplicates. One can use this function in their recipe to fail a Chef run if a duplicate is found - I prefer having servers with an assigned identity not depending on the lock during run and one server being in charge of looking for duplicates.&lt;/li&gt;
&lt;/ul&gt;</content><category term="FOSS"></category><category term="Chef"></category><category term="Mutex"></category><category term="Lock"></category><category term="Ruby"></category><category term="Scripts"></category></entry><entry><title>Enhancing Packer Templates with eRuby</title><link href="https://blog.backslasher.net/packer-erb.html" rel="alternate"></link><published>2015-11-18T12:00:00+01:00</published><updated>2015-11-18T12:00:00+01:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2015-11-18:/packer-erb.html</id><summary type="html">&lt;h2&gt;The Problem&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.packer.io/"&gt;Packer&lt;/a&gt; is a great tool for creating machine images, and I'm using it to create EC2 AMIs.&lt;br&gt;
My issue with it is that Packer is using JSON for input, and JSON is very inflexible. For instance, you can't:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Write comments (there was &lt;a href="https://github.com/mitchellh/packer/issues/283"&gt;an issue&lt;/a&gt; open for two years …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2&gt;The Problem&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.packer.io/"&gt;Packer&lt;/a&gt; is a great tool for creating machine images, and I'm using it to create EC2 AMIs.&lt;br&gt;
My issue with it is that Packer is using JSON for input, and JSON is very inflexible. For instance, you can't:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Write comments (there was &lt;a href="https://github.com/mitchellh/packer/issues/283"&gt;an issue&lt;/a&gt; open for two years about this)&lt;/li&gt;
&lt;li&gt;Comment blocks out for testing (part of "write comments" but different usage)&lt;/li&gt;
&lt;li&gt;Create identical blocks with subtle changes&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;The Solution&lt;/h2&gt;
&lt;p&gt;After reading the comment-related issue in Packer's GitHub page, I decided to use some wrapper. I considered writing a DSL wrapper for Ruby, but settled for using eRuby templates as a quick win.&lt;br&gt;
The basic usage is writing an &lt;code&gt;erb&lt;/code&gt; file instead of a &lt;code&gt;json&lt;/code&gt; one, and passing it to Packer like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;packer build &amp;lt;&lt;span class="o"&gt;(&lt;/span&gt;erb cherry.json.erb&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The redirection causes Bash to first execute &lt;code&gt;erb&lt;/code&gt; with our template, and provide the output as a file (actually a pipe), to &lt;code&gt;packer&lt;/code&gt;, who sees it as regular JSON.&lt;br&gt;
A slight variation is using Packer's STDIN, like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;erb cherry.json.erb &lt;span class="p"&gt;|&lt;/span&gt; packer build -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I dislike the idea of passing things via STDIN to binaries I'm not familiar with (since they might want some input and accidentally read it from the file), but that's just me.&lt;/p&gt;
&lt;h3&gt;Basic usage&lt;/h3&gt;
&lt;p&gt;The file inside can look almost identical to the JSON one but with Ruby snippets inside, like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Comments:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;%#&lt;/span&gt;&lt;span class="c"&gt; Upload cloud-init preconfig &lt;/span&gt;&lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;{&amp;quot;type&amp;quot;:&amp;quot;file&amp;quot;,&amp;quot;source&amp;quot;:&amp;quot;cloud-init/userdata.yaml&amp;quot;,&amp;quot;destination&amp;quot;:&amp;quot;/etc/cloud/cloud.cfg.d/50_slasher.cfg&amp;quot;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reducing magic constants:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="n"&gt;ssh_timeout_minutes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;ssh -o ConnectTimeout &lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt;&lt;span class="n"&gt;ssh_timeout_minutes&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="x"&gt; server get_stuff.sh&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JSON-proofing strings (quick and dirty version):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="x"&gt;{&amp;quot;type&amp;quot;:&amp;quot;shell&amp;quot;, &amp;quot;inline&amp;quot;: &lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sed \&amp;#39;s/^pidfile.*$/pidfile \/tmp\/redis.pid\&amp;#39; -i /etc/redis.conf&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;More Ruby&lt;/h3&gt;
&lt;p&gt;You can use heavier Ruby code to do more awesome stuff.&lt;br&gt;
For instance, this is me creating both PV and HVM versions of my AMI:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;json&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;build_config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;instance_type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;t1.micro&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;source_ami&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ami-c2a818aa&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hvm&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;instance_type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;t2.micro&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;source_ami&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ami-42718735&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;builders&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;build_config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;aws &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:type&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;type&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;amazon-ebs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;region&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;us-east-1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;source_ami&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:source_ami&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;instance_type&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:instance_type&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;ami_description&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;packer &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:instance_type&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;quot;builders&amp;quot;: &lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="no"&gt;JSON&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pretty_generate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;builders&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And here's choosing the right CentOS 6 AMI:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;source_ami&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;region&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;platform&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;is_hvm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;is_hvm&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="c1"&gt;# PV  https://aws.amazon.com/marketplace/ordering/ref=dtl_psb_continue?ie=UTF8&amp;amp;productId=f4325b48-37b0-405a-9847-236c64622e3e&amp;amp;region=us-east-1&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;region&lt;/span&gt;
      &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;eu-central-1&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt; &lt;span class="c1"&gt;# No such image&lt;/span&gt;
      &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sa-east-1&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ami-7d02a260&amp;#39;&lt;/span&gt;
      &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ap-northeast-1&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ami-81294380&amp;#39;&lt;/span&gt;
      &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;eu-west-1&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ami-42718735&amp;#39;&lt;/span&gt;
      &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;us-east-1&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ami-8997afe0&amp;#39;&lt;/span&gt;
      &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;us-west-1&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ami-1a013c5f&amp;#39;&lt;/span&gt;
      &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;us-west-2&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ami-b6bdde86&amp;#39;&lt;/span&gt;
      &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ap-southeast-2&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ami-e7138ddd&amp;#39;&lt;/span&gt;
      &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ap-southeast-1&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ami-a08fd9f2&amp;#39;&lt;/span&gt;
      &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Cannot choose AMI&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="c1"&gt;# HVM https://aws.amazon.com/marketplace/ordering?productId=74e73035-3435-48d6-88e0-89cc02ad83ee&amp;amp;ref_=dtl_psb_continue&amp;amp;region=us-east-1&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;region&lt;/span&gt;
      &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;eu-central-1&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ami-46c4f65b&amp;#39;&lt;/span&gt;
      &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sa-east-1&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ami-9b952086&amp;#39;&lt;/span&gt;
      &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ap-northeast-1&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ami-13614b12&amp;#39;&lt;/span&gt;
      &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;eu-west-1&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ami-30ff5c47&amp;#39;&lt;/span&gt;
      &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;us-east-1&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ami-c2a818aa&amp;#39;&lt;/span&gt;
      &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;us-west-1&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ami-57cfc412&amp;#39;&lt;/span&gt;
      &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;us-west-2&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ami-81d092b1&amp;#39;&lt;/span&gt;
      &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ap-southeast-2&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ami-b3523089&amp;#39;&lt;/span&gt;
      &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ap-southeast-1&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ami-b4a582e6&amp;#39;&lt;/span&gt;
      &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Cannot choose AMI&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;...&lt;/span&gt;
&lt;span class="x"&gt;&amp;quot;builders&amp;quot;: [&lt;/span&gt;
&lt;span class="x"&gt;  ...&lt;/span&gt;
&lt;span class="x"&gt;  &amp;quot;region&amp;quot;: &lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt;&lt;span class="n"&gt;source_ami&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;region&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;  ...&lt;/span&gt;
&lt;span class="x"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Arguments&lt;/h3&gt;
&lt;p&gt;One can imagine arguments would be useful (e.g. "regions to build the AMI in").&lt;br&gt;
However, the &lt;code&gt;erb&lt;/code&gt; binary doesn't accept arguments, so I had to pass those as environment variables. Less elegant but works OK:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;packer build &amp;lt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;REGIONS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;us-east-1,us-west-2 erb cherry.json.erb&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And inside the template:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt;
&lt;span class="n"&gt;regions&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="no"&gt;ENV&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;REGIONS&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;to_s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="ss"&gt;:strip&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;regions&lt;/span&gt;&lt;span class="o"&gt;=[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;us-east-1&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;regions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;empty?&lt;/span&gt;
&lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Going full Ruby&lt;/h3&gt;
&lt;p&gt;I haven't done it, but if your template is really complicated you can use a real Ruby file that prints the Packer template.&lt;br&gt;
Taking the exmaple template from the &lt;a href="https://www.packer.io/docs/templates/introduction.html"&gt;Packer docs&lt;/a&gt;, it'll look something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;json&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;region&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="no"&gt;ARGV&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;us-east-1&amp;#39;&lt;/span&gt;
&lt;span class="c1"&gt;#...&lt;/span&gt;
&lt;span class="c1"&gt;#...&lt;/span&gt;
&lt;span class="n"&gt;builder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="ss"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;amazon-ebs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;access_key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;...&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;secret_key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;./passwd&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="c1"&gt;# interpolate files&lt;/span&gt;
  &lt;span class="ss"&gt;region&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;region&lt;/span&gt; &lt;span class="c1"&gt;# arguments&lt;/span&gt;
  &lt;span class="ss"&gt;source_ami&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;get_ami&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;region&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="c1"&gt;# functions&lt;/span&gt;
  &lt;span class="ss"&gt;instance_type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;t1.micro&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;ssh_username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ubuntu&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;ami_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;packer {{timestamp}}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# Packer&amp;#39;s variables still work&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="ss"&gt;builders&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;provisioners&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="ss"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;shell&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;setup_things.sh&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# Print result&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="no"&gt;JSON&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pretty_generate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Have fun templating!&lt;/p&gt;</content><category term="FOSS"></category><category term="Ruby"></category><category term="Packer"></category><category term="Scripts"></category></entry><entry><title>Listing Chef Cookbook Licenses</title><link href="https://blog.backslasher.net/chef-licenses.html" rel="alternate"></link><published>2015-11-11T14:00:00+01:00</published><updated>2015-11-11T14:00:00+01:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2015-11-11:/chef-licenses.html</id><summary type="html">&lt;p&gt;As part of a compliance check for our company, I was required to print the name/version of all FOSS proejcts I'm using.&lt;br&gt;
Most of it was digging around &lt;code&gt;Gemfile&lt;/code&gt;s and &lt;code&gt;setup.py&lt;/code&gt;s, which isn't that interesting. The neat part was this snippet to extract license information from …&lt;/p&gt;</summary><content type="html">&lt;p&gt;As part of a compliance check for our company, I was required to print the name/version of all FOSS proejcts I'm using.&lt;br&gt;
Most of it was digging around &lt;code&gt;Gemfile&lt;/code&gt;s and &lt;code&gt;setup.py&lt;/code&gt;s, which isn't that interesting. The neat part was this snippet to extract license information from cookbooks installed on Chef server:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;chef&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;config_path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expand_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;~/.chef/knife.rb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="no"&gt;Chef&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;rest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Chef&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;REST&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Chef&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Config&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:chef_server_url&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;cbs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_rest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/cookbooks?num_versions=1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Get all cookbooks, latest version&lt;/span&gt;
&lt;span class="n"&gt;cbs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reject!&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="sr"&gt;/^slasher-/&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;# Remove my cookbooks&lt;/span&gt;
&lt;span class="n"&gt;vers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cbs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="c1"&gt;# Extract details&lt;/span&gt;
  &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;versions&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;url&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
  &lt;span class="n"&gt;deet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_rest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;lic&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;deet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;license&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="ss"&gt;license&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;lic&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;# Extract to CSV&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;csv&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;csv_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;CSV&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;generate&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="o"&gt;=[&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="ss"&gt;:license&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
  &lt;span class="n"&gt;csv&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;keys&lt;/span&gt;
  &lt;span class="n"&gt;vers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values_at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;csv_string&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Execute it using &lt;code&gt;chef exec ruby&lt;/code&gt;&lt;br&gt;
The result looks something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;name,license
rvm,Apache 2.0
yum-mysql-community,Apache 2.0
deploy_wrapper,none
tomcat,Apache 2.0
elasticsearch,Apache 2.0
...
graphite,Apache 2.0
curl,Apache 2.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The interesting bit is extracting the cookbook list and information using &lt;code&gt;Chef::REST&lt;/code&gt;. This is how &lt;code&gt;knife cookbook list&lt;/code&gt; does it.&lt;/p&gt;</content><category term="FOSS"></category><category term="Chef"></category><category term="Ruby"></category><category term="Licensing"></category></entry><entry><title>Writing Complex Scripts in HBase Shell</title><link href="https://blog.backslasher.net/complex-hbase-shell.html" rel="alternate"></link><published>2015-10-18T12:00:00+02:00</published><updated>2015-10-18T12:00:00+02:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2015-10-18:/complex-hbase-shell.html</id><summary type="html">&lt;h2&gt;The Story&lt;/h2&gt;
&lt;p&gt;HBase installations include a shell for running arbitrary commands.&lt;br&gt;
For instance, if you want to view all of your snapshots, you can do something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;[me@server ~]$ hbase shell
HBase Shell; enter &amp;#39;help&amp;lt;RETURN&amp;gt;&amp;#39; for list of supported commands.
Type &amp;quot;exit&amp;lt;RETURN&amp;gt;&amp;quot; to leave the HBase Shell
Version …&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h2&gt;The Story&lt;/h2&gt;
&lt;p&gt;HBase installations include a shell for running arbitrary commands.&lt;br&gt;
For instance, if you want to view all of your snapshots, you can do something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;[me@server ~]$ hbase shell
HBase Shell; enter &amp;#39;help&amp;lt;RETURN&amp;gt;&amp;#39; for list of supported commands.
Type &amp;quot;exit&amp;lt;RETURN&amp;gt;&amp;quot; to leave the HBase Shell
Version 0.94.22, rb3b224ddca3530139c0685fd5c52e37368b428df, Fri Aug  1 20:11:17 UTC 2014

hbase(main):001:0&amp;gt; list_snapshots
SNAPSHOT                                             TABLE + CREATION TIME
 snapname                                            tablename (Sun Oct 18 04:31:03 +0000 2015)
 ...
35 row(s) in 0.9470 seconds
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;However, these functions are implemented in such a way that they print their output to STDOUT directly. If you wanted to create a complex script, like deleting all snapshots taken yesterday, you're out of luck:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;[me@server ~]$ hbase shell
HBase Shell; enter &amp;#39;help&amp;lt;RETURN&amp;gt;&amp;#39; for list of supported commands.
Type &amp;quot;exit&amp;lt;RETURN&amp;gt;&amp;quot; to leave the HBase Shell
Version 0.94.22, rb3b224ddca3530139c0685fd5c52e37368b428df, Fri Aug  1 20:11:17 UTC 2014

hbase(main):001:0&amp;gt; a = list_snapshots
...
hbase(main):002:0&amp;gt; a.nil?
=&amp;gt; true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Until now, I accomplished things by wrapping them around in bash scripts, but this got annoying fast.  &lt;/p&gt;
&lt;h2&gt;The Solution&lt;/h2&gt;
&lt;p&gt;I sat around to messing with the HBase source code, and found the way these functions are defined.&lt;br&gt;
I'm referencing &lt;code&gt;v0.94.22&lt;/code&gt; because that's what I'm running, but the functions are similarly defined at the &lt;code&gt;master&lt;/code&gt; branch too.&lt;br&gt;
This is the interesting bit of &lt;a href="https://github.com/apache/hbase/blob/0.94.22/src/main/ruby/shell/commands/list_snapshots.rb"&gt;list_snapshots&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list_snapshot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;regex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;snapshot&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;creation_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;snapshot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getCreationTime&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_s&lt;/span&gt;
  &lt;span class="n"&gt;formatter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="n"&gt;snapshot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;snapshot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getTable&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; (&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;creation_time&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;)&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Problem is, this &lt;code&gt;admin&lt;/code&gt; variable isn't accessible from the main scope:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;hbase(main):010:0&amp;gt; admin
NameError: undefined local variable or method `admin&amp;#39; for #&amp;lt;Object:0x3faea1b0&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;After much digging around, I found out that &lt;code&gt;admin&lt;/code&gt; is accessible via &lt;code&gt;@shell.hbase_admin&lt;/code&gt;, so I can do something like &lt;code&gt;@shell.hbase_admin.list_snapshot&lt;/code&gt;.&lt;br&gt;
To remove a snapshot, we'll copy from &lt;a href="https://github.com/apache/hbase/blob/0.94.22/src/main/ruby/shell/commands/delete_snapshot.rb"&gt;delete_snapshot&lt;/a&gt;, and now I have my cleanup script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;snaps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@shell&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hbase_admin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list_snapshot&lt;/span&gt;
&lt;span class="n"&gt;snaps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;snaps&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getCreationTime&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;span class="n"&gt;snaps&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="vi"&gt;@shell&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hbase_admin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delete_snapshot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I can then run it using something like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;/path/to/hbase shell ~/scripts/cleanup.rb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And all is well.&lt;/p&gt;</content><category term="FOSS"></category><category term="HBase"></category><category term="Ruby"></category><category term="Java"></category><category term="Scripting"></category></entry><entry><title>Running Inline DSL in ChefSpec</title><link href="https://blog.backslasher.net/chefspec-inline.html" rel="alternate"></link><published>2015-10-17T00:00:00+02:00</published><updated>2015-10-17T00:00:00+02:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2015-10-17:/chefspec-inline.html</id><summary type="html">&lt;h2&gt;The Problem&lt;/h2&gt;
&lt;p&gt;I have a pet Chef cookbook in charge of managing SELinux policies in Linux machines (&lt;a href="https://github.com/BackSlasher/chef-selinuxpolicy"&gt;Take a look&lt;/a&gt;).&lt;br&gt;
Until today I got along fine without testing, because the cookbook barely had any logic to be tested. The only test I had (contributed by someone) just made sure the …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;The Problem&lt;/h2&gt;
&lt;p&gt;I have a pet Chef cookbook in charge of managing SELinux policies in Linux machines (&lt;a href="https://github.com/BackSlasher/chef-selinuxpolicy"&gt;Take a look&lt;/a&gt;).&lt;br&gt;
Until today I got along fine without testing, because the cookbook barely had any logic to be tested. The only test I had (contributed by someone) just made sure the cookbook isn't completely bonkers.&lt;br&gt;
I started working on a pretty complex feature (detecting when ports are assigned using a range) and it required testing. I'm familiar with 2 interesting options for testing cookbooks:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://docs.chef.io/kitchen.html"&gt;Kitchen&lt;/a&gt;: Uses Vagrant to create VMs and runs your recipes on it. Can optionally run tests on the machine to ensure it's provisioned OK&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sethvargo/chefspec"&gt;ChefSpec&lt;/a&gt;: Creates an in-memory Chef client that compiles the resource collection (see &lt;a href="https://docs.chef.io/chef_client.html#the-chef-client-title-run"&gt;this&lt;/a&gt; for details about the Chef client run) and allows you to ensure that the resource collection looks as you expected.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Running kitchen tests takes a while and requires a machine capable of virtualization (so it can't be run inside a VM), so I thought I'd try creating a ChefSpec test.&lt;br&gt;
The recommended way of using ChefSpec is by supplying the runner with a list of recipes to run, like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:chef_run&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="no"&gt;ChefSpec&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;SoloRunner&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;converge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;recipe::one&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;other::recipe&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;does stuff&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chef_run&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;install_package&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;However, when testing LWRPs this becomes annoying, as you have to create "test recipes" for your LWRPs. These either go inside a different cookbook (and complicate your repo and testing) or stay in your main cookbook (and should be marked to not be run by end users), and it looks bad.&lt;/p&gt;
&lt;h2&gt;The Solution&lt;/h2&gt;
&lt;p&gt;After a bit of hacking, I was able to monkey-patch the ChefSpec classes to accept Chef DSL instead, making the tests look a lot better.&lt;br&gt;
The patch looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# This can go at the beginning of your spec file&lt;/span&gt;
&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;ChefSpec&lt;/span&gt;
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SoloRunner&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;converge_dsl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;recipes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;cookbook_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;imaginary&amp;#39;&lt;/span&gt;
      &lt;span class="n"&gt;recipe_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;temp&amp;#39;&lt;/span&gt;
      &lt;span class="n"&gt;converge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;recipes&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;recipe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Chef&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Recipe&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cookbook_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;recipe_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="vi"&gt;@run_context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;recipe&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instance_eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The main difference between my method and the "normal" one (&lt;code&gt;converge&lt;/code&gt;), is that mine executes the block it's given inside a new recipe called &lt;code&gt;imaginary::temp&lt;/code&gt; (hardly a name that will be used by anyone). This allows you to do something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;let&lt;/span&gt; &lt;span class="ss"&gt;:chef_run&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="no"&gt;ChefSpec&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;SoloRunner&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;converge_dsl&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;does stuff&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chef_run&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;install_package&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;While the difference looks minute, when testing LWRPs it looks a lot different.&lt;br&gt;
Here is some code from my actual tests:&lt;/p&gt;
&lt;h3&gt;Without patch&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;single port&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;let&lt;/span&gt; &lt;span class="ss"&gt;:chef_run&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;runner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;ChefSpec&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SoloRunner&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;step_into&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;selinux_policy_port&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="no"&gt;Chef&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Config&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:cookbook_path&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;./test/cookbooks&amp;#39;&lt;/span&gt; &lt;span class="c1"&gt;# Allow Chef to find test cookbook&lt;/span&gt;
    &lt;span class="n"&gt;runner&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;converge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;selinux_policy_test::single_port&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;defines a single port&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="c1"&gt;#... irelevant stuff&lt;/span&gt;
    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chef_run&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;run_execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;selinux-port-1080-addormodify&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What is in &lt;code&gt;single_port&lt;/code&gt; recipe? Where is it?&lt;br&gt;
Are we guranteed to run with the CWD set in the cookbook's directory?&lt;br&gt;
You have to admit it looks weird.&lt;/p&gt;
&lt;h3&gt;With patch&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;single port&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;let&lt;/span&gt; &lt;span class="ss"&gt;:chef_run&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;runner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;ChefSpec&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SoloRunner&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;step_into&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;selinux_policy_port&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;runner&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;converge_dsl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;selinux_policy&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="c1"&gt;# recipe menitoned to force cookbook load&lt;/span&gt;
      &lt;span class="n"&gt;selinux_policy_port&lt;/span&gt; &lt;span class="mi"&gt;1080&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="n"&gt;protocol&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;tcp&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;secontext&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http_port_d&amp;#39;&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;defines a single port&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="c1"&gt;#... irelevant stuff&lt;/span&gt;
    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chef_run&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;run_execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;selinux-port-1080-addormodify&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I think it looks a lot more elegant. The test is self-contained (except for "real" code used in the actual cookbook) and is easily understood (what it does and what it expects to happen).&lt;/p&gt;
&lt;h2&gt;And even so...&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Update 19.02.16:&lt;/strong&gt; I am using this method successfully in my cookbooks, e.g. &lt;a href="https://github.com/BackSlasher/chef-selinuxpolicy/blob/master/spec/boolean_spec.rb"&gt;selinux_policy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Even though I think it's great, I'm currently not using it.&lt;br&gt;
My reasons for it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I'm so new to testing cookbooks that I think I should currently stick to the accepted working methods.&lt;/li&gt;
&lt;li&gt;Keeping the test recipes in a separate test cookbook allows it to be shared between ChefSpec and the Chef Kitchen. I currently think it helps maintainability.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I might decide to use this method eventually, and I still think it looks really neat, so it deserves a blog post.&lt;/p&gt;</content><category term="FOSS"></category><category term="Chef"></category><category term="Testing"></category><category term="Ruby"></category><category term="Scripts"></category><category term="ChefSpec"></category></entry><entry><title>Generating known_hosts file using Chef</title><link href="https://blog.backslasher.net/chef-known-hosts.html" rel="alternate"></link><published>2015-10-13T15:00:00+02:00</published><updated>2015-10-13T15:00:00+02:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2015-10-13:/chef-known-hosts.html</id><summary type="html">&lt;h2&gt;The Story&lt;/h2&gt;
&lt;p&gt;This post relates to my &lt;a href="https://blog.backslasher.net/merge-known-hosts.html"&gt;previous post&lt;/a&gt;. I was trying to create a script to amend my &lt;code&gt;known_hosts&lt;/code&gt; file (where SSH keeps fingerprints of all of the servers it connected to in the past, to prevent MitM attacks) with SSH keys collected by Chef. This benefits me in …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;The Story&lt;/h2&gt;
&lt;p&gt;This post relates to my &lt;a href="https://blog.backslasher.net/merge-known-hosts.html"&gt;previous post&lt;/a&gt;. I was trying to create a script to amend my &lt;code&gt;known_hosts&lt;/code&gt; file (where SSH keeps fingerprints of all of the servers it connected to in the past, to prevent MitM attacks) with SSH keys collected by Chef. This benefits me in two major ways:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Reduces the chance for &lt;a href="https://en.wikipedia.org/wiki/Man-in-the-middle_attack"&gt;MITM attacks&lt;/a&gt;:&lt;br&gt;
    When connecting to a server for the first time, you usually blindly accept its fingerprint, because you have nothing to compare it to. I saw it being referred to as "the web gap".&lt;br&gt;
    When using my script, you get the fingerprint from the Chef server (which you already trust).&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Eases replacing nodes / IPs:&lt;br&gt;
    My original pain point was that a colleague rebuilt a server, and named the new server the same as the old one.&lt;br&gt;
    While this is a reasonable thing to do, the new server had a different key from the old server, so SSH thought I was experiencing a MITM attack. I obviously discovered this only while doing something like this, to ensure the iptables service was running on all servers (we had a &lt;a href="https://en.wikipedia.org/wiki/SYN_flood"&gt;SYN flood&lt;/a&gt; scare):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;knife search &lt;span class="s1"&gt;&amp;#39;tags:public&amp;#39;&lt;/span&gt; -i &lt;span class="p"&gt;|&lt;/span&gt; parallel ssh &lt;span class="o"&gt;{}&lt;/span&gt; sudo pkill -USR1 chef-client
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The SSH errors messed up my little script and I had to iterate somewhat manually.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;The Script&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Init Chef stuff&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;chef&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;config_path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;ARGV&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expand_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;~/.chef/knife.rb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="no"&gt;Chef&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="no"&gt;Chef&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Config&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:node_name&lt;/span&gt;&lt;span class="o"&gt;]||=&lt;/span&gt;&lt;span class="sb"&gt;`hostname`&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;
&lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;Chef&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;DSL&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;DataQuery&lt;/span&gt;

&lt;span class="n"&gt;nodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;keys_ssh:*&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# find nodes with SSH keys&lt;/span&gt;
&lt;span class="n"&gt;key_rows&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fqdn&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]]&lt;/span&gt;
  &lt;span class="n"&gt;names&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ec2&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ec2&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;public_ipv4&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ipaddress&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Public IP if machine is EC2&lt;/span&gt;
  &lt;span class="n"&gt;key_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;keys&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ssh&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
  &lt;span class="n"&gt;keys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
  &lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key_data&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;host_ecdsa_type&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]]=&lt;/span&gt;&lt;span class="n"&gt;key_data&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;host_ecdsa_public&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;key_data&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;host_ecdsa_type&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;key_data&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;host_ecdsa_public&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
  &lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ssh-rsa&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;key_data&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;host_rsa_public&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;key_data&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;host_rsa_public&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
  &lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;key_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;key_value&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;%s %s %s&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;key_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key_value&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flatten&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;key_rows&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Script should be executed using Chef's embedded ruby. The two easy ways I know of:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;chef exec ruby SCRIPTPATH&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Adding a shebang to the script reading something like &lt;code&gt;#!/opt/chefdk/embedded/bin/ruby&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Interesting points&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The first block accepts a non-default location for a Chef client config file. This is to allow it to operate on actual Chef clients (nodes), but to default to Chef human users.&lt;/li&gt;
&lt;li&gt;When running on EC2 machines, the "regular" IP address listed in &lt;code&gt;n['ipaddress']&lt;/code&gt; (the one registered on the NIC) is the internal one, and therefor not the one I'm using when connecting to the machine.&lt;br&gt;
  This is why I'm using that little selection about what I'm pushing to &lt;code&gt;names&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;ecdsa&lt;/code&gt; (&lt;a href="https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm"&gt;Elliptic Curve Digital Signature Algorithm&lt;/a&gt;) key is registered in a strange way&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;The two scripts combined&lt;/h2&gt;
&lt;p&gt;When actually updating my &lt;code&gt;known_hosts&lt;/code&gt;, I'm running this command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;scripts/merge-known-hosts.py &amp;lt;&lt;span class="o"&gt;(&lt;/span&gt;chef &lt;span class="nb"&gt;exec&lt;/span&gt; ruby scripts/chef-ssh-keys.rb&lt;span class="o"&gt;)&lt;/span&gt; ~/.ssh/known_hosts -o ~/.ssh/known_hosts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="FOSS"></category><category term="Ruby"></category><category term="Scripts"></category><category term="Chef"></category><category term="SSH"></category></entry><entry><title>Merging known_hosts files</title><link href="https://blog.backslasher.net/merge-known-hosts.html" rel="alternate"></link><published>2015-10-13T12:00:00+02:00</published><updated>2015-10-13T12:00:00+02:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2015-10-13:/merge-known-hosts.html</id><summary type="html">&lt;h2&gt;The Story&lt;/h2&gt;
&lt;p&gt;Some time ago, some colleague rebuilt several servers and reused their names (think &lt;code&gt;sql1&lt;/code&gt;,&lt;code&gt;sql2&lt;/code&gt; etc).&lt;br&gt;
Obviously the new servers had different SSH server keys than the old ones, so my &lt;code&gt;known_hosts&lt;/code&gt; file was out of date.&lt;br&gt;
I considered manually removing the old key fingerprints, but decided that …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;The Story&lt;/h2&gt;
&lt;p&gt;Some time ago, some colleague rebuilt several servers and reused their names (think &lt;code&gt;sql1&lt;/code&gt;,&lt;code&gt;sql2&lt;/code&gt; etc).&lt;br&gt;
Obviously the new servers had different SSH server keys than the old ones, so my &lt;code&gt;known_hosts&lt;/code&gt; file was out of date.&lt;br&gt;
I considered manually removing the old key fingerprints, but decided that I should make this process more robust, so instead I created a script that fetches all server SSH keys from our Chef server (coming soon).&lt;br&gt;
However, I found no script to merge the new file with the one I had. So I made one.&lt;/p&gt;
&lt;h2&gt;The Script&lt;/h2&gt;
&lt;h3&gt;Update 22.10.15&lt;/h3&gt;
&lt;p&gt;My script was only allowing the first key type for each host. Fixed&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="c1"&gt;# Merges known_hosts files &lt;/span&gt;
&lt;span class="c1"&gt;# http://blog.backslasher.net/merge-known-hosts.html&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;argparse&lt;/span&gt;
&lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;argparse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ArgumentParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Merge known_hosts files sequentially&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;epilog&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="s2"&gt;Duplicates are removed with eariler appearances having higher precedence (if a host is mentioned several times, only the first appearance is used). &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="s2"&gt;One can use only one file, like `merge-known-hosts.py ~/.ssh/known_hosts -o ~/.ssh/known_hosts` to remove duplicates. &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;files&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nargs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;+&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;files that should be merged&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-o&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;--output&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nargs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;?&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;output file (defaults to STDOUT). Only opened after merge is complete, so can be used for inplace merge.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;StringIO&lt;/span&gt;
  &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;StringIO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StringIO&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
  &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;

&lt;span class="n"&gt;familiar_hosts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;line_split&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rstrip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;hosts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line_split&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;key_type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line_split&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;hosts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;host&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;host&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;hosts&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;key_type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;familiar_hosts&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# Filter out familiar hosts&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;hosts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;continue&lt;/span&gt; &lt;span class="c1"&gt;# skip this row if no hosts left&lt;/span&gt;
      &lt;span class="n"&gt;familiar_hosts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;([(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;key_type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;host&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;hosts&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
      &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hosts&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;key_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line_split&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
          &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getvalue&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Interesting points:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The script starts printing lines immediately. This means that it'll work on large files / pipes / whatever.&lt;br&gt;
  The only exception is when the output destination is a file. In order to avoid writing to the same file I'm reading (and corrupting it), I write to a "memory stream" and write it all to the file at the end.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;familiar_hosts&lt;/code&gt; is a set and not a list. This is because I don't need it ordered, and membership checks (testing if a host was already mentioned before) is much quicker in a set.&lt;br&gt;
  However, the &lt;code&gt;hosts&lt;/code&gt; list that represents the hosts in the current row, &lt;strong&gt;is&lt;/strong&gt; a list (and not a set) because I wanted to keep the ordering of the source file (when using a set, Python placed the IP addresses before the hostnames in the same row).&lt;/li&gt;
&lt;li&gt;I'm not hashing my &lt;code&gt;known_hosts&lt;/code&gt; file (see "HashKnownHosts" under &lt;code&gt;man ssh_config&lt;/code&gt;) because it prevents autocomplete in my SSH client. If you are using hashing, you should ensure that you're consistent - either have all input files hashed, or none of them. My script won't bother hashing plaintext hosts when looking for duplicates (if you implement it and find it useful, please send me a patch!)&lt;/li&gt;
&lt;/ul&gt;</content><category term="FOSS"></category><category term="Python"></category><category term="Scripts"></category><category term="SSH"></category></entry><entry><title>Managing AWS Security Groups with Piculet</title><link href="https://blog.backslasher.net/piculet.html" rel="alternate"></link><published>2015-10-07T09:00:00+02:00</published><updated>2015-10-07T09:00:00+02:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2015-10-07:/piculet.html</id><summary type="html">&lt;h2&gt;The Problem&lt;/h2&gt;
&lt;p&gt;One of the first things I noticed when starting to work with AWS is that security groups are very hard to maintain:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Name and description are immutable - One can't modify the name/description of a Security Group after it's created&lt;/li&gt;
&lt;li&gt;Groups contain magical constants - There is no place …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2&gt;The Problem&lt;/h2&gt;
&lt;p&gt;One of the first things I noticed when starting to work with AWS is that security groups are very hard to maintain:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Name and description are immutable - One can't modify the name/description of a Security Group after it's created&lt;/li&gt;
&lt;li&gt;Groups contain magical constants - There is no place for labeling IP ranges or port numbers&lt;/li&gt;
&lt;li&gt;The rules can only refer to other security groups in the same VPC (or classic region, if outside VPC) or bare IPs, meaning that cross-VPC rules must contain a list of IPs that can change (since EC2 machines can change their IPs)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since I didn't finish migrating our environment to documented and organized CloudFormation stacks (and I might never get around to it), I needed a way to manage security groups that doesn't cause me to change paradigms, meaning it won't force me to deploy tunneling solutions or push the servers into stacks.&lt;/p&gt;
&lt;p&gt;Luckily I found &lt;a href="https://github.com/winebarrel/piculet"&gt;Piculet&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;What does it do&lt;/h2&gt;
&lt;p&gt;Piculet allowed me to define all of my Security Groups in a specific region using its DSL (it even has an export function for your existing groups).&lt;br&gt;
By using &lt;code&gt;piculet --apply&lt;/code&gt; one can make the actual security groups look like the DSL file (or its compiled form), meaning that Piculet will create/delete security groups and add/remove rules to match your file.&lt;br&gt;
&lt;img alt="" src="https://blog.backslasher.net/images/piculet/apply.png"&gt;&lt;br&gt;
This is already great as you can:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;add comments to document your rules&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# LB healthcheck&lt;/span&gt;
&lt;span class="n"&gt;permission&lt;/span&gt; &lt;span class="ss"&gt;:tcp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8644&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;8644&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;groups&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;default&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;use ruby constructs to simpify your rules&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;
  &lt;span class="mi"&gt;2003&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# carbon incoming&lt;/span&gt;
  &lt;span class="mi"&gt;4567&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# grafana UI&lt;/span&gt;
&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;permission&lt;/span&gt; &lt;span class="ss"&gt;:tcp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;groups&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;default&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;keep the files under source control to see who changed what, when and why&lt;br&gt;
&lt;img alt="" src="https://blog.backslasher.net/images/piculet/git.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What I'm doing with it&lt;/h2&gt;
&lt;p&gt;Using piculet as is was fine for a while, but aside from modifying the gem itself I modified the way we're using it.&lt;/p&gt;
&lt;h3&gt;Helper methods for IPs&lt;/h3&gt;
&lt;p&gt;I have some cross-VPC rules (like servers in Singapore talking to servers in Ireland), so I can't use security group references. If I used IPs, my rules would look like this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Ireland rule&lt;/span&gt;
&lt;span class="n"&gt;permission&lt;/span&gt; &lt;span class="ss"&gt;:tcp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5678&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;5678&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;ip_ranges&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;1.2.3.4/0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# serverA.singapore.slash.com&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;5.6.7.8/0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# serverB.singapore.slash.com&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This isn't ideal because I have to update the list whenever an IP changes (or I add a new server).
I ended up creating a helper file that monkey-patches the Piculet classes to include my helper methods such as &lt;code&gt;aws_role&lt;/code&gt; (finds IP addresses of instances by a tag named "role") or &lt;code&gt;aws_vpc&lt;/code&gt; (IP addresses of all instances in a specific VPC).&lt;br&gt;
This is most of my helper file. I might release it properly if it's interesting.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Slasher&lt;/span&gt;
  &lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Firewall&lt;/span&gt;
      &lt;span class="c1"&gt;# Create instance hash&lt;/span&gt;
      &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;set_instances&lt;/span&gt;
      &lt;span class="n"&gt;extract_tag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;lambda&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="n"&gt;mt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tags&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;mt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nil?&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;mt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;

      &lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;aws-sdk-core&amp;#39;&lt;/span&gt;
      &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="no"&gt;Aws&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;EC2&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;region&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;us-east-1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;regions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;describe_regions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;regions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;region_name&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
      &lt;span class="n"&gt;instances&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;regions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collect&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="no"&gt;Aws&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;EC2&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;region&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;describe_instances&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reservations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instances&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flatten&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="n"&gt;instances&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select!&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;extract_tag&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;piculet_ignore&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;empty?&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="vc"&gt;@@instance_hash&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;instances&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="p"&gt;({&lt;/span&gt;
          &lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;extract_tag&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Name&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="ss"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;   &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;public_ip_address&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/32&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="ss"&gt;role&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;extract_tag&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Role&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="ss"&gt;roles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;extract_tag&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Role&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="ss"&gt;:strip&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
          &lt;span class="ss"&gt;vpc_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vpc_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="ss"&gt;region&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;placement&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;availability_zone&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gsub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/.$/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="n"&gt;set_instances&lt;/span&gt; &lt;span class="c1"&gt;# Actually run&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;instance_hash&lt;/span&gt;
      &lt;span class="vc"&gt;@@instance_hash&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;# DNS resolution&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;host_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;resolv&amp;#39;&lt;/span&gt;
      &lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="no"&gt;Resolv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getaddress&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/32&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;# By name tag&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;aws_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;instance_hash&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="o"&gt;]==&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:ip&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;# By role tag&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;aws_role&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;role&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;instance_hash&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:roles&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;include?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;role&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:ip&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;# All in classic EC2 in region&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;aws_classic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;region&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;instance_hash&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:region&lt;/span&gt;&lt;span class="o"&gt;]==&lt;/span&gt;&lt;span class="n"&gt;region&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:vpc_id&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;nil?&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:ip&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;# All in specific VPC&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;aws_vpc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vpc_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;instance_hash&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:vpc_id&lt;/span&gt;&lt;span class="o"&gt;]==&lt;/span&gt;&lt;span class="n"&gt;vpc_id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:ip&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;# IPs of health checkers in Route53&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;route53_ips&lt;/span&gt;
      &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;54.228.16.0/26&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;54.232.40.64/26&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;54.241.32.64/26&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;54.243.31.192/26&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;54.245.168.0/26&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;54.248.220.0/26&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;54.251.31.128/26&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;54.252.79.128/26&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;54.183.255.128/26&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;54.244.52.192/26&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;54.250.253.192/26&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;54.252.254.192/26&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;54.255.254.192/26&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;107.23.255.0/26&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;176.34.159.192/26&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;177.71.207.128/26&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;# Every IP we can think of&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;all_ips&lt;/span&gt;
      &lt;span class="n"&gt;instance_hash&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:ip&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;route53_ips&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Piculet&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;DSL&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;EC2&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;SecurityGroup&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Permissions&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Permission&lt;/span&gt;
  &lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;Slasher&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Firewall&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now I can use it in my rules, like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# App healthcheck&lt;/span&gt;
&lt;span class="n"&gt;permission&lt;/span&gt; &lt;span class="ss"&gt;:tcp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8644&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;8644&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;ip_ranges&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;route53_ips&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# Backroom API&lt;/span&gt;
&lt;span class="n"&gt;permission&lt;/span&gt; &lt;span class="ss"&gt;:tcp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8081&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;8081&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;ip_ranges&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;aws_role&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;backroom&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="c1"&gt;# From around the world&lt;/span&gt;
    &lt;span class="n"&gt;host_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;important.client.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Apply all regions&lt;/h3&gt;
&lt;p&gt;I have this helper script to apply each file to its matching region.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
cat regions &lt;span class="p"&gt;|&lt;/span&gt; parallel -j &lt;span class="m"&gt;0&lt;/span&gt; bundle &lt;span class="nb"&gt;exec&lt;/span&gt; piculet &lt;span class="nv"&gt;$@&lt;/span&gt; -a -f &lt;span class="o"&gt;{}&lt;/span&gt; -r &lt;span class="o"&gt;{}&lt;/span&gt; --exclude &lt;span class="s1"&gt;&amp;#39;/^packer\s[\w\-]+$/&amp;#39;&lt;/span&gt; --exclude_tag piculet_ignore
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Interesting things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;regions&lt;/code&gt; file contains all of the regions you want to apply. This is handy because you can stop handling a region without removing its file, have unrelated files around, etc.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--exclude&lt;/code&gt; is being used to ignore temporary security groups created by packer.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--exlcude_tag&lt;/code&gt; only exists in my fork of the gem (currently) and allows me to ignore security groups belonging to CloudFormation stacks.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;parallel&lt;/code&gt; is used to run all regions at the same time and keep the output tidy. If you don't care about output tidiness, you can use &lt;code&gt;xargs -P 0 -I {}&lt;/code&gt; instead&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Automatically updating rules&lt;/h3&gt;
&lt;p&gt;Since our rules are in a git repository, I have a server that keeps an updated copy of said repo and applies it every once in a while. This allows me to keep a CI/CD feel (infrastructure as code) and allow "regular" users to modify the FW rules using pull requests on the repo.&lt;/p&gt;</content><category term="FOSS"></category><category term="AWS"></category><category term="Security"></category><category term="Firewall"></category><category term="Piculet"></category><category term="Ruby"></category></entry><entry><title>Running Xbox360 controllers on Ubuntu</title><link href="https://blog.backslasher.net/xbox360-controller-ubuntu.html" rel="alternate"></link><published>2015-09-06T10:00:00+02:00</published><updated>2015-09-06T10:00:00+02:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2015-09-06:/xbox360-controller-ubuntu.html</id><summary type="html">&lt;p&gt;&lt;img alt="" src="https://blog.backslasher.net/images/xbox360-controller-ubuntu/ubuntu360.png"&gt;&lt;/p&gt;
&lt;p&gt;I wanted to write a few lines on how I configured my controller on Ubuntu to work with Steam games, since I discovered some neat stuff.&lt;/p&gt;
&lt;h3&gt;What I've got&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.xbox.com/en-US/xbox-360/accessories/controllers/wireless-controller-with-play-and-charge-kit"&gt;Xbox 360 wireless standard controller&lt;/a&gt;, with cable (the one you use with the Xbox 360 console)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.com/Xbox-Wireless-Gaming-Receiver-Windows/dp/B000HZFCT2"&gt;Xbox 360 Gaming Reciever&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Ubuntu …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="" src="https://blog.backslasher.net/images/xbox360-controller-ubuntu/ubuntu360.png"&gt;&lt;/p&gt;
&lt;p&gt;I wanted to write a few lines on how I configured my controller on Ubuntu to work with Steam games, since I discovered some neat stuff.&lt;/p&gt;
&lt;h3&gt;What I've got&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.xbox.com/en-US/xbox-360/accessories/controllers/wireless-controller-with-play-and-charge-kit"&gt;Xbox 360 wireless standard controller&lt;/a&gt;, with cable (the one you use with the Xbox 360 console)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.com/Xbox-Wireless-Gaming-Receiver-Windows/dp/B000HZFCT2"&gt;Xbox 360 Gaming Reciever&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Ubuntu 14.04.3 LTS&lt;/li&gt;
&lt;li&gt;Steam, as installed from the Ubuntu repo&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If your inventory differs, you might have other issues.&lt;/p&gt;
&lt;h2&gt;The play and charge is a lie&lt;/h2&gt;
&lt;p&gt;The cable can't transfer any data, and is useless for connecting the gamepad to the computer.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Controller:        Microsoft Xbox 360 Play&amp;amp;Charge Kit
Vendor/Product:    045e:028f
USB Path:          003:029
Controller Type:   Xbox360 Play&amp;amp;Charge

-- [ ERROR ] ------------------------------------------------------
The Xbox360 Play&amp;amp;Charge cable is for recharging only, it does not transmit data, thus xboxdrv can&amp;#39;t support it. You have to get a wireless receiver:

* http://www.xbox.com/en-ca/hardware/x/xbox360wirelessgamingreceiver/
-------
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Above is &lt;code&gt;xboxdrv&lt;/code&gt; reproaching me for trying to work with the cable.&lt;/p&gt;
&lt;h2&gt;xpad&lt;/h2&gt;
&lt;p&gt;(not the &lt;a href="https://apps.ubuntu.com/cat/applications/xpad/"&gt;Ubuntu package&lt;/a&gt; that emulates sticky notes).&lt;br&gt;
A  kernel module in charge of interfacing with gamepads, now bundled with Ubuntu. &lt;a href="https://help.ubuntu.com/community/Xbox360Controller"&gt;See more here&lt;/a&gt;.&lt;br&gt;
This module handles regular Xbox 360 controllers (see "What I've got" above) well enough, but some games didn't recognize the controller.&lt;br&gt;
It also does nothing to indicate the controller was recognized - the controller keeps blinking (like it's searching for an owner), and no message in &lt;code&gt;dmesg&lt;/code&gt; or any log (&lt;code&gt;/var/log/{syslog,kern.log,dmesg}&lt;/code&gt;).&lt;br&gt;
The reason is that the driver registers 4 controllers (&lt;code&gt;/dev/input/js{0,1,2,3}&lt;/code&gt;) when the reciever is plugged in, so nothing happens when it's detecting a new actual controller.&lt;/p&gt;
&lt;h2&gt;xboxdrv&lt;/h2&gt;
&lt;p&gt;An alternative userspace driver avaialble from the Ubuntu repos.&lt;br&gt;
To run it, you first have to unload the xpad module using &lt;code&gt;sudo rmmod xpad&lt;/code&gt; or by supplying &lt;code&gt;-d&lt;/code&gt; to xboxdrv. It can also be &lt;a href="http://askubuntu.com/q/110341"&gt;blacklisted&lt;/a&gt;.&lt;br&gt;
It has to be run as root (because it handles raw input devices), and gives much more visibilty to the controller's state (for instance, it sets the controller's status LED to indicate that the controller is connected).&lt;br&gt;
Some games only detected my input when running &lt;code&gt;xboxdrv&lt;/code&gt; with &lt;code&gt;--mimic-xpad&lt;/code&gt;, even though they wouldn't work with the real &lt;code&gt;xpad&lt;/code&gt;. Weird.
It has a lot of interesting arguments (really) and the manpage is really worth a read (&lt;code&gt;man xboxdrv&lt;/code&gt;). I think the secret to success is trying different kinds of configurations.&lt;/p&gt;
&lt;h2&gt;Steam Games and Gamepads&lt;/h2&gt;
&lt;p&gt;When using Steam's &lt;a href="http://store.steampowered.com/bigpicture"&gt;Big Picture&lt;/a&gt; (accessible by pressing the big Xbox logo while browsing steam), games with the gamepad icon are supposed to support gamepads (duh).&lt;br&gt;
&lt;img alt="" src="https://blog.backslasher.net/images/xbox360-controller-ubuntu/meatboy.png"&gt;&lt;/p&gt;
&lt;p&gt;I'm going to list a few games I managed to get working with the controller, so you'll know that if you can't get these working, you have some configuration issue.&lt;br&gt;
Please let me know if you have any insights / additions!&lt;/p&gt;
&lt;h3&gt;Works with xpad&lt;/h3&gt;
&lt;p&gt;Since these work with the default setup, I didn't test them on xboxdrv.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://store.steampowered.com/app/70300"&gt;VVVVVV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://store.steampowered.com/app/40800"&gt;Super Meat Boy&lt;/a&gt; - so much better with a gamepad!&lt;/li&gt;
&lt;li&gt;&lt;a href="http://store.steampowered.com/app/218820"&gt;Mercenary Kings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://store.steampowered.com/app/305050"&gt;Outland&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Works with xboxdrv&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://store.steampowered.com/app/113200"&gt;The Binding of Isaac&lt;/a&gt; - required &lt;code&gt;--mimic-xpad&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://store.steampowered.com/app/247020"&gt;Cook, Serve, Delicious!&lt;/a&gt; - required &lt;code&gt;--mimic-xpad&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Image Attribution&lt;/h2&gt;
&lt;p&gt;First image taken from here: &lt;a href="https://scognito.wordpress.com/2009/11/18/streaming-movies-and-music-from-ubuntu-to-xbox360/"&gt;https://scognito.wordpress.com/2009/11/18/streaming-movies-and-music-from-ubuntu-to-xbox360/&lt;/a&gt;&lt;/p&gt;</content><category term="FOSS"></category><category term="xbox"></category><category term="ubuntu"></category><category term="steam"></category></entry><entry><title>Chef Snippets</title><link href="https://blog.backslasher.net/chef-snippets.html" rel="alternate"></link><published>2015-08-23T14:00:00+02:00</published><updated>2015-08-23T14:00:00+02:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2015-08-23:/chef-snippets.html</id><summary type="html">&lt;p&gt;I thought I'd upload some interesting Chef-related snippets I accumulated.&lt;/p&gt;
&lt;h2&gt;Chef Shell&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;chef-shell&lt;/code&gt; is an easy way to gain the context of a Chef client.&lt;br&gt;
I mainly use it to debug recipes by executing little bits of them in the shell.&lt;/p&gt;
&lt;h3&gt;As client&lt;/h3&gt;
&lt;p&gt;If you're running it on a standard …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I thought I'd upload some interesting Chef-related snippets I accumulated.&lt;/p&gt;
&lt;h2&gt;Chef Shell&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;chef-shell&lt;/code&gt; is an easy way to gain the context of a Chef client.&lt;br&gt;
I mainly use it to debug recipes by executing little bits of them in the shell.&lt;/p&gt;
&lt;h3&gt;As client&lt;/h3&gt;
&lt;p&gt;If you're running it on a standard Chef node (connected to a Chef server), you can simply use:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo chef-shell -z
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;As human client&lt;/h3&gt;
&lt;p&gt;If you want to run &lt;code&gt;chef-shell&lt;/code&gt; from your Knife-wielding workstation, use a similar trick:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;chef-shell -z -c ~/.chef/knife.rb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Of course, I'm assuming your Knife config is in the default location. Modify if necessary.&lt;/p&gt;
&lt;h3&gt;As solo in Vagrant&lt;/h3&gt;
&lt;p&gt;When using Chef solo in Vagrant, you can run Chef shell to simulate it by running something like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo chef-shell -s --config /tmp/vagrant-chef/solo.rb --json-attributes /tmp/vagrant-chef/dna.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I got the arguments from running &lt;code&gt;vagrant provision&lt;/code&gt; and during the provisioning running something like &lt;code&gt;ps aux | grep chef&lt;/code&gt;.&lt;br&gt;
To load your cookbooks (which is not automatic) you can run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expand!&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Normal runlist&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;OR&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Custom set of recipes&lt;/span&gt;
&lt;span class="n"&gt;recipes&lt;/span&gt;&lt;span class="o"&gt;=[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nginx&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;OpenStruct&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;recipes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;recipes&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Chef in Ruby&lt;/h2&gt;
&lt;p&gt;Sometimes I want to use Chef logic in my Ruby scripts or I just want direct access to Chef's libraries.&lt;br&gt;
The easiest way to accomplish it is to use Chef's own Ruby instance, available under &lt;code&gt;/opt/chefdk/embedded/bin/ruby&lt;/code&gt; (for ChefDK) or &lt;code&gt;/opt/chef/embedded/bin/ruby&lt;/code&gt; (for Chef client). I sometimes use the &lt;code&gt;irb&lt;/code&gt; binary instead.&lt;br&gt;
You can also use &lt;code&gt;chef exec&lt;/code&gt; in newer editions of Chef.&lt;br&gt;
I have this boilerplate snippet to load the Chef config file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;chef&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;human_user&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="c1"&gt;# Whether we&amp;#39;re running as a Chef user or as a Chef client&lt;/span&gt;
  &lt;span class="n"&gt;config_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expand_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;~/.chef/knife.rb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
  &lt;span class="n"&gt;config_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/etc/chef/client.rb&amp;#39;&lt;/span&gt;
  &lt;span class="no"&gt;Chef&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Config&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:node_name&lt;/span&gt;&lt;span class="o"&gt;]||=&lt;/span&gt;&lt;span class="sb"&gt;`hostname`&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="no"&gt;Chef&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then you can run some Chef-dependant code, like:&lt;/p&gt;
&lt;h4&gt;Getting all nodes&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;nodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Chef&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="no"&gt;Chef&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;Translate node FQDN to AWS instance ID&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;Chef&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;DSL&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;DataQuery&lt;/span&gt;

&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ec2_instance_id:*&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fqdn&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ec2&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;instance_id&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;Update a databag&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;Chef&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;DSL&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;DataQuery&lt;/span&gt;

&lt;span class="n"&gt;mu&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;data_bag_item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;song&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;of&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;mu&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ice&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fire&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;mu&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;Query for group membership&lt;/h4&gt;
&lt;p&gt;Taken from the &lt;a href="https://github.com/chef/knife-acl"&gt;knife-acl&lt;/a&gt; project&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_usag?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;gname&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;gname&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="sr"&gt;/^[0-9a-f]+$/&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;client_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;best.machine.com&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;rest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Chef&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Search&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Query&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rest&lt;/span&gt;
&lt;span class="n"&gt;groups&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;rest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_rest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/groups&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;is_usag?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;span class="n"&gt;current_groups&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;groups&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;rest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_rest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/groups/&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;actors&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;include?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Mass operations in Bash&lt;/h2&gt;
&lt;p&gt;Some of these commands use &lt;code&gt;parallel&lt;/code&gt;. It can be switches with &lt;code&gt;xargs -I {}&lt;/code&gt; but it won't run as fast.&lt;/p&gt;
&lt;h3&gt;Get all nodes who's last run failed&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;knife node list &lt;span class="p"&gt;|&lt;/span&gt; parallel &lt;span class="s1"&gt;&amp;#39;knife runs list -r1 {} | egrep &amp;quot;status:\s+failure&amp;quot;&amp;gt;/dev/null &amp;amp;&amp;amp; echo {}&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="FOSS"></category><category term="Chef"></category><category term="Ruby"></category><category term="Vagrant"></category></entry><entry><title>How Chef's use_inline_resources works</title><link href="https://blog.backslasher.net/chef-inline.html" rel="alternate"></link><published>2015-08-17T17:00:00+02:00</published><updated>2015-08-17T17:00:00+02:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2015-08-17:/chef-inline.html</id><summary type="html">&lt;p&gt;I recently had an issue with &lt;a href="https://docs.chef.io/lwrp.html#use-inline-resources"&gt;use_inline_resources&lt;/a&gt;.&lt;br&gt;
This feature's documentation is lackluster, and I learnt about its magic thanks to some &lt;a href="https://github.com/chef/chef/issues/3748#issuecomment-127361292"&gt;scraps of information&lt;/a&gt;.&lt;br&gt;
I wanted to share some of my info about how it actually works.&lt;/p&gt;
&lt;h2&gt;The basics&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;use_inline_resources&lt;/code&gt; is used to separate a LWRP's run context from the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I recently had an issue with &lt;a href="https://docs.chef.io/lwrp.html#use-inline-resources"&gt;use_inline_resources&lt;/a&gt;.&lt;br&gt;
This feature's documentation is lackluster, and I learnt about its magic thanks to some &lt;a href="https://github.com/chef/chef/issues/3748#issuecomment-127361292"&gt;scraps of information&lt;/a&gt;.&lt;br&gt;
I wanted to share some of my info about how it actually works.&lt;/p&gt;
&lt;h2&gt;The basics&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;use_inline_resources&lt;/code&gt; is used to separate a LWRP's run context from the main run, making it run in an isolated "mini-run".&lt;br&gt;
Assume the following structure inside cookbook &lt;code&gt;slasher&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;resources/default.rb&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# resource definition for slasher LWRP&lt;/span&gt;
&lt;span class="n"&gt;actions&lt;/span&gt; &lt;span class="ss"&gt;:swing&lt;/span&gt;
&lt;span class="n"&gt;default_action&lt;/span&gt; &lt;span class="ss"&gt;:swing&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;providers/default.rb&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# provider for slasher LWRP&lt;/span&gt;
&lt;span class="n"&gt;use_inline_resources&lt;/span&gt;

&lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="ss"&gt;:swing&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;execute&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;echo swish&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This causes the following effects:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;You cannot subscribe to / notify resources that are not part of this resource's context.&lt;br&gt;
  This will break:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# provider for slasher LWRP&lt;/span&gt;
&lt;span class="n"&gt;use_inline_resources&lt;/span&gt;

&lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="ss"&gt;:swing&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;execute&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;echo swish&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;notifies&lt;/span&gt; &lt;span class="ss"&gt;:restart&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;service[nginx]&amp;#39;&lt;/span&gt; &lt;span class="c1"&gt;# not defined in this LWRP!&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The external resource is automatically "updated" (meaning it triggers other resources using subscribe/notify) whenever one of the resources in the run changes.&lt;br&gt;
  This will work:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# External usage of slash&lt;/span&gt;
&lt;span class="n"&gt;service&lt;/span&gt; &lt;span class="n"&gt;nginx&lt;/span&gt;

&lt;span class="n"&gt;slash&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;notifies&lt;/span&gt; &lt;span class="ss"&gt;:restart&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;service[nginx]&amp;#39;&lt;/span&gt; &lt;span class="c1"&gt;# Will happen because the execute resource will &amp;quot;update&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This behaviour is the encouraged way to implement LWRPs, because it helps encapsulation - they feel like "atomic" resources when used in recipes, and have no need to consider other resources when managing naming, notifications etc., especially other instances of the same resource. It'll probably be enabled by default in Chef13.&lt;/p&gt;
&lt;h2&gt;The internals&lt;/h2&gt;
&lt;p&gt;This is the interesting part - how it's actually implemented.
If you'll look at the &lt;a href="https://github.com/chef/chef/blob/12.4.1/lib/chef/provider/lwrp_base.rb"&gt;Chef source&lt;/a&gt; (not in &lt;code&gt;master&lt;/code&gt;, where I guess everything changed because it's the default behaviour), under file &lt;code&gt;lib/chef/provider/lwrp_base.rb&lt;/code&gt;, we'll see that the method &lt;code&gt;use_inline_resources&lt;/code&gt; does some mixin magic:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;use_inline_resources&lt;/span&gt;
    &lt;span class="kp"&gt;extend&lt;/span&gt; &lt;span class="no"&gt;InlineResources&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;ClassMethods&lt;/span&gt;
    &lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;InlineResources&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The mixed-in module (in the same file) overrides the method &lt;code&gt;action&lt;/code&gt; (used to define actions in LWRP) with the following code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;action&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;define_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;action_&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;recipe_eval_with_update_check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you can see, it calls &lt;code&gt;recipe_eval_with_update_check&lt;/code&gt; (instead of &lt;code&gt;instance_eval&lt;/code&gt; in the regular version), which will temporarily replace the run context with a new one (with an empty resource collection), run the resource's action, and then inspect the resources defined in this temporary context and see if any of them were updated. If so, it'll mark this resource (the LWRP) as updated too:&lt;br&gt;
(Comments are mine)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;recipe_eval_with_update_check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;saved_run_context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@run_context&lt;/span&gt;                                &lt;span class="c1"&gt;# Save that for later&lt;/span&gt;
  &lt;span class="n"&gt;temp_run_context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@run_context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dup&lt;/span&gt;                             &lt;span class="c1"&gt;# Create new run context&lt;/span&gt;
  &lt;span class="vi"&gt;@run_context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;temp_run_context&lt;/span&gt;                                 &lt;span class="c1"&gt;# Set it as current&lt;/span&gt;
  &lt;span class="vi"&gt;@run_context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resource_collection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Chef&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;ResourceCollection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="c1"&gt;# New and empty collection&lt;/span&gt;

  &lt;span class="n"&gt;return_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;instance_eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                            &lt;span class="c1"&gt;# Compile LWRP&lt;/span&gt;
  &lt;span class="no"&gt;Chef&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Runner&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@run_context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;converge&lt;/span&gt;                         &lt;span class="c1"&gt;# Execute compiled LWRP&lt;/span&gt;
  &lt;span class="n"&gt;return_value&lt;/span&gt;                                                    &lt;span class="c1"&gt;# Return result&lt;/span&gt;
&lt;span class="k"&gt;ensure&lt;/span&gt;                                                            &lt;span class="c1"&gt;# Always happens, even if we had an error&lt;/span&gt;
  &lt;span class="vi"&gt;@run_context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;saved_run_context&lt;/span&gt;                                &lt;span class="c1"&gt;# Restore old run context&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;temp_run_context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resource_collection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;any?&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;updated?&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;  &lt;span class="c1"&gt;# Search for modified resources&lt;/span&gt;
    &lt;span class="n"&gt;new_resource&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;updated_by_last_action&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                     &lt;span class="c1"&gt;# If found, update LWRP&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And that's how it's done!&lt;/p&gt;</content><category term="FOSS"></category><category term="Chef"></category><category term="Linux"></category><category term="Ruby"></category></entry><entry><title>Troubleshooting story - Java HTTP client crashes on connections</title><link href="https://blog.backslasher.net/java-ssl-crash.html" rel="alternate"></link><published>2015-08-12T16:44:00+02:00</published><updated>2015-08-12T16:44:00+02:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2015-08-12:/java-ssl-crash.html</id><summary type="html">&lt;h2&gt;Google Bait&lt;/h2&gt;
&lt;p&gt;This post isn't about the solution, but rather about the methodology. Anyway, to help people experiencing the same issue find this post:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CentOS 6.6 (fresh from &lt;code&gt;chef/centos-6.6&lt;/code&gt; Vagrant Box)&lt;/li&gt;
&lt;li&gt;Java 1.7.0 (&lt;code&gt;java-1.7.0-openjdk&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;DOES NOT happen with Java 1.8.0 (&lt;code&gt;java-1 …&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2&gt;Google Bait&lt;/h2&gt;
&lt;p&gt;This post isn't about the solution, but rather about the methodology. Anyway, to help people experiencing the same issue find this post:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CentOS 6.6 (fresh from &lt;code&gt;chef/centos-6.6&lt;/code&gt; Vagrant Box)&lt;/li&gt;
&lt;li&gt;Java 1.7.0 (&lt;code&gt;java-1.7.0-openjdk&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;DOES NOT happen with Java 1.8.0 (&lt;code&gt;java-1.8.0-openjdk&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Happens because of interaction with &lt;code&gt;nss&lt;/code&gt; (was version &lt;code&gt;3.16.1&lt;/code&gt;, resolved when upgrading to &lt;code&gt;3.19.1&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;The story&lt;/h2&gt;
&lt;p&gt;One of our boxes ships with Elasticsearch, and we also include a plugin called &lt;a href="http://bigdesk.org/"&gt;BigDesk&lt;/a&gt; which provides monitoring.
To do so, we run the following command (with Chef):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;/usr/share/elasticsearch/bin/plugin -install lukas-vlcek/bigdesk/2.5.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Recently, it started failing on our Vagrant development VMs. When trying with &lt;code&gt;--verbose&lt;/code&gt;, I got this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Trying http://download.elasticsearch.org/lukas-vlcek/bigdesk/bigdesk-2.5.0.zip...
Failed: IOException[Can&amp;#39;t get http://download.elasticsearch.org/lukas-vlcek/bigdesk/bigdesk-2.5.0.zip to /usr/share/elasticsearch/plugins/bigdesk.zip]; nested: FileNotFoundException[http://download.elasticsearch.org/lukas-vlcek/bigdesk/bigdesk-2.5.0.zip]; nested: FileNotFoundException[http://download.elasticsearch.org/lukas-vlcek/bigdesk/bigdesk-2.5.0.zip]; 
Trying http://search.maven.org/remotecontent?filepath=lukas-vlcek/bigdesk/2.5.0/bigdesk-2.5.0.zip...
Failed: SSLException[java.security.ProviderException: java.security.KeyException]; nested: ProviderException[java.security.KeyException]; nested: KeyException; 
Trying https://oss.sonatype.org/service/local/repositories/releases/content/lukas-vlcek/bigdesk/2.5.0/bigdesk-2.5.0.zip...
Failed: SSLException[java.security.ProviderException: java.security.KeyException]; nested: ProviderException[java.security.KeyException]; nested: KeyException; 
Trying https://github.com/lukas-vlcek/bigdesk/archive/2.5.0.zip...
Failed: SSLException[java.security.ProviderException: java.security.KeyException]; nested: ProviderException[java.security.KeyException]; nested: KeyException; 
Trying https://github.com/lukas-vlcek/bigdesk/archive/master.zip...
Failed: SSLException[java.security.ProviderException: java.security.KeyException]; nested: ProviderException[java.security.KeyException]; nested: KeyException; 
Failed to install lukas-vlcek/bigdesk/2.5.0, reason: failed to download out of all possible locations..., use --verbose to get detailed information
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As we can see, there is probably something wrong with the SSL handshake. cURLing to these URLs worked, so this is a client-specific issue.  &lt;/p&gt;
&lt;h2&gt;Basic troubleshooting&lt;/h2&gt;
&lt;p&gt;I made this snippet to test the HTTP handshake and get the real error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.net.HttpURLConnection&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.net.URL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Bla&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://github.com/lukas-vlcek/bigdesk/archive/2.5.0.zip&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;HttpURLConnection&lt;/span&gt; &lt;span class="n"&gt;httpConnection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HttpURLConnection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="na"&gt;openConnection&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="n"&gt;httpConnection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
      &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;printStackTrace&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Error\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;About to loop\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;currentThread&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="na"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);}&lt;/span&gt; &lt;span class="c1"&gt;//Crudest debug ever&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When running it, I got something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Hello
javax.net.ssl.SSLException: java.security.ProviderException: java.security.KeyException
        at sun.security.ssl.Alerts.getSSLException(Alerts.java:208)
        at sun.security.ssl.SSLSocketImpl.fatal(SSLSocketImpl.java:1916)
        at sun.security.ssl.SSLSocketImpl.fatal(SSLSocketImpl.java:1874)
        at sun.security.ssl.SSLSocketImpl.handleException(SSLSocketImpl.java:1857)
        at sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1378)
        at sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1355)
        at sun.net.www.protocol.https.HttpsClient.afterConnect(HttpsClient.java:559)
        at sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.connect(AbstractDelegateHttpsURLConnection.java:185)
        at sun.net.www.protocol.https.HttpsURLConnectionImpl.connect(HttpsURLConnectionImpl.java:153)
        at Bla.main(Bla.java:10)
Caused by: java.security.ProviderException: java.security.KeyException
        at sun.security.ec.ECKeyPairGenerator.generateKeyPair(ECKeyPairGenerator.java:146)
        at java.security.KeyPairGenerator$Delegate.generateKeyPair(KeyPairGenerator.java:704)
        at sun.security.ssl.ECDHCrypt.&amp;lt;init&amp;gt;(ECDHCrypt.java:78)
        at sun.security.ssl.ClientHandshaker.serverKeyExchange(ClientHandshaker.java:714)
        at sun.security.ssl.ClientHandshaker.processMessage(ClientHandshaker.java:278)
        at sun.security.ssl.Handshaker.processLoop(Handshaker.java:913)
        at sun.security.ssl.Handshaker.process_record(Handshaker.java:849)
        at sun.security.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:1035)
        at sun.security.ssl.SSLSocketImpl.performInitialHandshake(SSLSocketImpl.java:1344)
        at sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1371)
        ... 5 more
Caused by: java.security.KeyException
        at sun.security.ec.ECKeyPairGenerator.generateECKeyPair(Native Method)
        at sun.security.ec.ECKeyPairGenerator.generateKeyPair(ECKeyPairGenerator.java:126)
        ... 14 more
Error
About to loop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This, however, worked:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.51-1.b16.el6_7.x86_64/jre/bin/java Bla
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Meaning this problem was java-1.7.0 specific.&lt;br&gt;
Upgrading everything (&lt;code&gt;sudo yum upgrade -y&lt;/code&gt;) also solved it, but upgrading &lt;code&gt;java-1.7.0-openjdk&lt;/code&gt; didn't, so it must be some external library.&lt;br&gt;
Running with SSL debugging, like &lt;code&gt;java -Djavax.net.debug=all Bla&lt;/code&gt;, printed a lot of output, where the interesting part is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;...
main, handling exception: java.security.ProviderException: java.security.KeyException
%% Invalidated:  [Session-1, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA]
main, SEND TLSv1 ALERT:  fatal, description = internal_error
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So it's definitely some weird error (not something like untrusted CA or key expiration).&lt;/p&gt;
&lt;h2&gt;Sysadmin Trickery&lt;/h2&gt;
&lt;p&gt;Thanks to putting my small snippet in an infinite loop, I could browse its &lt;code&gt;/proc&lt;/code&gt; directory and dig around.&lt;br&gt;
I was really interested in which libraries it was using, since it wasn't cURL (which worked).&lt;br&gt;
I executed something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt; cat /proc/&lt;span class="k"&gt;$(&lt;/span&gt;pgrep -f Bla&lt;span class="k"&gt;)&lt;/span&gt;/maps  &lt;span class="p"&gt;|&lt;/span&gt; perl -a -ne &lt;span class="s1"&gt;&amp;#39;print $F[5],$/&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sort &lt;span class="p"&gt;|&lt;/span&gt; uniq
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And got all of the memory-mapped files, which include loaded libraries. It looked like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;[heap]
/lib64/ld-2.12.so
/lib64/libc-2.12.so
/lib64/libdbus-1.so.3.4.0
/lib64/libdl-2.12.so
/lib64/libgcc_s-4.4.7-20120601.so.1
/lib64/libglib-2.0.so.0.2800.8
/lib64/libgmodule-2.0.so.0.2800.8
/lib64/libgobject-2.0.so.0.2800.8
/lib64/libgthread-2.0.so.0.2800.8
/lib64/libm-2.12.so
/lib64/libnspr4.so
/lib64/libnss_dns-2.12.so
/lib64/libnss_files-2.12.so
/lib64/libplc4.so
/lib64/libplds4.so
/lib64/libpthread-2.12.so
/lib64/libresolv-2.12.so
/lib64/librt-2.12.so
/lib64/libz.so.1.2.3
[stack]
/tmp/hsperfdata_vagrant/26329
/usr/lib64/libgconf-2.so.4.1.5
/usr/lib64/libnss3.so
/usr/lib64/libnssutil3.so
/usr/lib64/libORBit-2.so.0.1.0
/usr/lib64/libsmime3.so
/usr/lib64/libssl3.so
/usr/lib64/libstdc++.so.6.0.13
/usr/lib/jvm/java-1.7.0-openjdk-1.7.0.85.x86_64/jre/bin/java
/usr/lib/jvm/java-1.7.0-openjdk-1.7.0.85.x86_64/jre/lib/amd64/jli/libjli.so
/usr/lib/jvm/java-1.7.0-openjdk-1.7.0.85.x86_64/jre/lib/amd64/libjava.so
/usr/lib/jvm/java-1.7.0-openjdk-1.7.0.85.x86_64/jre/lib/amd64/libnet.so
/usr/lib/jvm/java-1.7.0-openjdk-1.7.0.85.x86_64/jre/lib/amd64/libsunec.so
/usr/lib/jvm/java-1.7.0-openjdk-1.7.0.85.x86_64/jre/lib/amd64/libverify.so
/usr/lib/jvm/java-1.7.0-openjdk-1.7.0.85.x86_64/jre/lib/amd64/libzip.so
/usr/lib/jvm/java-1.7.0-openjdk-1.7.0.85.x86_64/jre/lib/amd64/server/libjvm.so
/usr/lib/jvm/java-1.7.0-openjdk-1.7.0.85.x86_64/jre/lib/ext/gnome-java-bridge.jar
/usr/lib/jvm/java-1.7.0-openjdk-1.7.0.85.x86_64/jre/lib/ext/pulse-java.jar
/usr/lib/jvm/java-1.7.0-openjdk-1.7.0.85.x86_64/jre/lib/ext/sunec.jar
/usr/lib/jvm/java-1.7.0-openjdk-1.7.0.85.x86_64/jre/lib/ext/sunjce_provider.jar
/usr/lib/jvm/java-1.7.0-openjdk-1.7.0.85.x86_64/jre/lib/ext/sunpkcs11.jar
/usr/lib/jvm/java-1.7.0-openjdk-1.7.0.85.x86_64/jre/lib/jce.jar
/usr/lib/jvm/java-1.7.0-openjdk-1.7.0.85.x86_64/jre/lib/jsse.jar
/usr/lib/jvm/java-1.7.0-openjdk-1.7.0.85.x86_64/jre/lib/resources.jar
/usr/lib/jvm/java-1.7.0-openjdk-1.7.0.85.x86_64/jre/lib/rt.jar
/usr/lib/locale/locale-archive
[vdso]
[vsyscall]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The interesting bit is obviously &lt;code&gt;/usr/lib64/libssl3.so&lt;/code&gt;, so I wanted to see where it's coming from:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;yum provides /usr/lib64/libssl3.so
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Which got me &lt;code&gt;nss&lt;/code&gt;.&lt;br&gt;
Upgrading &lt;code&gt;nss&lt;/code&gt; (&lt;code&gt;sudo yum upgrade nss&lt;/code&gt;) solved the problem.&lt;/p&gt;
&lt;h2&gt;Post-op tests&lt;/h2&gt;
&lt;p&gt;I was curious about why Java 1.8.0 works, and used the same looping trick to inspect its loaded libraries. Turns out it wasn't loading nss but rather using some internal SSL implementation.&lt;br&gt;
This was confirmed by &lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=1167153#c26"&gt;some comment&lt;/a&gt; on the RedHat bugtracker.&lt;/p&gt;
&lt;h2&gt;My solution&lt;/h2&gt;
&lt;p&gt;Since this problem only occurs in our Vagrant VMs (because the production machines are kept up to date, and the Vagrant ones are created from the same template over and over), I chose to use some Chef hackery:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;nss&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;3.19.1-3.el6_6&amp;#39;&lt;/span&gt;
  &lt;span class="n"&gt;only_if&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;vagrant?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Checking if current node is a Vagrant VM&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now everything is working.&lt;/p&gt;</content><category term="FOSS"></category><category term="Ramblings"></category><category term="Java"></category><category term="SSL"></category><category term="HTTP"></category><category term="CentOS"></category><category term="Linux"></category></entry><entry><title>Migrating Graphite's Dashboards</title><link href="https://blog.backslasher.net/graphite-migrate-dashboards.html" rel="alternate"></link><published>2015-08-10T12:00:00+02:00</published><updated>2015-08-10T12:00:00+02:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2015-08-10:/graphite-migrate-dashboards.html</id><summary type="html">&lt;p&gt;I just made a small script to migrate dashboards between two graphite servers.&lt;br&gt;
Couldn't find a similar one anywhere, so I thought I'd upload it.&lt;br&gt;
Note it's using &lt;a href="https://github.com/httprb/http"&gt;http&lt;/a&gt; for its HTTP calls. It looks real nice.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;old_server&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://old.server.com:1234&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;new_server&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://better.server.com:123&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;creds …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;I just made a small script to migrate dashboards between two graphite servers.&lt;br&gt;
Couldn't find a similar one anywhere, so I thought I'd upload it.&lt;br&gt;
Note it's using &lt;a href="https://github.com/httprb/http"&gt;http&lt;/a&gt; for its HTTP calls. It looks real nice.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;old_server&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://old.server.com:1234&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;new_server&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://better.server.com:123&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;creds&lt;/span&gt;&lt;span class="o"&gt;=[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;top&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;secret&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;json&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="no"&gt;HTTP&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basic_auth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;creds&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;pass&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;creds&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;board_names&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="no"&gt;JSON&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;old_server&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/dashboard/find/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;form&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dashboards&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;board_names&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;dat&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;old_server&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/dashboard/load/&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_s&lt;/span&gt;
    &lt;span class="n"&gt;state_str&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="no"&gt;JSON&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dat&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;state&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;to_json&lt;/span&gt; &lt;span class="c1"&gt;# :(&lt;/span&gt;
    &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;new_server&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/dashboard/save/&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;form&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;state_str&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;dat&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="FOSS"></category><category term="Graphite"></category><category term="Ruby"></category><category term="Scripts"></category></entry><entry><title>Sending mail on coredumps</title><link href="https://blog.backslasher.net/mail-coredumps.html" rel="alternate"></link><published>2015-07-23T09:00:00+02:00</published><updated>2015-07-23T09:00:00+02:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2015-07-23:/mail-coredumps.html</id><summary type="html">&lt;h2&gt;The Story&lt;/h2&gt;
&lt;p&gt;I recently found out that some of our backend code suffers from memory-related ceashes, namely &lt;code&gt;SIGSEGV&lt;/code&gt; (a program tries to access memory it doesn't own). My initial response was to install and enable &lt;a href="https://fedorahosted.org/abrt/"&gt;Abrt&lt;/a&gt;, which is a collection of utilities used in RHEL. Ubuntu has a similar tool …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;The Story&lt;/h2&gt;
&lt;p&gt;I recently found out that some of our backend code suffers from memory-related ceashes, namely &lt;code&gt;SIGSEGV&lt;/code&gt; (a program tries to access memory it doesn't own). My initial response was to install and enable &lt;a href="https://fedorahosted.org/abrt/"&gt;Abrt&lt;/a&gt;, which is a collection of utilities used in RHEL. Ubuntu has a similar tool called &lt;a href="https://wiki.ubuntu.com/Apport"&gt;Apport&lt;/a&gt;.&lt;br&gt;
I like this tool because it sends the root user an email after every coredump / kernel oops / kernel panic, with the coredump attached (configurable) and helpful information about the process's state (environment variables, open files, uid...).&lt;br&gt;
However, our issue was that our crashing processes are quite big (at least 2G of working memory) and might crash a lot, so taking coredumps for these processes was putting quite a strain on our servers' I/O. &lt;/p&gt;
&lt;h2&gt;A bit about Abrt&lt;/h2&gt;
&lt;p&gt;Abrt is built from multiple processes. The ones relevant to my issue were:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;abrt-hook-ccpp&lt;/code&gt;, registered as the kernel's &lt;code&gt;core_pattern&lt;/code&gt;, meaning it's invoked whenever a process should coredump. This utility creates a "dump" directory under &lt;code&gt;/var/spool/abrt&lt;/code&gt; and puts the coredump and process trivia there&lt;/li&gt;
&lt;li&gt;&lt;code&gt;abrtd&lt;/code&gt;, a deamon that monitors said directory, and whenever a new dump directory appears, it reads the data inside and takes action (sends emails, reports to RHEL's support API...)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;abrt-ccpp&lt;/code&gt;, a service that runs on startup and registers &lt;code&gt;abrt-hook-ccpp&lt;/code&gt; as the &lt;code&gt;core_pattern&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;abrt-ccpp&lt;/code&gt; is registered by modifying &lt;code&gt;/proc/sys/kernel/core_pattern&lt;/code&gt;, which usually specifies the filename to write core dumps to. However, when specifying a path that starts with &lt;code&gt;|&lt;/code&gt;, it's instead treated as a program to execute on coredumps. The program's &lt;code&gt;STDIN&lt;/code&gt; contains the coredump, and the offending process's &lt;code&gt;/proc/&lt;/code&gt; directory is kept alive so you can collect the interesting data.&lt;br&gt;
I couldn't utilize Abrt and skip the coredump - &lt;code&gt;abrt-hook-ccpp&lt;/code&gt; refused to skip creating the coredump, and &lt;code&gt;abrtd&lt;/code&gt; refused to process directories without the coredump. I had to emulate the behaviour on my own script.&lt;/p&gt;
&lt;h2&gt;The Script&lt;/h2&gt;
&lt;p&gt;This is my crude replacement - it's supposed to be called from &lt;code&gt;core_pattern&lt;/code&gt;, so I also wrote a "service" to register it.&lt;br&gt;
It's written in Python (and not Ruby, for instance) because Python comes installed on every server I encountered so far (because it powers Apt and Yum).&lt;br&gt;
It basically harvests all interesting data from the failing process and emails it. The current list is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;cgroup&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cmdline&lt;/strong&gt;: The commmand used to start the process, arguments and everything&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;executable&lt;/strong&gt;: Path to the binary file being executed&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;signal&lt;/strong&gt;: The signal causing the process to coredump&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;hostname&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;kernel&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pwd&lt;/strong&gt;: Current working directory for the faulting process&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;start_time&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;end_time&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;uid&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;username&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;dso_list&lt;/strong&gt;: Loaded dynamic libraries&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;environ&lt;/strong&gt;: Environment variables&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;limits&lt;/strong&gt;: Ulimits for the process&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;maps&lt;/strong&gt;: Allocated memory areas (including memory-mapped files)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;open_fds&lt;/strong&gt;: Open file descriptors (files, sockets, pipes...)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="c1"&gt;###########&lt;/span&gt;
&lt;span class="c1"&gt;# Nitz Abrt&lt;/span&gt;
&lt;span class="c1"&gt;###########&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# A crude emulation of the Abrt utility for monitoring and diagnosing segfaults&lt;/span&gt;
&lt;span class="c1"&gt;# Should be hooked from core_pattern - see your sysadmin&lt;/span&gt;
&lt;span class="c1"&gt;# http://blog.backslasher.net/mail-coredumps.html&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pwd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;syslog&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;usage&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
  &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Usage: &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="si"&gt;%c&lt;/span&gt;&lt;span class="s1"&gt; %p &lt;/span&gt;&lt;span class="si"&gt;%u&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="si"&gt;%g&lt;/span&gt;&lt;span class="s1"&gt; %t e&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;  number of signal causing dump&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
         &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%c&lt;/span&gt;&lt;span class="s1"&gt;  core file size soft resource limit of crashing process&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
         &lt;span class="s1"&gt;&amp;#39;%p  PID of dumped process&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
         &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%u&lt;/span&gt;&lt;span class="s1"&gt;  (numeric) real UID of dumped process&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
         &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%g&lt;/span&gt;&lt;span class="s1"&gt;  (numeric) real GID of dumped process&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
         &lt;span class="s1"&gt;&amp;#39;%t  time of dump, expressed as seconds since the Epoch, 1970-01-01 00:00:00 +0000 (UTC)&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
         &lt;span class="s1"&gt;&amp;#39;e   ignored&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
         &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
         &lt;span class="s1"&gt;&amp;#39;Should be called from core_pattern&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;usage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;uid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;dump_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;proc_path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/proc/&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;/&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;pid&lt;/span&gt;



&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;read_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;proc_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_symlink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;proc_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readlink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_start_time&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getctime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;proc_path&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_dso&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
  &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;proc_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;maps&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readlines&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;list_dir_symlink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;dirname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;proc_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;link_hash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readlink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;link_hash&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;link_hash&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;())])&lt;/span&gt;

&lt;span class="n"&gt;exe_path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;get_symlink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;exe&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;fnmatch&lt;/span&gt;
&lt;span class="n"&gt;blacklist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;*/php-fpm&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# These executables are uninteresting&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;blacklist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;fnmatch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fnmatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exe_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt; is blacklisted by pattern &amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;quot;. Ignoring&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exe_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;cgroup&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;read_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cgroup&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;cmdline&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;read_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cmdline&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\0&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;executable&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;exe_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;signal&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;hostname&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uname&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;kernel&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uname&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;pid&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;pwd&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;get_symlink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cwd&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;start_time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;get_start_time&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;end_time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;dump_time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;uid&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;uid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pwd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getpwuid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pw_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;dso_list&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;get_dso&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;environ&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;read_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;environ&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\0&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;limits&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;read_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;limits&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;maps&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;read_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;maps&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;open_fds&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;list_dir_symlink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fd&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;data_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;:&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;())])&lt;/span&gt;

&lt;span class="n"&gt;mail&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;To:root&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;Subject:nabrt crash &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exe_path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;data_str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt;
&lt;span class="n"&gt;pmail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mail&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-t&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;pmail&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mail&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;pmail&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Bonus - modifying &lt;code&gt;STDIN&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Because &lt;code&gt;abrt-hook-ccpp&lt;/code&gt; takes its coredump from &lt;code&gt;STDIN&lt;/code&gt;, I thought I could still utilize it by calling it with a modified STDIN that contains very little.
This idea failed because &lt;code&gt;abrtd&lt;/code&gt; wouldn't work with a "corrupted" coredump, but I think it's a novel idea and a cute script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/sh&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;head -c &lt;span class="k"&gt;$((&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="m"&gt;1024&lt;/span&gt;&lt;span class="k"&gt;))&lt;/span&gt; &amp;lt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;          &lt;span class="c1"&gt;# Only take the first 5 MB from STDIN and pass it along&lt;/span&gt;
&lt;span class="nb"&gt;exec&lt;/span&gt; /usr/libexec/abrt-hook-ccpp &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="c1"&gt;# Become original hook&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I initially tried closing &lt;code&gt;STDIN&lt;/code&gt; completely, but turns out the kernel is only keeping the &lt;code&gt;/proc&lt;/code&gt; directory of the faulting process when that stream is open - it thinks you're done collecting diagnostics when you close that stream.&lt;/p&gt;</content><category term="FOSS"></category><category term="Linux"></category><category term="Scripts"></category><category term="Python"></category><category term="Email"></category></entry><entry><title>Using RPMBuild - My Shortlist</title><link href="https://blog.backslasher.net/rpmbuild.html" rel="alternate"></link><published>2015-07-22T08:00:00+02:00</published><updated>2015-07-22T08:00:00+02:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2015-07-22:/rpmbuild.html</id><summary type="html">&lt;h2&gt;The Story&lt;/h2&gt;
&lt;p&gt;I was trying to tinker with &lt;a href="https://github.com/abrt/abrt"&gt;Abrt&lt;/a&gt;, a daemon in charge of collecting and diagnosing various crashes in RHEL (more on that in a different post).&lt;br&gt;
Because the crash hook is written in C (it was designed to be really quick), I couldn't use my usual method of …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;The Story&lt;/h2&gt;
&lt;p&gt;I was trying to tinker with &lt;a href="https://github.com/abrt/abrt"&gt;Abrt&lt;/a&gt;, a daemon in charge of collecting and diagnosing various crashes in RHEL (more on that in a different post).&lt;br&gt;
Because the crash hook is written in C (it was designed to be really quick), I couldn't use my usual method of editing the actual files and adding debug prints etc. I had to recompile the package from source, which proved to be a non-trivial task. The documentation I found was separated over several locations so I thought I'd list my way here:&lt;/p&gt;
&lt;h2&gt;My Solution&lt;/h2&gt;
&lt;p&gt;Related articles from CentOS wiki:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://wiki.centos.org/HowTos/SetupRpmBuildEnvironment"&gt;Build environment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://wiki.centos.org/HowTos/RebuildSRPM"&gt;Rebuilding Source RPM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;1. Create a build VM&lt;/h3&gt;
&lt;p&gt;Building is still a messy process. If you don't feel like cleaning up manually, you can just utilize a VM (I have a Vagrant config just for that). It should be running the same OS version you're building for (in my case, CentOS 6.6)&lt;/p&gt;
&lt;h3&gt;2. Install build tools&lt;/h3&gt;
&lt;p&gt;I always install the package group "development tools" in addition to "rpm-build", which contains a script for building RPMs.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo yum groupinstall &lt;span class="s1"&gt;&amp;#39;development tools&amp;#39;&lt;/span&gt;
sudo yum install rpm-build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Also create a build root directory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt; ! -d ~/rpmbuild &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; rm -r ~/rpmbuild &lt;span class="c1"&gt;# Delete dir if exists&lt;/span&gt;
mkdir -p ~/rpmbuild/&lt;span class="o"&gt;{&lt;/span&gt;BUILD,RPMS,SOURCES,SPECS,SRPMS&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;3. Grab source RPM&lt;/h3&gt;
&lt;p&gt;While it IS possible to build from real source (cloning the github repo for instance), I haven't had much luck with it. Even after generating the Makefile successfully, the build failed on some weird C syntax errors.&lt;br&gt;
For every binary RPM available from your repository, there should be a source RPM available as well - this one contains the source code and the metadata required to create the binary RPM. I use that RPM but to the source before building.&lt;br&gt;
While I couldn't activate a source repository (which is supposed to be a thing), I managed to hunt my source package down by modifying a URL I to match my OS/package. Maybe you'll have to do the same.&lt;br&gt;
Mine looks like:&lt;br&gt;
&lt;a href="http://vault.centos.org/6.6/os/Source/SPackages/abrt-2.0.8-26.el6.centos.src.rpm"&gt;http://vault.centos.org/6.6/os/Source/SPackages/abrt-2.0.8-26.el6.centos.src.rpm&lt;/a&gt;&lt;br&gt;
You need to download and install the downloaded package (&lt;strong&gt;without root&lt;/strong&gt;), which will deploy many files into your build root directory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;wget &lt;span class="s1"&gt;&amp;#39;http://vault.centos.org/6.6/os/Source/SPackages/abrt-2.0.8-26.el6.centos.src.rpm&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
rpm -iv *.rpm &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="c1"&gt;# NO SUDO&lt;/span&gt;
rm *.rpm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;4. Modify source&lt;/h3&gt;
&lt;p&gt;You can now inspect the files and modify whichever you want. Poke around in &lt;code&gt;~/rpmbuild/SOURCES&lt;/code&gt;. I usually create a git repo in that directory before tinkering so I can easily track my customizations and revert if I mess something up.&lt;/p&gt;
&lt;h3&gt;5. Build&lt;/h3&gt;
&lt;p&gt;We now use the rpmbuild script to build the package by pointing it to a &lt;code&gt;spec&lt;/code&gt; file. It &lt;em&gt;should&lt;/em&gt; handle everything and leave you with a collection of binary RPMs, but obviously it might fail.&lt;br&gt;
I had an issue that even though I got the CentOS source package and ran it on a CentOS machine, the version was tagged as &lt;code&gt;el6&lt;/code&gt; (Enterprise Linux 6), and not &lt;code&gt;el6.centos&lt;/code&gt;, which is the tag that all CentOS packages that come from the official repos use. This is important because the dependencies of packages are often hardcoded to this tag, so trying to install those RPMs will cause it to complain (e.g. that you have &lt;code&gt;abrt-libs.2.0.8-30.el6.centos&lt;/code&gt; and not &lt;code&gt;abrt-libs.2.0.8-30.el6&lt;/code&gt;).&lt;br&gt;
To solve it, you should append something like &lt;code&gt;--define 'dist .el6.centos'&lt;/code&gt; to your rpmbuild command.&lt;br&gt;
Mine looked like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;rpmbuild -ba ~/rpmbuild/SPECS/abrt.spec --define &lt;span class="s1"&gt;&amp;#39;dist .el6.centos&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;6. Install&lt;/h3&gt;
&lt;p&gt;After you're done building, you can now install the RPMS available at &lt;code&gt;~/rpmbuild/RPMS&lt;/code&gt;. You might want to install the original repository packages first, just to have it install all of the external prerequisites (e.g. &lt;code&gt;gdb&lt;/code&gt;) without bothering you. Use &lt;code&gt;sudo rpm -Uv&lt;/code&gt; when installing, so you'll get a report of the files being installed / replaced. That way you can make sure your modified binaries are there.&lt;/p&gt;</content><category term="FOSS"></category><category term="RPM"></category><category term="Linux"></category><category term="CentOS"></category><category term="RHEL"></category><category term="Scripts"></category><category term="Building"></category></entry><entry><title>Sending HBase metrics to Graphite using Python</title><link href="https://blog.backslasher.net/hbase-graphite-python.html" rel="alternate"></link><published>2015-07-15T08:00:00+02:00</published><updated>2015-07-15T08:00:00+02:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2015-07-15:/hbase-graphite-python.html</id><summary type="html">&lt;h2&gt;The story&lt;/h2&gt;
&lt;p&gt;Although HBase is a crucial component in our current stack, the monitoring for it was quite incomplete. We only had general "is it running?" monitoring, with some very application-specific tests ("make sure scanning this table doesn't take too long").&lt;br&gt;
By sending detailed metrics on our HBase tables/regions …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;The story&lt;/h2&gt;
&lt;p&gt;Although HBase is a crucial component in our current stack, the monitoring for it was quite incomplete. We only had general "is it running?" monitoring, with some very application-specific tests ("make sure scanning this table doesn't take too long").&lt;br&gt;
By sending detailed metrics on our HBase tables/regions/servers to Graphite, we don't only get to monitor these components - we can also detect trends ("Table ABC has 500 regions and yesterday it had 2", or "This region gets 30 times as many reads as the other ones. Is our key selection wise?") before they become critical issues. It also makes for very nice graphs.&lt;br&gt;
HBase has several connectors for monitoring available out of the box, but sadly none for Graphite. I saw some projects that can bridge between Graphite and HBase's JMX interface, but JMX seems really complicated and enterprise-y, and I found I can get everything from the HBase WebUI.&lt;br&gt;
I settled for a Python script that polls the local HBase server webUI every 5 seconds or so, parses the JSON that contains the JMX data, collects interesting (IMO) data and sends it to our StatsD server, which sums everything up and makes sure it gets to Graphite.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://blog.backslasher.net/images/hbase-graphite-python/graph.png"&gt;&lt;/p&gt;
&lt;h2&gt;The script&lt;/h2&gt;
&lt;p&gt;I decided to share this project as a GitHub repository.&lt;br&gt;
&lt;strong&gt;&lt;a href="https://github.com/BackSlasher/monitor-hbase"&gt;Check it out!&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
It includes setup instructions, example usage etc.&lt;/p&gt;
&lt;h2&gt;Interesting things&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;I managed to get JMX to work (mainly because I won't be defeated by some stupid monitoring framework), but the bother of having a Java project (compiling, installing Java, the JVM overhead...) really takes the fun out of it. It's also much easier to browse around in the HTTP/JSON endpoint.&lt;/li&gt;
&lt;li&gt;There are many more interesting metrics to be found in this API. I chose mine by stalking our resident HBase expert and noting what he's interested in when looking in the webUI.&lt;/li&gt;
&lt;li&gt;Formatting region names is a delicate process, as they're actually named after the first and last key they're serving, and there's no guarantee that keys are printable strings. I managed to get the names to look like the ones on the webUI, but I might have missed something. The relevant code looks something like this:&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;rawname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nameAsString&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;unicode-escape&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;tbl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;rawname&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;reg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;rawname&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rstrip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As always, please drop me a line if you find it useful!&lt;/p&gt;</content><category term="FOSS"></category><category term="PYthon"></category><category term="Scripts"></category><category term="HBase"></category><category term="Monitoring"></category><category term="Graphite"></category><category term="StatsD"></category></entry><entry><title>Preparing Certificate files for Nginx</title><link href="https://blog.backslasher.net/nginx-crt-script.html" rel="alternate"></link><published>2015-07-05T15:00:00+02:00</published><updated>2015-07-05T15:00:00+02:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2015-07-05:/nginx-crt-script.html</id><summary type="html">&lt;h3&gt;The Story&lt;/h3&gt;
&lt;p&gt;When installing SSL certificates for nginx, assuming you're using certificate hierarchy (and not a self-signed ceritificate), you're required to concatenate all of the certificate files (&lt;code&gt;*.crt&lt;/code&gt;) to a single file, starting from your site's certificate up to the root certificate.&lt;br&gt;
Today I got this bundle to prepare, courtesy …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;The Story&lt;/h3&gt;
&lt;p&gt;When installing SSL certificates for nginx, assuming you're using certificate hierarchy (and not a self-signed ceritificate), you're required to concatenate all of the certificate files (&lt;code&gt;*.crt&lt;/code&gt;) to a single file, starting from your site's certificate up to the root certificate.&lt;br&gt;
Today I got this bundle to prepare, courtesy of Comodo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;AddTrustExternalCARoot.crt
best_site.crt
COMODORSAAddTrustCA.crt
COMODORSADomainValidationSecureServerCA.crt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Which certificate should follow my site's? Unclear, &lt;a href="https://support.comodo.com/index.php?/Default/Knowledgebase/Article/View/620/0/which-is-root-which-is-intermediate"&gt;even from their documentation&lt;/a&gt;.&lt;br&gt;
I made this ruby script, which uses some certificate metadata to recognize the relationship between the provided certificates.&lt;/p&gt;
&lt;h3&gt;The Script&lt;/h3&gt;
&lt;p&gt;Provide the CRT file names as arguments, save the script's output as the new CRT. The proper order is printed to &lt;code&gt;STDERR&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;openssl&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;# Load and parse files&lt;/span&gt;
&lt;span class="n"&gt;crt_files&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="no"&gt;ARGV&lt;/span&gt; &lt;span class="c1"&gt;# Read all arguments as files&lt;/span&gt;
&lt;span class="n"&gt;crts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;crt_files&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;cert&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;OpenSSL&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;X509&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Certificate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cert&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extensions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;oid&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;authorityKeyIdentifier&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;sf&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;sf&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="sr"&gt;/^keyid/&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gsub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/^keyid:/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="ss"&gt;son&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cert&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extensions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;oid&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;subjectKeyIdentifier&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# Find the root, where parent is son&lt;/span&gt;
&lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;crts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:parent&lt;/span&gt;&lt;span class="o"&gt;]==&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:son&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;certs_sorted&lt;/span&gt;&lt;span class="o"&gt;=[]&lt;/span&gt;
&lt;span class="n"&gt;new_certs&lt;/span&gt;&lt;span class="o"&gt;=[&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# process new_certs until we&amp;#39;re out&lt;/span&gt;
&lt;span class="kp"&gt;loop&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;certs_sorted&lt;/span&gt;&lt;span class="o"&gt;|=&lt;/span&gt;&lt;span class="n"&gt;new_certs&lt;/span&gt;
  &lt;span class="n"&gt;new_new_certs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new_certs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;nc&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;crts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:parent&lt;/span&gt;&lt;span class="o"&gt;]==&lt;/span&gt;&lt;span class="n"&gt;nc&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:son&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uniq&lt;/span&gt;
  &lt;span class="n"&gt;filtered_certs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new_new_certs&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;new_certs&lt;/span&gt;
  &lt;span class="n"&gt;new_certs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filtered_certs&lt;/span&gt;
  &lt;span class="k"&gt;break&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;new_certs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;empty?&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;certs_sorted&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reverse!&lt;/span&gt; &lt;span class="c1"&gt;# Reverse&lt;/span&gt;

&lt;span class="no"&gt;STDERR&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Certificate order: &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;certs_sorted&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;, &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;certs_sorted&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Interesting bits&lt;/h3&gt;
&lt;p&gt;I'm not sure if the method I'm using to construct the certificate tree is standard SSL stuff or unique to Comodo, but I noticed the certificates reference their parents in the &lt;code&gt;authorityKeyIdentifier&lt;/code&gt; extension.&lt;br&gt;
Oddly enough, they don't reference the parent's serial number, but some other serial-like value that I find under &lt;code&gt;subjectKeyIdentifier&lt;/code&gt; of the parent certificate.&lt;br&gt;
The loop isn't very interesting, but still full of neat ruby stuff like limited flattening, array subtraction and other stuff that "decent" languages would never allow.&lt;/p&gt;</content><category term="FOSS"></category><category term="nginx"></category><category term="security"></category><category term="ssl"></category><category term="scripts"></category><category term="ruby"></category></entry><entry><title>Installing Growroot on CentOS</title><link href="https://blog.backslasher.net/growroot-centos.html" rel="alternate"></link><published>2015-07-02T09:00:00+02:00</published><updated>2015-07-02T09:00:00+02:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2015-07-02:/growroot-centos.html</id><summary type="html">&lt;h2&gt;The story&lt;/h2&gt;
&lt;p&gt;I currently work with CentOS on Amazon EC2. As I &lt;a href="https://blog.backslasher.net/resizing-aws-root-centos-hvm.html"&gt;previously written&lt;/a&gt;, The HVM version of the AMI is created with a partitioned disk, instead of having the filesystem written directly on the block device.&lt;br&gt;
Problem is, when creating a root device bigger than the default (8G), you …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;The story&lt;/h2&gt;
&lt;p&gt;I currently work with CentOS on Amazon EC2. As I &lt;a href="https://blog.backslasher.net/resizing-aws-root-centos-hvm.html"&gt;previously written&lt;/a&gt;, The HVM version of the AMI is created with a partitioned disk, instead of having the filesystem written directly on the block device.&lt;br&gt;
Problem is, when creating a root device bigger than the default (8G), you have to resize both the partition and the filesystem. While the filesystem can be resized online, the partition can't.&lt;br&gt;
The issue looks something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;lsblk
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Without a partition:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;NAME    MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
xvde    202:64   0   30G  0 disk /
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;With a partition:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;NAME    MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
xvda    202:0    0  30G  0 disk
└─xvda1 202:1    0   8G  0 part /
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The partition can actually be resized (as in deleted and recreated), but the updated partition table won't be available because the partition is in use (and you can't unmount the root partition).&lt;/p&gt;
&lt;h2&gt;The ugly solution&lt;/h2&gt;
&lt;p&gt;Before learning of a better way, I wrote this script. It checks if the root device is a partition, and if so whether it's filling up the parent disk.
If not, it deletes the root partition and recreates it to fill up the entire disk. Although it has been tested, I don't think it's a good idea to use it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; BEFORE PARTITION RESIZE
&lt;span class="nv"&gt;ROOT_DEVICE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;df / &lt;span class="p"&gt;|&lt;/span&gt; tail -n1 &lt;span class="p"&gt;|&lt;/span&gt; cut -f1 -d &lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;ROOT_TYPE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;lsblk &lt;span class="nv"&gt;$ROOT_DEVICE&lt;/span&gt; -no TYPE&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$ROOT_TYPE&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;part&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="c1"&gt;# find the parent disk&lt;/span&gt;
    &lt;span class="nv"&gt;ROOT_MAJMIN&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;lsblk &lt;span class="nv"&gt;$ROOT_DEVICE&lt;/span&gt; -no MAJ:MIN &lt;span class="p"&gt;|&lt;/span&gt; tr -d &lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;ROOT_SIZE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;cat /sys/dev/block/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;ROOT_MAJMIN&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/size&lt;span class="k"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;PARENT_SIZE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;cat /sys/dev/block/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;ROOT_MAJMIN&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/../size&lt;span class="k"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;ROOT_START&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;cat /sys/dev/block/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;ROOT_MAJMIN&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/start&lt;span class="k"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;PARENT_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;cat /sys/dev/block/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;ROOT_MAJMIN&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/../uevent &lt;span class="p"&gt;|&lt;/span&gt; perl -ne &lt;span class="s1"&gt;&amp;#39;print $1,$/ if /^DEVNAME=(.+)$/&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# Check if the same size&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt; &lt;span class="nv"&gt;$PARENT_SIZE&lt;/span&gt; - &lt;span class="nv"&gt;$ROOT_START&lt;/span&gt; &amp;gt; &lt;span class="nv"&gt;$ROOT_SIZE&lt;/span&gt; &lt;span class="o"&gt;))&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
        &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Recreating partition &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;ROOT_DEVICE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; on /dev/&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PARENT_NAME&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, starting in &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;ROOT_START&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
        &lt;span class="nb"&gt;echo&lt;/span&gt; -e &lt;span class="s2"&gt;&amp;quot;u\np\nd\nn\np\n1\n&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;ROOT_START&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;\n\na\n1\np\nw\n&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; fdisk /dev/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PARENT_NAME&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        reboot &lt;span class="c1"&gt;# &amp;lt;-- REBOOTING HERE&lt;/span&gt;
        sleep &lt;span class="m"&gt;60&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Partition &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;ROOT_DEVICE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is fine&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;ROOT_DEVICE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is not a partition - its &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;ROOT_TYPE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; AFTER PARTITION RESIZE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And I have a similar one for the filesystem:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;ROOT_DEVICE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;df / &lt;span class="p"&gt;|&lt;/span&gt; tail -n1 &lt;span class="p"&gt;|&lt;/span&gt; cut -f1 -d &lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;ROOT_DEVICE_SIZE_B&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;blockdev --getsize64 &lt;span class="nv"&gt;$ROOT_DEVICE&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;ROOT_FS_BLOCK_COUNT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;tune2fs -l &lt;span class="nv"&gt;$ROOT_DEVICE&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; perl -ne &lt;span class="s1"&gt;&amp;#39;print $1,$/ if /Block count:\s+(\d+)$/&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;ROOT_FS_BLOCK_SIZE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;tune2fs -l &lt;span class="nv"&gt;$ROOT_DEVICE&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; perl -ne &lt;span class="s1"&gt;&amp;#39;print $1,$/ if /Block size:\s+(\d+)$/&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# If the root FS is smaller in at least one block size than the root device size&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$ROOT_FS_BLOCK_COUNT&lt;/span&gt; +1 &lt;span class="o"&gt;)&lt;/span&gt; * &lt;span class="nv"&gt;$ROOT_FS_BLOCK_SIZE&lt;/span&gt; &amp;lt; &lt;span class="nv"&gt;$ROOT_DEVICE_SIZE_B&lt;/span&gt; &lt;span class="o"&gt;))&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; resizing filesystem
    resize2fs &lt;span class="nv"&gt;$ROOT_DEVICE&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;The proper solution&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Update 21.04.16:&lt;/strong&gt; Thanks to Trevor's tip, I switched from &lt;code&gt;perl&lt;/code&gt; to &lt;code&gt;sed&lt;/code&gt;, saving us the need of installing a package (a big win for Linux sysadmins).&lt;/p&gt;
&lt;p&gt;Just before deploying my script, I stumbled upon &lt;a href="http://rpm.pbone.net/index.php3/stat/4/idpl/25071492/dir/redhat_el_6/com/dracut-modules-growroot-0.20-2.el6.noarch.rpm.html"&gt;dracut-modules-growroot&lt;/a&gt;, which (like most things cloud) was imported from &lt;a href="https://launchpad.net/ubuntu/utopic/+package/cloud-initramfs-growroot"&gt;Ubuntu&lt;/a&gt;.&lt;br&gt;
It's available via EPEL, and when installed to the initramfs, it enlarges the root partition (if needed) before actually mounting it. This saves you the reboot, because when in the initramfs stage, the root partition isn't really mounted, so it can be modified easily.&lt;br&gt;
The steps I use in my image are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Install all available updates&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;yum update -y
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install the EPEL helper package&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;yum install -y epel-release
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install &lt;code&gt;cloud-init&lt;/code&gt; and &lt;code&gt;dracut-modules-growroot&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;yum install -y cloud-init dracut-modules-growroot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This has to be done after installing &lt;code&gt;epel-release&lt;/code&gt;, because otherwise YUM won't look in the EPEL repository, where dracut-modules-growroot is available.&lt;br&gt;
Cloud Init is useful in running startup scripts, but it also has an &lt;a href="https://cloudinit.readthedocs.org/en/latest/topics/modules.html?highlight=growpart#module-cloudinit.config.cc_growpart"&gt;enabled-by-default module&lt;/a&gt; (great documentation, right?) that resizes the root filesystem (&lt;code&gt;resize2fs&lt;/code&gt;-like) if its block device is bigger.&lt;br&gt;
You can avoid installing it, but then you'll have to resize the filesystem on your own (see my second ugly script).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rebuild &lt;strong&gt;all&lt;/strong&gt; initramfs images.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;rpm -qa kernel &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s1"&gt;&amp;#39;s/^kernel-//&amp;#39;&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt; xargs -I &lt;span class="o"&gt;{}&lt;/span&gt; dracut -f /boot/initramfs-&lt;span class="o"&gt;{}&lt;/span&gt;.img &lt;span class="o"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is very important. Without rebuilding the initramfs images, the module won't be available and nothing will get done.&lt;br&gt;
Also note that I'm explicitly rebuilding an image for every kernel package installed - this is because we might be running kernel A, and just installed newer kernel B with &lt;code&gt;yum update -y&lt;/code&gt;, so if I only used &lt;code&gt;dracut -f&lt;/code&gt; only kernel A's image will be rebuilt, and next time we'll boot from kernel B's image, that doesn't have the module.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The full script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;yum update -y
yum install -y epel-release
yum install -y cloud-init dracut-modules-growroot
rpm -qa kernel &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s1"&gt;&amp;#39;s/^kernel-//&amp;#39;&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt; xargs -I &lt;span class="o"&gt;{}&lt;/span&gt; dracut -f /boot/initramfs-&lt;span class="o"&gt;{}&lt;/span&gt;.img &lt;span class="o"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Troubleshooting&lt;/h2&gt;
&lt;p&gt;You can easily compare the sizes of your root block device, it's parent and the root filesystem itself by running:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; lsblk&lt;span class="p"&gt;;&lt;/span&gt;lsblk
&lt;span class="nb"&gt;echo&lt;/span&gt; df&lt;span class="p"&gt;;&lt;/span&gt; df -h /
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A successful result should look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;lsblk&lt;/span&gt;
&lt;span class="err"&gt;NAME    MAJ:MIN RM SIZE RO TYPE MOUNTPOINT&lt;/span&gt;
&lt;span class="err"&gt;xvda    202:0    0  30G  0 disk&lt;/span&gt;
&lt;span class="err"&gt;└─xvda1 202:1    0  30G  0 part /&lt;/span&gt;
&lt;span class="err"&gt;df&lt;/span&gt;
&lt;span class="err"&gt;Filesystem      Size  Used Avail Use% Mounted on&lt;/span&gt;
&lt;span class="err"&gt;/dev/xvda1       30G  963M   27G   4% /&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If the script completes successfully but the partition isn't magically resized, you can use this to search for growroot's files in the initrd image that was used to boot:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo lsinitrd &lt;span class="p"&gt;|&lt;/span&gt; grep grow
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For me, it looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;-rwxr-xr-x   1 root     root          133 Nov 22  2013 cmdline/99growroot-dummy.sh
-rwxr-xr-x   1 root     root         2167 Nov 22  2013 pre-mount/99growroot.sh
-rwxr-xr-x   1 root     root        16069 Nov 22  2013 usr/bin/growpart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If the files are there but still no magic, try fishing in &lt;code&gt;/var/log/{messages,secure}&lt;/code&gt; or &lt;code&gt;dmesg&lt;/code&gt;. I always had everything working if the files were actually there.&lt;/p&gt;</content><category term="FOSS"></category><category term="Linux"></category><category term="Virtualization"></category><category term="AWS"></category><category term="Disk"></category><category term="CentOS"></category></entry><entry><title>Chroot Snippet</title><link href="https://blog.backslasher.net/chroot.html" rel="alternate"></link><published>2015-06-08T11:30:00+02:00</published><updated>2015-06-08T11:30:00+02:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2015-06-08:/chroot.html</id><summary type="html">&lt;h2&gt;The Story&lt;/h2&gt;
&lt;p&gt;Some time ago, my PC wouldn't boot.&lt;br&gt;
This was my fault, as I needed to resize some partition, and resizing in Linux really means deleting the partition and creating a new one in the same place. I forgot to assign the partition the same UUID, which caused Ubuntu …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;The Story&lt;/h2&gt;
&lt;p&gt;Some time ago, my PC wouldn't boot.&lt;br&gt;
This was my fault, as I needed to resize some partition, and resizing in Linux really means deleting the partition and creating a new one in the same place. I forgot to assign the partition the same UUID, which caused Ubuntu to resent it.&lt;br&gt;
I was lazy and tried using automated boot fixers, which made things worse, and eventually had to go and operate manually.&lt;br&gt;
During the surgery, I learnt about chrooting and found this nifty snippet (from &lt;a href="http://ubuntuforums.org/showthread.php?t=2264947"&gt;here&lt;/a&gt;).
Since I've been using it a lot since then, I thought I'd upload it.&lt;/p&gt;
&lt;h2&gt;The script&lt;/h2&gt;
&lt;p&gt;Note that I'm first unlocking LUKS (disk encryption) and setting up the LVM.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo su
cryptsetup --type luks open /dev/sda3 sda3_crypt
vgchange -a y
mkdir /mnt/system
mount /dev/mapper/ubuntu--vg-root /mnt/system
&lt;span class="k"&gt;for&lt;/span&gt; i in /dev/pts /dev /proc /sys&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; mount -B &lt;span class="nv"&gt;$i&lt;/span&gt; /mnt/system&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt;
chroot /mnt/system
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;The Story pt.2&lt;/h2&gt;
&lt;p&gt;Eventaully, I figured out that &lt;code&gt;/etc/crypttab&lt;/code&gt;, used by Ubuntu's GRUB scripts to unlock LUKS disks, doesn't support quoting. Unlike everywhere else, where UUIDs are referenced like &lt;code&gt;UUID="da30f935-a684-4415-b6ca-e991cbcc52dc"&lt;/code&gt;, this file has to look like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sda3_crypt &lt;span class="nv"&gt;UUID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;da30f935-a684-4415-b6ca-e991cbcc52dc none luks
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So annoying.&lt;/p&gt;</content><category term="FOSS"></category><category term="Troubleshooting"></category><category term="Linux"></category></entry><entry><title>Managing EC2 reservations with Scripts</title><link href="https://blog.backslasher.net/ec2-reservations.html" rel="alternate"></link><published>2015-06-07T16:00:00+02:00</published><updated>2015-06-07T16:00:00+02:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2015-06-07:/ec2-reservations.html</id><summary type="html">&lt;h2&gt;The Story&lt;/h2&gt;
&lt;p&gt;Since we tend to hold our AWS EC2 VMs for a long time, we usually reserve them.&lt;br&gt;
Reservations are like pre-buying instances - you pay AWS ahead of time for (let's say) a year, and get a discounted price.&lt;br&gt;
The insterestng thing about EC2 reservations is that they aren't …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;The Story&lt;/h2&gt;
&lt;p&gt;Since we tend to hold our AWS EC2 VMs for a long time, we usually reserve them.&lt;br&gt;
Reservations are like pre-buying instances - you pay AWS ahead of time for (let's say) a year, and get a discounted price.&lt;br&gt;
The insterestng thing about EC2 reservations is that they aren't tied to a specific instance.&lt;br&gt;
&lt;strong&gt;Pro:&lt;/strong&gt; You can terminate one instance and create another one of the same type, and still enjoy the discounted price of the reservation.&lt;br&gt;
&lt;strong&gt;Con:&lt;/strong&gt; There is no way to tell whether a specific instance is reserved or not. This means that when resizing/moving a reserved instance, locating and modifying the reservation is up to you.  &lt;/p&gt;
&lt;p&gt;To combat this issue, I made the following changes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;All instances have a tag named "Reserve", which contains "True" or "False" (depending on whether you want to reserve that instance, because it's going to stay with you for a while).&lt;/li&gt;
&lt;li&gt;I run a script once in a while, which checks whether our reservations match our actual instances. I buy/modify our reservations accordingly.&lt;/li&gt;
&lt;li&gt;I'm planning to automate the purchase of reservations using another script. Since this involves spending money, I'm more hesitant to automate it.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;The script&lt;/h2&gt;
&lt;p&gt;This script outputs a csv/yaml report of instances and reservations, grouped by regions, availability zones, instance types, VPC and OS type (we only have Windows and Linux instances).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/usr/bin/env ruby&lt;/span&gt;

&lt;span class="c1"&gt;# Monkeypatching&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Array&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;to_h&lt;/span&gt;
    &lt;span class="no"&gt;Hash&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;to_bool&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/(true|t|yes|y|1)$/i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;empty?&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/(false|f|no|n|0)$/i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="no"&gt;ArgumentError&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;invalid value for Boolean: &lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;optparse&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="ss"&gt;:&amp;#39;csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="no"&gt;OptionParser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;banner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Usage: find-reservations.rb [options]&amp;quot;&lt;/span&gt;
  &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-fFORMAT&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;--format=FORMAT&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Format (csv/yaml)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:format&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse!&lt;/span&gt;

&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;aws-sdk-core&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;instances&lt;/span&gt;&lt;span class="o"&gt;=[]&lt;/span&gt;
&lt;span class="n"&gt;reservations&lt;/span&gt;&lt;span class="o"&gt;=[]&lt;/span&gt;

&lt;span class="n"&gt;cp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="no"&gt;Aws&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;EC2&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="ss"&gt;region&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;us-east-1&amp;#39;&lt;/span&gt;
&lt;span class="c1"&gt;# Go over all regions&lt;/span&gt;
&lt;span class="n"&gt;cp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;describe_regions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;regions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;region_name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="no"&gt;Aws&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;EC2&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="ss"&gt;region&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;
  &lt;span class="n"&gt;reservations&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;describe_reserved_instances&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_hash&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:reserved_instances&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:state&lt;/span&gt;&lt;span class="o"&gt;]=~&lt;/span&gt;&lt;span class="sr"&gt;/active|payment-pending/&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;instances&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;describe_instances&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_hash&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:reservations&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:instances&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flatten&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:state&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="ss"&gt;:code&lt;/span&gt;&lt;span class="o"&gt;]==&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# Only add instances with &amp;quot;Reserve=True&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;instances&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;instances&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:tags&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;any?&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:key&lt;/span&gt;&lt;span class="o"&gt;]==&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Reserve&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:value&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;to_bool&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;

&lt;span class="n"&gt;res_group&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;reservations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group_by&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;|[&lt;/span&gt;
  &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:availability_zone&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;#region&lt;/span&gt;
  &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:instance_type&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;#instance type&lt;/span&gt;
  &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:product_description&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;include?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Amazon VPC&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="c1"&gt;# is_vpc&lt;/span&gt;
  &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:product_description&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="sr"&gt;/Linux/i&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;nil?&lt;/span&gt; &lt;span class="c1"&gt;#is_windows&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;|[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;
  &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:instance_count&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="ss"&gt;:+&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="c1"&gt;# current instances&lt;/span&gt;
  &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:end&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="c1"&gt;# next expiration&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_h&lt;/span&gt;
&lt;span class="n"&gt;ins_group&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;instances&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group_by&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;|[&lt;/span&gt;
  &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:placement&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="ss"&gt;:availability_zone&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:instance_type&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:vpc_id&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;nil?&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:platform&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;to_s&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="sr"&gt;/windows/i&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;nil?&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;|[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_h&lt;/span&gt;

&lt;span class="n"&gt;aggr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ins_group&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;res_group&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;is&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ins_group&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;rs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res_group&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,{&lt;/span&gt;&lt;span class="ss"&gt;:instances&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;is&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="ss"&gt;:reservations&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;rs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="ss"&gt;:surplus&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rs&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;is&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="ss"&gt;:next_expiration&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res_group&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;]||[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;?&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;?&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;tbl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;aggr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;region&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="ss"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="ss"&gt;is_vpc&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="ss"&gt;is_windows&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# Sort table&lt;/span&gt;
&lt;span class="n"&gt;tbl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort_by!&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collect&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_s&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;

&lt;span class="c1"&gt;# Export&lt;/span&gt;
&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:format&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;downcase&lt;/span&gt;
  &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;yaml&amp;#39;&lt;/span&gt;
    &lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;yaml&amp;#39;&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;tbl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_yaml&lt;/span&gt;
  &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;csv&amp;#39;&lt;/span&gt;
    &lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;csv&amp;#39;&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tbl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_csv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;tbl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_csv&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bad format&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The output looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;eu-west-1c,c3.large,false,false,3,3,0,2015-06-23 12:47:31 UTC
us-east-1a,c3.2xlarge,false,false,1,1,0,2015-11-04 15:41:34 UTC
us-east-1a,c3.2xlarge,true,false,3,1,-2,2015-09-30 13:10:08 UTC
us-east-1b,c3.large,true,false,10,10,0,2016-01-27 14:03:56 UTC
us-east-1b,m3.large,true,false,5,0,-5,?
us-west-2a,c3.2xlarge,true,false,3,2,-1,2016-01-26 14:07:23 UTC
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Interesting things&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;I monkey patched &lt;code&gt;Array#to_h&lt;/code&gt; (which is present in ruby 2), and &lt;code&gt;String#to_bool&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Note the way I'm collecting data from all regions. I first create a client on &lt;code&gt;us-east-1&lt;/code&gt; only to collect the regions using &lt;code&gt;describe_regions.regions.map{|m|m.region_name}&lt;/code&gt;, and for each region I'm creating a new client and collecting the data from that region.&lt;/li&gt;
&lt;li&gt;When sorting the table, I can't sort by the actual values (e.g. &lt;code&gt;tbl.sort_by!{|r|r.values}&lt;/code&gt;), because I have boolean values and booleans can't be compared (try running &lt;code&gt;false&amp;gt;true&lt;/code&gt; and see what happens), so I used the string equivalent of all values (&lt;code&gt;tbl.sort_by!{|r|r.values.collect{|v|v.to_s}}&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;</content><category term="FOSS"></category><category term="AWS"></category><category term="EC2"></category><category term="Scripts"></category><category term="Ruby"></category></entry><entry><title>Appending Newline to File Ends with Ruby</title><link href="https://blog.backslasher.net/ruby-newline-file.html" rel="alternate"></link><published>2015-05-13T10:00:00+02:00</published><updated>2015-05-13T10:00:00+02:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2015-05-13:/ruby-newline-file.html</id><summary type="html">&lt;p&gt;I recently took over managing some config files from my dev colleagues.
I was extremely annoyed to be reminded that Notepad (Windows' text editor) does 2 major Unix-incompatible things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;CRLF &lt;a href="http://en.wikipedia.org/wiki/Newline"&gt;line ending&lt;/a&gt; (&lt;code&gt;\r\n&lt;/code&gt; and not &lt;code&gt;\n&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;No newline at the end of file, which is something of a nicety …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;I recently took over managing some config files from my dev colleagues.
I was extremely annoyed to be reminded that Notepad (Windows' text editor) does 2 major Unix-incompatible things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;CRLF &lt;a href="http://en.wikipedia.org/wiki/Newline"&gt;line ending&lt;/a&gt; (&lt;code&gt;\r\n&lt;/code&gt; and not &lt;code&gt;\n&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;No newline at the end of file, which is something of a nicety to help process files (allows you to assume each line ends with &lt;code&gt;\n&lt;/code&gt;).&lt;br&gt;
  We can see &lt;code&gt;vim&lt;/code&gt; complaigining about it:&lt;br&gt;
&lt;img alt="" src="https://blog.backslasher.net/images/ruby-newline-file/noeol-vim.png"&gt;&lt;br&gt;
  And &lt;code&gt;git&lt;/code&gt; too:&lt;br&gt;
&lt;img alt="" src="https://blog.backslasher.net/images/ruby-newline-file/noeol-git.png"&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Issue 1 is easily solved with &lt;code&gt;dos2unix&lt;/code&gt;, like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;find -not -path &lt;span class="s1"&gt;&amp;#39;*/.git/*&amp;#39;&lt;/span&gt; -type f &lt;span class="p"&gt;|&lt;/span&gt; xargs dos2unix
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Issue 2 is a little bit more challenging, and I wrote this ruby oneliner for it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="no"&gt;Dir&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;glob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;**/**&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;file?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;|!&lt;/span&gt;&lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="sr"&gt;/\n$/&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Works nicely.&lt;/p&gt;</content><category term="FOSS"></category><category term="Script"></category><category term="Ruby"></category><category term="Windows"></category><category term="Linux"></category></entry><entry><title>Init file for HBase Thrift Server</title><link href="https://blog.backslasher.net/thrift-init.html" rel="alternate"></link><published>2015-04-29T12:00:00+02:00</published><updated>2015-04-29T12:00:00+02:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2015-04-29:/thrift-init.html</id><summary type="html">&lt;p&gt;As part of our HBase setup, we run &lt;a href="http://wiki.apache.org/hadoop/Hbase/ThriftApi"&gt;Thrift servers&lt;/a&gt;. This is pretty simple, except for the init files.&lt;br&gt;
Since we're running Thrift standalone (and not as part of a full HBase server), I couldn't find a perfect fit from googling.&lt;br&gt;
I eventually settled for &lt;a href="https://github.com/chrisglass/puppet-hadoop-modules/blob/master/modules/adobe-hbase/templates/service/hbase-thrift.erb"&gt;this puppet template&lt;/a&gt;, but it …&lt;/p&gt;</summary><content type="html">&lt;p&gt;As part of our HBase setup, we run &lt;a href="http://wiki.apache.org/hadoop/Hbase/ThriftApi"&gt;Thrift servers&lt;/a&gt;. This is pretty simple, except for the init files.&lt;br&gt;
Since we're running Thrift standalone (and not as part of a full HBase server), I couldn't find a perfect fit from googling.&lt;br&gt;
I eventually settled for &lt;a href="https://github.com/chrisglass/puppet-hadoop-modules/blob/master/modules/adobe-hbase/templates/service/hbase-thrift.erb"&gt;this puppet template&lt;/a&gt;, but it had a big deficiency - no support for &lt;code&gt;status&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;A tiny bit about init&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Init"&gt;SysVInit&lt;/a&gt; is the old-school way of managing services in Linux (and Unix).&lt;br&gt;
Every service has an "init script", located in &lt;code&gt;/etc/init.d/SERVICENAME&lt;/code&gt;, which is in charge of controlling the sevice.&lt;br&gt;
It is called by using &lt;code&gt;service SERVICENAME ACTION&lt;/code&gt;, where every script is free to define its own actions, but the standard ones are &lt;code&gt;start&lt;/code&gt;,&lt;code&gt;stop&lt;/code&gt;,&lt;code&gt;restart&lt;/code&gt;,&lt;code&gt;status&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Why &lt;code&gt;status&lt;/code&gt; matters&lt;/h3&gt;
&lt;p&gt;Using &lt;code&gt;status&lt;/code&gt; is the best way of checking whether a service is alive.&lt;br&gt;
It could be a sysadmin checking for issues, Nagios making sure the service is OK, or a configuration management tool checking whether it should start the service.&lt;br&gt;
Just for fun, here is how Chef uses it. I quote from the holy repo of &lt;a href="https://github.com/chef/chef"&gt;Chef&lt;/a&gt;, file &lt;code&gt;lib/chef/provider/service/simple.rb&lt;/code&gt;, verse 130:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;shell_out&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;default_init_command&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; status&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exitstatus&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="vi"&gt;@current_resource&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;running&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
  &lt;span class="no"&gt;Chef&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="vi"&gt;@new_resource&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is running&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So as long as &lt;code&gt;service SERVICENAME status&lt;/code&gt; exits successfully (exit code 0), Chef thinks the service is running.&lt;/p&gt;
&lt;h3&gt;Implementing &lt;code&gt;status&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Since I'm using CentOS 6.5, my common service functions file (&lt;code&gt;/etc/init.d/functions&lt;/code&gt;) is old, so it's not creating new pids (&lt;code&gt;--pidfile&lt;/code&gt; only checks for an existing file, not creating a new one) and it can't rename the process (I've heard of a magical &lt;code&gt;--name&lt;/code&gt; parameter, but can't find it in my file).&lt;br&gt;
Because of that, I can't find the process after starting it, so I can't make sure it's still alive.
After digging around in the HBase code, I found out that HBase keeps PID files.&lt;br&gt;
&lt;code&gt;bin/hbase-daemon.sh&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;(&lt;/span&gt;start&lt;span class="o"&gt;)&lt;/span&gt;
  mkdir -p &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$HBASE_PID_DIR&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -f &lt;span class="nv"&gt;$pid&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;kill&lt;/span&gt; -0 &lt;span class="sb"&gt;`&lt;/span&gt;cat &lt;span class="nv"&gt;$pid&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt; &amp;gt; /dev/null &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$command&lt;/span&gt; running as process &lt;span class="sb"&gt;`&lt;/span&gt;cat &lt;span class="nv"&gt;$pid&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;.  Stop it first.
    &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
  &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;All I needed was to use this pidfile in my init script. I accomplished this by replicating the pidfile-building logic in my init script.&lt;br&gt;
It looks something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;HBASE_PID_DIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/var/run/
&lt;span class="nv"&gt;HBASE_IDENT_STRING&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$HOSTNAME&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;command&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;thrift
&lt;span class="nv"&gt;pid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$HBASE_PID_DIR&lt;/span&gt;/hbase-&lt;span class="nv"&gt;$HBASE_IDENT_STRING&lt;/span&gt;-&lt;span class="nv"&gt;$command&lt;/span&gt;.pid
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now I can implement the status check like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;status&lt;span class="o"&gt;)&lt;/span&gt;
  status -p &lt;span class="nv"&gt;$pid&lt;/span&gt; java
  &lt;span class="nv"&gt;RETVAL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$?&lt;/span&gt;
&lt;span class="p"&gt;;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that the process name is &lt;code&gt;java&lt;/code&gt;. This is imperfect because the thrift process might die and another java process might take its place, but I don't find it too much of a risk for now. I might modify it later.&lt;/p&gt;
&lt;h3&gt;The Result&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://gist.github.com/BackSlasher/7510adb69c73dbee7894"&gt;The full file&lt;/a&gt; is stored as a gist, but be warned - it's a Chef template!&lt;br&gt;
You can probably manually fill it out though.&lt;/p&gt;</content><category term="FOSS"></category><category term="Bash"></category><category term="HBase"></category><category term="Linux"></category><category term="SysVInit"></category></entry><entry><title>Scripting YUM provides search using Python</title><link href="https://blog.backslasher.net/yum-python-provides.html" rel="alternate"></link><published>2015-04-14T16:50:00+02:00</published><updated>2015-04-14T16:50:00+02:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2015-04-14:/yum-python-provides.html</id><summary type="html">&lt;h3&gt;Update 24-06-15&lt;/h3&gt;
&lt;p&gt;Thanks to &lt;a href="http://yum.baseurl.org/wiki/5MinuteExamples"&gt;this page&lt;/a&gt;, I fixed my script. It no longer requires root privillages. I also muted informational messages because they were not very informational.&lt;/p&gt;
&lt;h2&gt;The Story&lt;/h2&gt;
&lt;p&gt;Today I had a list of files (nagios check scripts), and I wanted to check for every file if there's a …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Update 24-06-15&lt;/h3&gt;
&lt;p&gt;Thanks to &lt;a href="http://yum.baseurl.org/wiki/5MinuteExamples"&gt;this page&lt;/a&gt;, I fixed my script. It no longer requires root privillages. I also muted informational messages because they were not very informational.&lt;/p&gt;
&lt;h2&gt;The Story&lt;/h2&gt;
&lt;p&gt;Today I had a list of files (nagios check scripts), and I wanted to check for every file if there's a package containing it (I'm a big fan of getting files from the repo rather than downloading manually).
Although YUM provides a way to search for packages containing a file pattern, like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;yum provides &lt;span class="s1"&gt;&amp;#39;*/check_mailq&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The output is quite complicated to parse:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Loaded plugins: fastestmirror, presto
Loading mirror speeds from cached hostfile
 * base: mirrors.seas.harvard.edu
 * epel: mirror.symnds.com
 * extras: mirror.ash.fastserv.com
 * updates: mirror.cogentco.com
private-chef-1.4.15-1.el6.x86_64 : The full stack of private-chef
Repo        : chef-stable
Matched from:
Filename    : /opt/opscode/embedded/nagios/libexec/check_mailq



private-chef-1.4.14-1.el6.x86_64 : The full stack of private-chef
Repo        : chef-stable
Matched from:
Filename    : /opt/opscode/embedded/nagios/libexec/check_mailq



nagios-plugins-mailq-1.4.16-10.el6.x86_64 : Nagios Plugin - check_mailq
Repo        : epel
Matched from:
Filename    : /usr/lib64/nagios/plugins/check_mailq
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The first part is irrelevant (info messages that should IMO go to &lt;code&gt;stderr&lt;/code&gt;), and every entry in the actual result contains multiple lines... bah.
Luckily, YUM is completely written in python so we can copy its behaviour with a custom script.&lt;/p&gt;
&lt;h2&gt;The Solution&lt;/h2&gt;
&lt;p&gt;I used &lt;a href="http://mo.morsi.org/blog/node/220"&gt;this post&lt;/a&gt; to help me with basic discovery. The rest is my work.&lt;br&gt;
This script requires root (or &lt;code&gt;sudo&lt;/code&gt;). I didn't bother finding out how to run it otherwise.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;yum&lt;/span&gt;
&lt;span class="n"&gt;yb&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;yum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;YumBase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;yb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setCacheDir&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;disable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WARNING&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Mute loggers&lt;/span&gt;
&lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;YOUR&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;file&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;go&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;here&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;yb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;searchPackageProvides&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;*/&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;# ,(&amp;#39;*/&amp;#39;+f+&amp;#39;.*&amp;#39;)&lt;/span&gt;
  &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The following part varies by your objective. I wanted to list the packages required for each file, and also a sorted list of all relevant packages:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;**No matches:&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;**Matches:&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;**Duplicates:&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;**Packages to be installed:&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;pkgs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;sublist&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;pkgs&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sublist&lt;/span&gt;&lt;span class="p"&gt;])))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The result is quite nice:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;No&lt;/span&gt; &lt;span class="n"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;check_sockets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;
&lt;span class="n"&gt;check_threads&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;
&lt;span class="n"&gt;check_exit_code&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pl&lt;/span&gt;
&lt;span class="n"&gt;check_duplicate_process&lt;/span&gt;

&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;Matches&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;check_nagios&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nagios-plugins-nagios&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;check_breeze&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nagios-plugins-breeze&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;check_mrtgtraf&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nagios-plugins-mrtgtraf&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;check_ldap&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;check-mk&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;check-mk-docs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;nagios-plugins-ldap&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;check_ircd&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nagios-plugins-ircd&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;Duplicates&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;check_ldap&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;check-mk&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;check-mk-docs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;nagios-plugins-ldap&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;check_dns&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nagios-plugins-dns&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;check-mk&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;check-mk-docs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;check_smtp&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;check-mk&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;nagios-plugins-smtp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;check-mk-docs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;Packages&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;installed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;check-mk&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;check-mk-docs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;nagios-plugins-breeze&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;nagios-plugins-dns&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;nagios-plugins-ircd&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;nagios-plugins-ldap&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;nagios-plugins-mrtgtraf&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;nagios-plugins-nagios&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;nagios-plugins-smtp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Looks good.&lt;/p&gt;</content><category term="FOSS"></category><category term="Python"></category><category term="Scripts"></category><category term="CentOS"></category><category term="Linux"></category></entry><entry><title>Batch fitting pictures in ImageMagick</title><link href="https://blog.backslasher.net/batch-fitting-imagemagick.html" rel="alternate"></link><published>2015-04-09T12:00:00+02:00</published><updated>2015-04-09T12:00:00+02:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2015-04-09:/batch-fitting-imagemagick.html</id><summary type="html">&lt;p&gt;I recently bought a digital frame for some of my more elderly relatives.&lt;br&gt;
The frame's firmware was quite retarded, and I had 2 issues with it:&lt;/p&gt;
&lt;h3&gt;1. Pictures were always displayed in order&lt;/h3&gt;
&lt;p&gt;This might be a "not a bug but a feature" type of situation, but still.&lt;br&gt;
I solved …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I recently bought a digital frame for some of my more elderly relatives.&lt;br&gt;
The frame's firmware was quite retarded, and I had 2 issues with it:&lt;/p&gt;
&lt;h3&gt;1. Pictures were always displayed in order&lt;/h3&gt;
&lt;p&gt;This might be a "not a bug but a feature" type of situation, but still.&lt;br&gt;
I solved this using bash's &lt;code&gt;$RANDOM&lt;/code&gt;, which evaluates to a different random number every time:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;rename &lt;span class="s1"&gt;&amp;#39;s/\.jpg$/.jpg/i&amp;#39;&lt;/span&gt; *.* &lt;span class="c1"&gt;# Just makes it look nice&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; F in *.jpg&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; mv &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$F&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RANDOM&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.jpg&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I couldn't use &lt;code&gt;xargs&lt;/code&gt; rather than the for loop, because I needed to evaluate the variable for every file&lt;/p&gt;
&lt;h3&gt;2. Pictures were stretched to the frame's proportions&lt;/h3&gt;
&lt;p&gt;Assuming I treated my relatives with the following apple pictures:&lt;br&gt;
&lt;img alt="" src="https://blog.backslasher.net/images/batch-fitting-imagemagick/old1.jpg"&gt;
&lt;img alt="" src="https://blog.backslasher.net/images/batch-fitting-imagemagick/old2.jpg"&gt;
&lt;img alt="" src="https://blog.backslasher.net/images/batch-fitting-imagemagick/old3.jpg"&gt;&lt;br&gt;
The frame would show them like this:&lt;br&gt;
&lt;img alt="" src="https://blog.backslasher.net/images/batch-fitting-imagemagick/smear1.jpg"&gt;
&lt;img alt="" src="https://blog.backslasher.net/images/batch-fitting-imagemagick/smear2.jpg"&gt;
&lt;img alt="" src="https://blog.backslasher.net/images/batch-fitting-imagemagick/smear3.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;Obviously, there was no setting in the software to stop doing that, so I had to modify the pictures themselves.
I settled for resizing the pictures (without modifying the aspect ratio) to a certain resolution (the frame's screen's resolution), and padding it if it's not the right size (for instance, the picture is too short / too wide).&lt;br&gt;
I modified the pictures to look like this:&lt;br&gt;
&lt;img alt="" src="https://blog.backslasher.net/images/batch-fitting-imagemagick/pan1.jpg"&gt;
&lt;img alt="" src="https://blog.backslasher.net/images/batch-fitting-imagemagick/pan2.jpg"&gt;
&lt;img alt="" src="https://blog.backslasher.net/images/batch-fitting-imagemagick/pan3.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The script&lt;/strong&gt; uses ImageMagick, which is apparently built for these things (I initially considered using gimp).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;RES&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;2048x1536
&lt;span class="nv"&gt;BG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;black
ls *.jpg &lt;span class="p"&gt;|&lt;/span&gt; xargs -n1 mogrify -gravity center -background &lt;span class="nv"&gt;$BG&lt;/span&gt; -resize &lt;span class="nv"&gt;$RES&lt;/span&gt; -extent &lt;span class="nv"&gt;$RES&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note I'm using &lt;code&gt;mogrify&lt;/code&gt;, which performes in-place updates of the file. To create a different modified file, use &lt;code&gt;convert&lt;/code&gt; and specify a new filename at the end.&lt;br&gt;
Note&lt;sup&gt;2&lt;/sup&gt; &lt;code&gt;resize&lt;/code&gt; does the actual image resizing (while keeping aspect ratio, unless &lt;a href="http://www.imagemagick.org/Usage/resize/#resize"&gt;specified otherwise&lt;/a&gt;), and &lt;code&gt;extent&lt;/code&gt; fills in the missing sides with the background.&lt;/p&gt;
&lt;h3&gt;attribution&lt;/h3&gt;
&lt;p&gt;Delicious apples taken from:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blic-domain-images-pictures/apple-pictures/ripe-apple-on-branch.jpg.html"&gt;http://blic-domain-images-pictures/apple-pictures/ripe-apple-on-branch.jpg.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pixabay.com/en/apples-fresh-green-red-health-455396/"&gt;http://pixabay.com/en/apples-fresh-green-red-health-455396/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://apple--art.deviantart.com/"&gt;http://apple--art.deviantart.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="FOSS"></category><category term="ImageMagick"></category><category term="images"></category><category term="bash"></category><category term="scripts"></category></entry><entry><title>Managing chef users with Chef</title><link href="https://blog.backslasher.net/chef-users-with-chef.html" rel="alternate"></link><published>2015-03-12T09:00:00+01:00</published><updated>2015-03-12T09:00:00+01:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2015-03-12:/chef-users-with-chef.html</id><summary type="html">&lt;p&gt;I needed to create seperate Chef accounts for some utility program running in my Chef server.&lt;br&gt;
I was finally able to deprecate it today, but I saved those snippets because they're neat. These snippets use &lt;code&gt;chef-server-ctl&lt;/code&gt;, which is a utility software included in Chef server's installation&lt;/p&gt;
&lt;h2&gt;The bits&lt;/h2&gt;
&lt;h3&gt;Interesting points …&lt;/h3&gt;</summary><content type="html">&lt;p&gt;I needed to create seperate Chef accounts for some utility program running in my Chef server.&lt;br&gt;
I was finally able to deprecate it today, but I saved those snippets because they're neat. These snippets use &lt;code&gt;chef-server-ctl&lt;/code&gt;, which is a utility software included in Chef server's installation&lt;/p&gt;
&lt;h2&gt;The bits&lt;/h2&gt;
&lt;h3&gt;Interesting points&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;I'm using &lt;code&gt;ruby_block&lt;/code&gt; resources to execute my code, because:&lt;ul&gt;
&lt;li&gt;It runs at the convergence phase and not at the compilation phase&lt;/li&gt;
&lt;li&gt;The code runs on a forked process so it can't crash my Chef client&lt;/li&gt;
&lt;li&gt;The code behaves as a standard "resource"&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I use &lt;code&gt;not_if&lt;/code&gt; and &lt;code&gt;only_if&lt;/code&gt; as much as possible, because:&lt;ul&gt;
&lt;li&gt;They're camulative (all &lt;code&gt;only_if&lt;/code&gt; conditions must pass and all &lt;code&gt;not_if&lt;/code&gt; conditions must fail for the resource to run)&lt;/li&gt;
&lt;li&gt;Running the "if" blocks doesn't count as running the resource, helping the resource feel idempotent ("nothing is modified unless it needs to")&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Ensure a user exists&lt;/h3&gt;
&lt;p&gt;The password is generated on the spot and not saved anywhere, because I was counting on certificate-based access.&lt;br&gt;
The private key is ignored because I have another block to reset it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;blablason&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;ruby_block&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;create-chef-user&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="c1"&gt;# This is not a chef server&lt;/span&gt;
  &lt;span class="n"&gt;not_if&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;shell_out&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;which chef-server-ctl&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exitstatus!&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="c1"&gt;# User does not exist&lt;/span&gt;
  &lt;span class="n"&gt;not_if&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;shell_out&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;chef-server-ctl user-list&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;any?&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;

  &lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;pass&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;65&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chr&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;
    &lt;span class="n"&gt;shell_out&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;chef-server-ctl user-create &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; no@one.com &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;pass&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Ignoring output key because we&amp;#39;ll recreate that later&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Ensure a file contains the private key&lt;/h3&gt;
&lt;p&gt;The private key is used to calculate the public key, which is compared against the user's actual public key (fetched from &lt;code&gt;chef-server-ctl&lt;/code&gt;).&lt;br&gt;
Should the keys mismatch, a new key is generated and written to the file, and the public side is written to the Chef server using &lt;code&gt;chef-server-ctl&lt;/code&gt; and a nifty perl replacement script.&lt;br&gt;
I avoid matching changing the public key to match the current private key, although this can be done without much code modification.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;blablason&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;key_path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/home/blablason/key.pem&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;ruby_block&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;reset-chef-key&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="c1"&gt;# This is not a chef server&lt;/span&gt;
  &lt;span class="n"&gt;not_if&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;shell_out&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;which chef-server-ctl&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exitstatus!&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="c1"&gt;# Key matches&lt;/span&gt;
  &lt;span class="n"&gt;not_if&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="c1"&gt;# If file doesn&amp;#39;t exist, return false (code needs to be run)&lt;/span&gt;
    &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exist?&lt;/span&gt; &lt;span class="n"&gt;key_path&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
      &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;missing file&amp;#39;&lt;/span&gt;
      &lt;span class="kp"&gt;false&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="c1"&gt;# Calculate current user&amp;#39;s key&lt;/span&gt;
      &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;mismatching keys&amp;#39;&lt;/span&gt;
      &lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;openssl&amp;#39;&lt;/span&gt;
      &lt;span class="n"&gt;real_pub&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="no"&gt;Chef&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;JSONCompat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shell_out!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;chef-server-ctl user-show &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; -F json&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;public_key&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;
      &lt;span class="n"&gt;priv_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="no"&gt;OpenSSL&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;PKey&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;RSA&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key_path&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="n"&gt;calc_pub&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;priv_key&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;public_key&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;
      &lt;span class="n"&gt;real_pub&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;calc_pub&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="c1"&gt;# Generate key&lt;/span&gt;
    &lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;openssl&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;new_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="no"&gt;OpenSSL&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;PKey&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;RSA&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2048&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;new_pub_s&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;new_key&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;public_key&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_s&lt;/span&gt;
    &lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;new_key&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# XXX might be vulnerable&lt;/span&gt;
    &lt;span class="c1"&gt;# Fabricate replacement shell&lt;/span&gt;
    &lt;span class="n"&gt;perl_exec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;shell_out!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;which perl&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;
    &lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;tempfile&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;rep_shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Dir&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Tmpname&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;make_tmpname&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/tmp/shell&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;=::&lt;/span&gt;&lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rep_shell&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mo"&gt;0700&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#!&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;perl_exec&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; -i&lt;/span&gt;
&lt;span class="s2"&gt;      $pubkey=&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;new_pub_s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;#39;;&lt;/span&gt;
&lt;span class="s2"&gt;        while (&amp;lt;&amp;gt;) {&lt;/span&gt;
&lt;span class="s2"&gt;         s/^&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt;s+&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s2"&gt;public_key&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s2"&gt;:.*,/&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s2"&gt;public_key&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s2"&gt;:$pubkey,/;&lt;/span&gt;
&lt;span class="s2"&gt;         print;&lt;/span&gt;
&lt;span class="s2"&gt;        }&lt;/span&gt;
&lt;span class="s2"&gt;    &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;
    &lt;span class="n"&gt;shell_out!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;EDITOR=&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;rep_shell&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; chef-server-ctl user-edit &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delete&lt;/span&gt; &lt;span class="n"&gt;rep_shell&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="c1"&gt;# Use &amp;quot;notifies&amp;quot; here to let stuff know that the key has been changed&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Ensure a user belongs to an organization&lt;/h3&gt;
&lt;p&gt;This is not idempotent because I couldn't find a way to easily determine whether a user belongs to an organization.&lt;br&gt;
However, I'm perfectly fine with this silently failing&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;blablason&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;org_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ORG&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;execute&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;assign-chef-org&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="c1"&gt;# This is not a chef server&lt;/span&gt;
  &lt;span class="n"&gt;only_if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;which chef-server-ctl&amp;#39;&lt;/span&gt;

  &lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;chef-server-ctl org-user-add &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;org_name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Things I would have done differently&lt;/h2&gt;
&lt;p&gt;Were I to refactor this, I'd modify it to work against the Chef API directly rather than running &lt;code&gt;chef-server-ctl&lt;/code&gt;.&lt;br&gt;
This would have looked neater, and would have allowed me to run from machines that aren't Chef servers.&lt;/p&gt;</content><category term="FOSS"></category><category term="Security"></category><category term="Linux"></category><category term="Chef"></category><category term="Ruby"></category></entry><entry><title>Locking Down Jenkins' Authentication</title><link href="https://blog.backslasher.net/locking-down-jenkins-authentication.html" rel="alternate"></link><published>2015-02-17T12:00:00+01:00</published><updated>2015-02-17T12:00:00+01:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2015-02-17:/locking-down-jenkins-authentication.html</id><summary type="html">&lt;h3&gt;Update 19.02.15&lt;/h3&gt;
&lt;p&gt;After posting my script in the Jenkins mailing list, I was told about a simpler way for implmenting my authorization strategy. I'm leaving this post because the things I learnt from developing the plugin are still valuable and may help someone someday.&lt;/p&gt;
&lt;h3&gt;The REAL solution&lt;/h3&gt;
&lt;p&gt;We'll …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Update 19.02.15&lt;/h3&gt;
&lt;p&gt;After posting my script in the Jenkins mailing list, I was told about a simpler way for implmenting my authorization strategy. I'm leaving this post because the things I learnt from developing the plugin are still valuable and may help someone someday.&lt;/p&gt;
&lt;h3&gt;The REAL solution&lt;/h3&gt;
&lt;p&gt;We'll be using the "Matrix-based security" strategy, and give the group "authenticated" administrative permissions.&lt;/p&gt;
&lt;h4&gt;Via GUI&lt;/h4&gt;
&lt;p&gt;Go to "Configure Global Security" under "Manage Jenkins" and do like this:&lt;br&gt;
&lt;img alt="" src="https://blog.backslasher.net/images/locking-down-jenkins-authentication/matrix-auth.png"&gt;  &lt;/p&gt;
&lt;h4&gt;Via CLI&lt;/h4&gt;
&lt;p&gt;This is what I actually use:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Jenkins&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getInstance&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;

&lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;strategy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;hudson&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;security&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;GlobalMatrixAuthorizationStrategy&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;strategy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Jenkins&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ADMINISTER&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;authenticated&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setAuthorizationStrategy&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strategy&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;save&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;The Story&lt;/h3&gt;
&lt;p&gt;I was tasked with automating and securing our Jenkins CI server.&lt;br&gt;
I found the &lt;a href="https://github.com/opscode-cookbooks/jenkins"&gt;Jenkins cookbook&lt;/a&gt; very helpful, and used a little groovy (less-anal Java) script found in the repo's &lt;code&gt;README.md&lt;/code&gt; to set the following security policy:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Authentication is done via BitBucket (using the &lt;a href="https://wiki.jenkins-ci.org/display/JENKINS/Bitbucket+OAuth+Plugin"&gt;bitbucket plugin&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Logged in users are allowed to do everything (since &lt;a href="https://github.com/jenkinsci/bitbucket-oauth-plugin/blob/155e11cf43372d0148429509035effa9e147ae54/src/main/java/org/jenkinsci/plugins/BitbucketSecurityRealm.java#L175"&gt;groups aren't supported&lt;/a&gt; yet by the BitBucket plugin)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The script looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;jenkins.model.*&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;hudson.security.*&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.jenkinsci.plugins.*&lt;/span&gt;

&lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Jenkins&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getInstance&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;

&lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;githubRealm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;BitbucketSecurityRealm&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;API_KEY&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;API_SECRET&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setSecurityRealm&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;githubRealm&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;strategy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;FullControlOnceLoggedInAuthorizationStrategy&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setAuthorizationStrategy&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strategy&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;save&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;However, I was not happy&lt;/p&gt;
&lt;h3&gt;The Problem&lt;/h3&gt;
&lt;p&gt;As I could have seen from the explanation attached to "Logged-in users can do anything":&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;In this mode, every logged-in user gets full control of Jenkins. The only user who won&amp;#39;t have full control is anonymous user, who only gets read access.

This mode is useful to force users to log in before taking actions, so that you can keep record of who has done what. This setting can be also used in public-facing Jenkins, where you only allow trusted users to have user accounts.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So as we quickly found out, anonymous users can view our build specs and download our code. This is fine when developing FOSS, but bad when developing regular software.&lt;br&gt;
&lt;img alt="" src="https://blog.backslasher.net/images/locking-down-jenkins-authentication/anon-dl.png"&gt;&lt;/p&gt;
&lt;p&gt;Browsing the &lt;a href="https://github.com/kohsuke/hudson/blob/master/core/src/main/java/hudson/security/FullControlOnceLoggedInAuthorizationStrategy.java#L58"&gt;source code&lt;/a&gt; for Jenkins, I found the problem.&lt;br&gt;
Under the constructor for &lt;code&gt;FullControlOnceLoggedInAuthorizationStrategy&lt;/code&gt;, there is a line giving anonymous users "read":&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;THE_ACL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ACL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ANONYMOUS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Permission&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;READ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Said authorization strategy offers no configuration, so I can't tell it not to give anonymous any priviileges at all.&lt;/p&gt;
&lt;h3&gt;Failed Attempts&lt;/h3&gt;
&lt;h4&gt;Different Strategy&lt;/h4&gt;
&lt;p&gt;Other authorization strategies proved useless:&lt;br&gt;
&lt;img alt="" src="https://blog.backslasher.net/images/locking-down-jenkins-authentication/auths.png"&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Anyone can do anything&lt;/strong&gt;: Just no.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Legacy mode&lt;/strong&gt;: Requires groups, so not applicable.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Matrix-based security&lt;/strong&gt;: Requires me specifying every teammate, so while it might work, it's annoying.&lt;br&gt;
  I also attempted to specify &lt;code&gt;EVERYONE&lt;/code&gt; (and &lt;code&gt;Everyone&lt;/code&gt; and &lt;code&gt;everyone&lt;/code&gt;) hoping it'll mean "Everyone who's logged in", but that didn't work.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Project-based Matrix Authorization Strategy&lt;/strong&gt;: Same as previous, even more work.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Generalizing&lt;/h4&gt;
&lt;p&gt;I tried using the script console to set the authorization strategy to the &lt;code&gt;AuthorizationStrategy&lt;/code&gt; class, so I can customize it later.&lt;br&gt;
Unfortunately, it's an abstract class, so it can't be done.&lt;/p&gt;
&lt;h4&gt;Groovy Customizing&lt;/h4&gt;
&lt;p&gt;I used a groovy script to generate my own strategy class, copying the original &lt;code&gt;FullControlOnceLoggedInAuthorizationStrategy&lt;/code&gt; class and removing the annoying line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;  static {
    THE_ACL.add(ACL.EVERYONE, Jenkins.ADMINISTER,true);
    THE_ACL.add(ACL.ANONYMOUS, Jenkins.ADMINISTER,false);
&lt;span class="gd"&gt;-   THE_ACL.add(ACL.ANONYMOUS,Permission.READ,true);&lt;/span&gt;
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And then instanciating and setting as my authorization strategy.
This worked beautifully, until I restarted the service. Since the class only existed in memory, Jenkins couldn't re-instantiate its auth strategy, and refused to do anything until I manually fixed it using the config file (&lt;code&gt;$JENKINS_HOME/config.xml&lt;/code&gt;)&lt;/p&gt;
&lt;h3&gt;The Solution&lt;/h3&gt;
&lt;p&gt;Eventually, I wrote a Jenkins Plugin that mimicked the original strategy without said line.
The process is composed of these stages, which I found non-trivial (as a mere Java junior), so I wanted to detail them:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Use a VM so you don't mess anything up. I used Ubuntu 14.10 via Vagrant, but everything goes.&lt;/li&gt;
&lt;li&gt;Install JDK and Maven on said VM. For you Ubuntu guys, it's easy: &lt;code&gt;sudo apt-get install openjdk-7-jdk maven&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Optional:&lt;/em&gt; Install Jenkins on the VM. Makes testing much easier.&lt;/li&gt;
&lt;li&gt;Take a peek at &lt;a href="https://wiki.jenkins-ci.org/display/JENKINS/Plugin+tutorial"&gt;the tutorial&lt;/a&gt;. Namely, edit your &lt;code&gt;~/.m2/settings.xml&lt;/code&gt; file&lt;/li&gt;
&lt;li&gt;Create a placeholder using &lt;code&gt;mvn -U org.jenkins-ci.tools:maven-hpi-plugin:create&lt;/code&gt; in the project's parent directory (the command will create the project directory for you).&lt;br&gt;
  There are some questions to be answered, the tutorial explains them and if you don't like the result you can wipe and start over.&lt;/li&gt;
&lt;li&gt;Build the plugin (&lt;code&gt;mvn&lt;/code&gt; in the project directory) after creation, to make Maven download all of its dependencies now. This might take a while.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Modify the filesystem. These are some pointers that I discovered:  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Place all of your code in the &lt;code&gt;src/main/java&lt;/code&gt; directory (and inside according to your package hierarchy.&lt;/li&gt;
&lt;li&gt;Modify the &lt;code&gt;src/main/resources/index.jelly&lt;/code&gt; to describe your project&lt;/li&gt;
&lt;li&gt;Create a file under &lt;code&gt;src/main/resources/&amp;lt;package hierarchy&amp;gt;/&amp;lt;class name&amp;gt;/help.html&lt;/code&gt; to provide help for your plugin. Not sure if that's needed for all plugins, but it was automatically used for my authorization strategy.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a file under &lt;code&gt;src/main/resources/org/jenkinsci/plugins/&amp;lt;class name, only alphanumeric&amp;gt;/Messages.properties&lt;/code&gt; to contain messages for your plugin, like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="na"&gt;BestPlugin.DisplayName&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;Best plugin everrrrrrrrrr&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can later internationalize this file (I haven't). The properties are accessed by doing this in your actual file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.jenkinsci.plugins.CLASSNAMEALPHANUMERIC.Messages&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;prop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Messages&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;BestPlugin_DisplayName&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Compile, test, cry. This is my noobish helper script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;mvn clean &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; mvn &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo cp target/PLUGINNAME.hpi /var/lib/jenkins/plugins/PLUGINNAME.hpi  &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo service jenkins restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://wiki.jenkins-ci.org/display/JENKINS/Hosting+Plugins"&gt;Publish the plugin&lt;/a&gt; to the community, if you want to.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;TL;DR&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" src="https://blog.backslasher.net/images/locking-down-jenkins-authentication/myauth.png"&gt;&lt;br&gt;
My &lt;s&gt;plugin works&lt;/s&gt; (removed), and all anonymous users are recirected to a BitBucket login page
&lt;img alt="" src="https://blog.backslasher.net/images/locking-down-jenkins-authentication/bblogin.png"&gt;&lt;/p&gt;
&lt;p&gt;I set it from the (almost) identical groovy script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;jenkins.model.*&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;hudson.security.*&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.jenkinsci.plugins.*&lt;/span&gt;

&lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Jenkins&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getInstance&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;

&lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;githubRealm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;BitbucketSecurityRealm&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;API_KEY&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;API_SECRET&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setSecurityRealm&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;githubRealm&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;strategy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;backslasher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;jenkins&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;LockdownFullControlOnceLoggedInAuthorizationStrategy&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setAuthorizationStrategy&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strategy&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;save&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;By the way, I'm not afraid of idempotence issues, since the objects modified by this code have no state (so while not ideal, I don't care about them being recreated over and over).  &lt;/p&gt;
&lt;p&gt;&lt;s&gt;I'm planning to release a stable version, add a README file, upload to the Jenkins wiki etc soon.&lt;br&gt;
PRs are welcome.&lt;/s&gt; Removed&lt;/p&gt;</content><category term="FOSS"></category><category term="Linux"></category><category term="Java"></category><category term="Security"></category><category term="Jenkins"></category></entry><entry><title>Resizing AWS root EBS in CentOS HVM</title><link href="https://blog.backslasher.net/resizing-aws-root-centos-hvm.html" rel="alternate"></link><published>2015-02-01T12:00:00+01:00</published><updated>2015-02-01T12:00:00+01:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2015-02-01:/resizing-aws-root-centos-hvm.html</id><summary type="html">&lt;h3&gt;Update 04.07.15&lt;/h3&gt;
&lt;p&gt;This method doesn't work anymore because of some weird AWS restriction, which says you can't connect the root device of a marketplace AMI (like the CentOS one) to another VM, lest you discover its secrets.&lt;br&gt;
I developed a better method which involves either rebooting or creating …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Update 04.07.15&lt;/h3&gt;
&lt;p&gt;This method doesn't work anymore because of some weird AWS restriction, which says you can't connect the root device of a marketplace AMI (like the CentOS one) to another VM, lest you discover its secrets.&lt;br&gt;
I developed a better method which involves either rebooting or creating a custom AMI. &lt;a href="https://blog.backslasher.net/growroot-centos.html"&gt;Give it a try!&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;The Story&lt;/h3&gt;
&lt;p&gt;Today I started using HVM instances in AWS, because r3 instances (memory optimized) are only available on HVM (&lt;a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/virtualization_types.html"&gt;the difference&lt;/a&gt;).
Because the CentOS image my company uses isn't available as HVM, I switched to &lt;a href="https://aws.amazon.com/marketplace/pp/B00NQAYLWO"&gt;this&lt;/a&gt; image, which had an annoying side effect.&lt;/p&gt;
&lt;h3&gt;The Problem&lt;/h3&gt;
&lt;p&gt;After launching an instance, I always extend the root volume, which starts at a measly 8GB. Linux runs fine on 8GB, but our devs depend on some maneuvering space.&lt;br&gt;
The EBS volume itself is extended when launching the instance. However, one must also extend the partitions/filesystems inside the volume.&lt;br&gt;
&lt;strong&gt;Our previous image&lt;/strong&gt; provided a root EBS that contained the filesystem directly, like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ lsblk
NAME    MAJ:MIN RM  SIZE RO TYPE  MOUNTPOINT
...
xvde    202:64   0  100G  0 disk  /
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here we only have to extend the filesystem, which can be done using something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;resize2fs &lt;span class="k"&gt;$(&lt;/span&gt;mount &lt;span class="p"&gt;|&lt;/span&gt; perl -ne &lt;span class="s1"&gt;&amp;#39;print $1,&amp;quot;\n&amp;quot; if /^(\S+) on \/ /&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;On the HVM image&lt;/strong&gt;, however, the EBS was partitioned (using MBR) and had a single partition, which contained the filesystem, like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ lsblk
NAME    MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
...
xvda    202:0    0  100G  0 disk
└─xvda1 202:1    0  100G  0 part /
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This means that we must extend the partition before extending the filesystem, which proved to be a difficult task.&lt;br&gt;
The standard procedure is deleting the partition and recreating with the same settings, however:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Since we're extending a partition which contains the root filesystem, we can't unmount it.&lt;/li&gt;
&lt;li&gt;When changing a partition that contains a filesystem that is mounted, the kernel refuses to re-read the filesystem, meaning you can't make sure everything works until you reboot&lt;/li&gt;
&lt;li&gt;If you're rebooting with a broken partition/filesystem configuration, the VM won't boot. Since AWS offers no direct method of interfacing with the VM directly, one can't easily troubleshoot the VM.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Because of this, I spent 6 hours and 6 servers on trying to extend the partition.&lt;/p&gt;
&lt;h3&gt;The Solution&lt;/h3&gt;
&lt;p&gt;As AWS say in &lt;a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/storage_expand_partition.html"&gt;their article&lt;/a&gt;, the best solution I found is using a helper VM.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Prepare a helper VM running Linux, with &lt;code&gt;parted&lt;/code&gt; installed.&lt;/li&gt;
&lt;li&gt;Stop both the instance you wish to extend and the helper.&lt;/li&gt;
&lt;li&gt;Note the instance id of both instances and the volume ID of the root EBS.
    We'll assume we're talking about &lt;code&gt;i-victim&lt;/code&gt;,&lt;code&gt;i-helper&lt;/code&gt;,&lt;code&gt;v-victim&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Note &lt;code&gt;i-victim&lt;/code&gt;'s root device configuration. We'll assume it's &lt;code&gt;/dev/sda1&lt;/code&gt;&lt;br&gt;
&lt;img alt="" src="https://blog.backslasher.net/images/resizing-aws-root-centos-hvm/sol1.png"&gt;&lt;/li&gt;
&lt;li&gt;Detach &lt;code&gt;v-victim&lt;/code&gt; from &lt;code&gt;i-victim&lt;/code&gt; and attach it to &lt;code&gt;i-helper&lt;/code&gt;. The device letter doesn't matter, you should be able to recognize it on the OS. We'll assume it's &lt;code&gt;/dev/xvdf&lt;/code&gt;.&lt;br&gt;
&lt;img alt="" src="https://blog.backslasher.net/images/resizing-aws-root-centos-hvm/detach.png"&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Start &lt;code&gt;i-helper&lt;/code&gt;, connect to it via SSH, and commence surgery&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;code&gt;parted /dev/xvdf p&lt;/code&gt; to view the current partition makeup, and save it in case something bad happens.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Model: Xen Virtual Block Device (xvd)
Disk /dev/xvdf: 322GB
Sector size (logical/physical): 512B/512B
Partition Table: msdos

Number  Start   End    Size   Type     File system  Flags
 1      1049kB  8GB    8GB    primary  ext4         boot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note the difference between the drive size (&lt;code&gt;322GB&lt;/code&gt;) and the partition size (&lt;code&gt;8GB&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Like in the article, delete the partition and create a new one, with the same start and type. Put &lt;code&gt;100%&lt;/code&gt; as the end, and run &lt;code&gt;set 1 boot on&lt;/code&gt; to enable the boot flag on the new partition .&lt;br&gt;
   Example code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ sudo parted /dev/xvdf rm 1
$ sudo parted /dev/xvdf mkpart primary 1049kB 100%
$ sudo parted /dev/xvdf set 1 boot on
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The start (&lt;code&gt;1049kB&lt;/code&gt;) should be based on the start of the original partition.&lt;br&gt;
The new partition should be recognized by the kernel, and the filesystem itself can be treated.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Execute &lt;code&gt;e2fsck -f /dev/xvdf1 &amp;amp;&amp;amp; resize2fs /dev/xvdf1&lt;/code&gt; to fsck and extend the filesystem&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;You can mount-test the partition on the server, just to make sure everything is OK, using something like &lt;code&gt;mkdir /tmp/bla &amp;amp;&amp;amp; mount /dev/xvdf1 /tmp/bla&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Stop &lt;code&gt;i-helper&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Detach &lt;code&gt;v-victim&lt;/code&gt; from &lt;code&gt;i-helper&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Attach &lt;code&gt;v-victim&lt;/code&gt; to &lt;code&gt;i-victim&lt;/code&gt;, using the binding from step 4.&lt;br&gt;
&lt;img alt="" src="https://blog.backslasher.net/images/resizing-aws-root-centos-hvm/attach.png"&gt;&lt;/li&gt;
&lt;li&gt;Start &lt;code&gt;i-victim&lt;/code&gt; and pray.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Everything should work out OK&lt;/p&gt;</content><category term="FOSS"></category><category term="Linux"></category><category term="AWS"></category><category term="Virtualization"></category><category term="Mysteries Solved"></category><category term="Ruby"></category><category term="Perl"></category><category term="Scripts"></category><category term="Storage"></category></entry><entry><title>Booting with UUID without initramfs</title><link href="https://blog.backslasher.net/boot-uuid-without-initramfs.html" rel="alternate"></link><published>2015-01-30T12:00:00+01:00</published><updated>2015-01-30T12:00:00+01:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2015-01-30:/boot-uuid-without-initramfs.html</id><summary type="html">&lt;h2&gt;The Story&lt;/h2&gt;
&lt;p&gt;I recently wiped my CubieTruck (a single board computer, like RaspberryPi), and tried installing the root filesystem on a hard drive instead of the built-in NAND, due to the NAND's tendency to get corrupted.&lt;br&gt;
I used Igor Pečovnik's &lt;a href="http://www.igorpecovnik.com/2013/12/24/cubietruck-debian-wheezy-sd-card-image/"&gt;Image&lt;/a&gt;, which is really convenient, as I like it better …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;The Story&lt;/h2&gt;
&lt;p&gt;I recently wiped my CubieTruck (a single board computer, like RaspberryPi), and tried installing the root filesystem on a hard drive instead of the built-in NAND, due to the NAND's tendency to get corrupted.&lt;br&gt;
I used Igor Pečovnik's &lt;a href="http://www.igorpecovnik.com/2013/12/24/cubietruck-debian-wheezy-sd-card-image/"&gt;Image&lt;/a&gt;, which is really convenient, as I like it better than the images offered at the official site, and it's obviously &lt;strong&gt;much&lt;/strong&gt; easier than building by myself.&lt;br&gt;
However, I had one serious issue.  &lt;/p&gt;
&lt;h2&gt;The problem&lt;/h2&gt;
&lt;p&gt;Igor's image is designed to be installed on and booted from an SD card, and includes a script to install the OS to a hard drive, which does 3 things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Formats and prepares the hard drive&lt;/li&gt;
&lt;li&gt;Copies the root FS to the hard drive&lt;/li&gt;
&lt;li&gt;Modifies the SD card's &lt;code&gt;/boot&lt;/code&gt; directory to load the root FS from the hard drive&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Igor, assuming there's only one hard drive, always targets &lt;code&gt;/dev/sda1&lt;/code&gt; as the hard drive. This was an issue for me, as I have two hard drives - an internal one that I installed the OS on, and an external one that I connect every now and then.&lt;/p&gt;
&lt;p&gt;The uEnv file (the entry point for CubieTruck's boot sequence) contains something like &lt;code&gt;rootfs=/dev/sda1&lt;/code&gt;, and when both my drives were connected, my external hard drive was discovered first, meaning &lt;code&gt;/dev/sda1&lt;/code&gt; was pointing to it, causing the kernel to panic as it couldn't find a proper root fs.&lt;br&gt;
Being used to a standard-built Linux kernel, I modified the uEnv file to look like &lt;code&gt;root=UUID=&amp;lt;PARTITION GUID&amp;gt;&lt;/code&gt;, which works around the naming issue.&lt;br&gt;
It didn't work, causing the boot sequence to hang with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;waiting for root device UUID=&amp;lt;Whatever I wrote in uEnv&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;The Solution&lt;/h2&gt;
&lt;p&gt;I tried some tricks, including referring to &lt;code&gt;/dev/disk/by-uuid/&lt;/code&gt;, but no luck. Eventually I found &lt;a href="http://unix.stackexchange.com/a/151483"&gt;this&lt;/a&gt; lifesaver, that made me realize that &lt;code&gt;initramfs&lt;/code&gt; isn't included in Igor's build, and without it there's no &lt;code&gt;UUID&lt;/code&gt; or &lt;code&gt;LABEL&lt;/code&gt; mapping, only &lt;code&gt;PARTUUID&lt;/code&gt; mapping. Using the value taken from &lt;code&gt;blkid&lt;/code&gt; (like &lt;code&gt;rootfs=PARTUUID=&amp;lt;SOME GUID&amp;gt;&lt;/code&gt;), the boot went OK.&lt;br&gt;
&lt;strong&gt;However&lt;/strong&gt;, when editing the &lt;code&gt;/etc/fstab&lt;/code&gt; file (which also contained &lt;code&gt;/dev/sda1&lt;/code&gt; as the root mountpoint), I noticed that &lt;code&gt;mount PARTUUID=&amp;lt;Something&amp;gt;&lt;/code&gt; didn't work. Thanks to &lt;a href="http://forums.linuxmint.com/viewtopic.php?f=90&amp;amp;t=162677"&gt;this post&lt;/a&gt;, I learnt that support for &lt;code&gt;PARTUUID&lt;/code&gt; was added to &lt;code&gt;mount&lt;/code&gt;, but the Ubuntu version is too old to contain it. This might change, but I worked around this by using good &lt;del&gt;old&lt;/del&gt; new &lt;code&gt;UUID&lt;/code&gt; in &lt;code&gt;/etc/fstab&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now all is well.&lt;/p&gt;
&lt;h2&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;Use &lt;code&gt;PARTUUID&lt;/code&gt; in &lt;code&gt;uEnv&lt;/code&gt;, found via &lt;code&gt;blkid&lt;/code&gt;.&lt;br&gt;
With &lt;code&gt;/etc/fstab&lt;/code&gt;, test with &lt;code&gt;mount&lt;/code&gt; before using. If it fails, work around with &lt;code&gt;UUID&lt;/code&gt;.&lt;/p&gt;</content><category term="FOSS"></category><category term="Linux"></category><category term="Boot"></category><category term="Mysteries Solved"></category><category term="ARM"></category></entry><entry><title>Getting Git Submodule Detailed Status</title><link href="https://blog.backslasher.net/git-submodule-status.html" rel="alternate"></link><published>2015-01-29T12:00:00+01:00</published><updated>2015-01-29T12:00:00+01:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2015-01-29:/git-submodule-status.html</id><summary type="html">&lt;h2&gt;The Story&lt;/h2&gt;
&lt;p&gt;I manage every one of my Chef cookbooks as a single git repository, complying with the BerkShelf paradigm. I keep them all as submodules in a "supermodule", to allow my teammates to easily clone them all.
I can use &lt;code&gt;git status&lt;/code&gt; from the supermodule to get submodule information …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;The Story&lt;/h2&gt;
&lt;p&gt;I manage every one of my Chef cookbooks as a single git repository, complying with the BerkShelf paradigm. I keep them all as submodules in a "supermodule", to allow my teammates to easily clone them all.
I can use &lt;code&gt;git status&lt;/code&gt; from the supermodule to get submodule information when it comes to untracked/modified files, like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ git status
On branch master
Your branch is up-to-date with &amp;#39;origin/master&amp;#39;.
Changes not staged for commit:
  (use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to update what will be committed)
  (use &amp;quot;git checkout -- &amp;lt;file&amp;gt;...&amp;quot; to discard changes in working directory)
  (commit or discard the untracked or modified content in submodules)

    modified:   cookbooks/some-cookbook (untracked content)
    modified:   cookbooks/other-cookbook (modified content)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;While this is nice, I wanted something more detailed, like &lt;a href="https://blog.backslasher.net/git-prompt-variables.html"&gt;git's PS1 prompt&lt;/a&gt;. I ended up using just that.&lt;/p&gt;
&lt;h2&gt;The script&lt;/h2&gt;
&lt;p&gt;I'm utilizing &lt;code&gt;git submodule foreach&lt;/code&gt;, which &lt;code&gt;cd&lt;/code&gt;s into every sudmodule while populating some variables (e.g. &lt;code&gt;$name&lt;/code&gt; is the submodule's name) and executes something (using some subshell).&lt;br&gt;
I started checking how the prompt script calculates its symbols, but after reading the script I found it full of &lt;code&gt;if&lt;/code&gt;s and &lt;code&gt;case&lt;/code&gt;s and lions and tigers and bears. I decided that the prompt script actually generates the string I need, so I should just execute it.&lt;br&gt;
The only caveat is that the script reads variables defined in &lt;code&gt;~/.bashrc&lt;/code&gt; and are not exported, like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;GIT_PS1_SHOWDIRTYSTATE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Meaning that they're not available in any bash instances that aren't login instances.
You can either:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Edit &lt;code&gt;~/.bashrc&lt;/code&gt; to export the variables, like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;GIT_PS1_SHOWDIRTYSTATE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;add this bit of trickery, which runs a bash login shell, extracts the variables and exports them:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;bash -ic &lt;span class="s1"&gt;&amp;#39;declare -p&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; grep GIT &lt;span class="p"&gt;|&lt;/span&gt; cut -f &lt;span class="m"&gt;3&lt;/span&gt; -d &lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I chose option 2&lt;/p&gt;
&lt;p&gt;The script looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;bash -ic &lt;span class="s1"&gt;&amp;#39;declare -p&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; grep GIT &lt;span class="p"&gt;|&lt;/span&gt; cut -f &lt;span class="m"&gt;3&lt;/span&gt; -d &lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
git submodule foreach --quiet &lt;span class="s1"&gt;&amp;#39;bash -c &amp;quot;. /usr/lib/git-core/git-sh-prompt; __git_ps1&amp;quot;;echo &amp;quot; $path&amp;quot;&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And the result looks like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt; (master %=) cookbooks/some-cookbook
 (master *=) cookbooks/other-cookbook
 (master=) cookbooks/untouched-cookbook
 (master&amp;gt;) cookbooks/notpushed-cookbook 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Very nice.&lt;/p&gt;</content><category term="FOSS"></category><category term="Linux"></category><category term="Bash"></category><category term="git"></category><category term="chef"></category></entry><entry><title>CSV Tricks</title><link href="https://blog.backslasher.net/csv-tricks.html" rel="alternate"></link><published>2015-01-15T12:00:00+01:00</published><updated>2015-01-15T12:00:00+01:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2015-01-15:/csv-tricks.html</id><summary type="html">&lt;h2&gt;The Story&lt;/h2&gt;
&lt;p&gt;I've been requested to recreate some spreadsheet for our execs. Being annoying as usual, I made it a point to only use scripting to build the tables.&lt;br&gt;
Most of the reconstruction is interesting in an unrelated way, but I wanted to post about some little gimmicks that helped …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;The Story&lt;/h2&gt;
&lt;p&gt;I've been requested to recreate some spreadsheet for our execs. Being annoying as usual, I made it a point to only use scripting to build the tables.&lt;br&gt;
Most of the reconstruction is interesting in an unrelated way, but I wanted to post about some little gimmicks that helped me create the spreadsheet-like part using plain-old CSV.
I used Ruby as my CSV generator, which I then imported by LibreOffice's Calc for some formatting touch-ups (bold titles etc.) and then to Google Docs.&lt;/p&gt;
&lt;h2&gt;Formulas survive&lt;/h2&gt;
&lt;p&gt;I see no reason why they shouldn't, but it still surprised me - when generating CSV files, you can keep cells with formulas (e.g. &lt;code&gt;=1+1&lt;/code&gt;) and they will be honored by LibreOffice's Calc. This allowed me to preserve the spreadsheet's formulated structure (e.g. calculated averages) while generating basic CSV, using Ruby's &lt;code&gt;CSV&lt;/code&gt; module.&lt;/p&gt;
&lt;h2&gt;R1C1 Notation&lt;/h2&gt;
&lt;p&gt;This is a way to represent cell addresses differently than the default &lt;code&gt;A1&lt;/code&gt; notation.&lt;br&gt;
In &lt;code&gt;A1&lt;/code&gt;, every cell gets a column index in letters (&lt;code&gt;A,B,C..ZZZZZZZ&lt;/code&gt;) and a row index in numbers (&lt;code&gt;1,2,3...9999&lt;/code&gt;). The first cell is &lt;code&gt;A1&lt;/code&gt;.&lt;br&gt;
In &lt;code&gt;R1C1&lt;/code&gt; notation, every cell is getting a numeral row index (&lt;code&gt;R1,R2..R9999&lt;/code&gt;) and column index (&lt;code&gt;C1,C2..C9999&lt;/code&gt;) joined together.&lt;br&gt;
While &lt;code&gt;R1C1&lt;/code&gt; seems more cumbersome, it allows relative addressing, such as &lt;code&gt;RC[-1]&lt;/code&gt; (Cell to my left), &lt;code&gt;R3C&lt;/code&gt; (Third cell from the top in my column) and &lt;code&gt;R[1]C[1]&lt;/code&gt; (Cell immediately below and right to me). This allows you to address other cells without calculating their/your location, which is easy when using GUI, hard when pushing lines into a file.&lt;br&gt;
This notation isn't honored by default (my guess is because it can conflict with &lt;code&gt;A1&lt;/code&gt; notation), but you can either:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Change your application's settings to work with &lt;code&gt;R1C1&lt;/code&gt; (Which I don't like, since it's a global setting and will probably break other spreadsheets)&lt;/li&gt;
&lt;li&gt;Use the &lt;code&gt;INDIRECT&lt;/code&gt; function (&lt;a href="https://help.libreoffice.org/Calc/Spreadsheet_Functions#INDIRECT"&gt;LibreOffice documentation&lt;/a&gt;) to address a cell, like &lt;code&gt;=INDIRECT("RC[-1]",0)&lt;/code&gt; for the cell to the immediate left. This function is also implemented in Google Docs.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since you're scripting anyway, you're probably better off using the second option.&lt;/p&gt;
&lt;p&gt;Should I encounter any other neat CSV discoveries, I'll update this post.&lt;/p&gt;
&lt;h2&gt;Credits&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;R1C1 in &lt;a href="http://stackoverflow.com/questions/507253/excel-formula-to-reference-cell-to-the-left"&gt;stackoverflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="FOSS"></category><category term="Linux"></category><category term="Ruby"></category><category term="CSV"></category><category term="Spreadsheets"></category><category term="Office"></category><category term="LibreOffice"></category></entry><entry><title>Troubleshooting StatsD</title><link href="https://blog.backslasher.net/troubleshooting-statsd.html" rel="alternate"></link><published>2015-01-07T12:00:00+01:00</published><updated>2015-01-07T12:00:00+01:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2015-01-07:/troubleshooting-statsd.html</id><summary type="html">&lt;h3&gt;About StatsD&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/etsy/statsd/"&gt;StatsD&lt;/a&gt; is a tool developed by Etsy and Flickr (complicated story).&lt;br&gt;
Its main use is providing a middleman for &lt;a href="http://graphite.wikidot.com/"&gt;Graphite&lt;/a&gt;, which is a real-time graphing tool, mainly used for performance metrics.&lt;br&gt;
Thanks to StatsD, I can use TCP sockets between servers (guaranteeing packet delivery), while processes generating the …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;About StatsD&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/etsy/statsd/"&gt;StatsD&lt;/a&gt; is a tool developed by Etsy and Flickr (complicated story).&lt;br&gt;
Its main use is providing a middleman for &lt;a href="http://graphite.wikidot.com/"&gt;Graphite&lt;/a&gt;, which is a real-time graphing tool, mainly used for performance metrics.&lt;br&gt;
Thanks to StatsD, I can use TCP sockets between servers (guaranteeing packet delivery), while processes generating the data-points are using a localhost UDP socket (minimal overhead without losing packets), freeing them to do some real work.&lt;br&gt;
Sometimes, things don't work.&lt;/p&gt;
&lt;h3&gt;Basic Troubleshooting&lt;/h3&gt;
&lt;p&gt;I don't claim to be an expert on StatsD, but I didn't find a good post about troubleshooting, so I thought I'll list some of my methods.
I assume the problem we're investigating is the most common and elusive of all: &lt;strong&gt;Data sent to StatsD isn't showing up on Graphite&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;Send some Spam&lt;/h4&gt;
&lt;p&gt;Try sending some data to both StatsD and Graphite and see what sticks:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;GRAPHITE_SERVER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="nv"&gt;GRAPHITE_CARBON_PORT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="nv"&gt;GRAPHITE_WEBUI_PORT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="nv"&gt;STATSD_SERVER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="nv"&gt;STATSD_PORT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="nv"&gt;TEST_STRING&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;test.back.slash

&lt;span class="c1"&gt;# Send to Graphite&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;test.back.slash 4 `date +%s`&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; nc -C &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GRAPHITE_SERVER&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GRAPHITE_CARBON_PORT&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# Test&lt;/span&gt;
curl &lt;span class="s2"&gt;&amp;quot;http://&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GRAPHITE_SERVER&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GRAPHITE_WEBUI_PORT&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/render/?target=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;TEST_STRING&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;from=-60sec&amp;amp;format=json&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# Send to StatsD&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;test.back.slash:1|c&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; nc -C -w1 -u &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;STATSD_SERVER&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;STATSD_PORT&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# Test&lt;/span&gt;
curl &lt;span class="s2"&gt;&amp;quot;http://&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GRAPHITE_SERVER&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GRAPHITE_WEBUI_PORT&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/render/?target=stats.gauges.&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;TEST_STRING&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;from=-60sec&amp;amp;format=json&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;Redirect to Console&lt;/h4&gt;
&lt;p&gt;First, modify your StatsD configuration file to add the console backend (something like  &lt;code&gt;backends: ["./backends/graphite", "./backends/console"]&lt;/code&gt;).&lt;br&gt;
Then start StatsD (like &lt;code&gt;node /usr/local/statsd/stats.js /your/config.js&lt;/code&gt;), and watch the output. Check if your data is there.&lt;/p&gt;
&lt;h4&gt;Debug&lt;/h4&gt;
&lt;p&gt;Modify the StatsD configuration file to contain &lt;code&gt;debug: true&lt;/code&gt;, and see if you get some interesting output in &lt;code&gt;stderr&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;Dump&lt;/h4&gt;
&lt;p&gt;This might seem like a last-ditch effort, but you can always use &lt;code&gt;tcpdump&lt;/code&gt; to record interesting traffic.&lt;br&gt;
I use something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo tcpdump -i any -w statsd-ts.dump &lt;span class="s2"&gt;&amp;quot;(port &lt;/span&gt;&lt;span class="nv"&gt;$GRAPHITE_CARBON_PORT&lt;/span&gt;&lt;span class="s2"&gt;) or (port &lt;/span&gt;&lt;span class="nv"&gt;$STATSD_PORT&lt;/span&gt;&lt;span class="s2"&gt;)&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Using this dump you can try and see if something's fishy.&lt;br&gt;
Since both StatsD and Graphite use packets that contain readable text, I use this combo to parse all textual data in ruby.&lt;br&gt;
It's not perfect, but it works.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="sb"&gt;`tshark -r &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt; -T fields -e data.data`&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;stat&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;val&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;time&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;to_i&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="FOSS"></category><category term="Troubleshooting"></category><category term="Networking"></category><category term="Linux"></category><category term="StatsD"></category></entry><entry><title>SSH vs OpenVPN for Tunneling</title><link href="https://blog.backslasher.net/ssh-openvpn-tunneling.html" rel="alternate"></link><published>2014-12-18T12:00:00+01:00</published><updated>2014-12-18T12:00:00+01:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2014-12-18:/ssh-openvpn-tunneling.html</id><summary type="html">&lt;h3&gt;Update 28.01.16&lt;/h3&gt;
&lt;p&gt;I found some sites referring to this post. Below are the common complaints I saw, and my replies:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;I'm criminally bad with setting up OpenVPN, meaning the testing is completely off&lt;/strong&gt;&lt;br&gt;
    I'm not an expert in networking, but I have a working knowledge of it and …&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h3&gt;Update 28.01.16&lt;/h3&gt;
&lt;p&gt;I found some sites referring to this post. Below are the common complaints I saw, and my replies:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;I'm criminally bad with setting up OpenVPN, meaning the testing is completely off&lt;/strong&gt;&lt;br&gt;
    I'm not an expert in networking, but I have a working knowledge of it and I spent around 2 work days on messing around with the OpenVPN parameters. This is as good as I got, compared to the SSH setup which required no optimization.&lt;br&gt;
    I'll be &lt;strong&gt;delighted&lt;/strong&gt; to see a better-performing OpenVPN config. Here is how to recreate my testing:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;One machine on each AWS region &lt;code&gt;US-EAST-1&lt;/code&gt;, &lt;code&gt;EU-WEST-1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Size &lt;code&gt;c3.4xlarge&lt;/code&gt; (I think)&lt;/li&gt;
&lt;li&gt;Vanilla CentOS 6 OS&lt;/li&gt;
&lt;li&gt;No interface configuration (can be modified if needed)&lt;/li&gt;
&lt;li&gt;All packages installed from CentOS repo&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Make sure you show your configuration and your results!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Comparing OpenVPN and SSH tunneling is like &lt;a href="https://en.wikipedia.org/wiki/Apples_and_oranges"&gt;apples and oranges&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
    This is nonsense. I had 2 tools to solve my issue. I tuned them both to the bst of my ability and tested them. One outperformed the other, so I chose it.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also, have a comment section, and I'll be happy if people with interesting replies drop me a line down there so I can learn something new.&lt;br&gt;
Finally, I fixed my diagrams below.&lt;/p&gt;
&lt;h3&gt;The Story&lt;/h3&gt;
&lt;p&gt;I was asked to take care of a security challange - setup Redis replication between two VMs over the internet.&lt;br&gt;
The VMs were in different continents, so I had keep the bandwidth impact to a minimum.
I thought of 3 options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stunnel&lt;/code&gt;, which uses tunnels TCP connections via SSL&lt;/li&gt;
&lt;li&gt;SSH, which has TCP tunneling over it's secure channel (&lt;a href="https://blog.backslasher.net/images/ssh-openvpn-tunneling/inquisition.jpg"&gt;amongst its weponary&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;OpenVPN, which is designed to encapsulate, encrypt and compress traffic among two machines&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I quickly dropped stunnel because its setup is nontrivial compared to the other two (no logging, no init file...), and decided to test SSH and OpenVPN.&lt;br&gt;
I was sure that when it comes to speed, OpenVPN will be the best, because:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The first Google results say so (and they even look credible)&lt;ul&gt;
&lt;li&gt;&lt;a href="http://superuser.com/a/238801"&gt;http://superuser.com/a/238801&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://security.stackexchange.com/a/68367"&gt;http://security.stackexchange.com/a/68367&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://support.vpnsecure.me/articles/tips-tricks/comparison-chart-openvpn-pptp-ssh-tunnel"&gt;http://support.vpnsecure.me/articles/tips-tricks/comparison-chart-openvpn-pptp-ssh-tunnel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Logic dictates that SSH tunneling will suffer from &lt;a href="http://sites.inka.de/bigred/devel/tcp-tcp.html"&gt;TCP over TCP&lt;/a&gt;, since SSH runs over TCP&lt;/li&gt;
&lt;li&gt;OpenVPN, being a VPN software, is solely designed to move packets from one place to another.  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I was so sure of that, that I &lt;em&gt;almost&lt;/em&gt; didn't test.&lt;br&gt;
I was quite surprised.&lt;/p&gt;
&lt;h3&gt;Test 1&lt;/h3&gt;
&lt;p&gt;I only compared speed, since I decided the encryption of both programs will be enough.&lt;br&gt;
My test consisted of this procedure:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a functioning, data-filled Redis instance in &lt;code&gt;server A&lt;/code&gt;, port 6379&lt;/li&gt;
&lt;li&gt;Start an empty Redis instance in &lt;code&gt;server B&lt;/code&gt;, port 6379&lt;/li&gt;
&lt;li&gt;Setup tunneling (according to the method I was testing)&lt;/li&gt;
&lt;li&gt;Execute &lt;code&gt;redis-cli -p 6379 slaveof &amp;lt;Target port&amp;gt;&lt;/code&gt; on &lt;code&gt;server B&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Wait for &lt;code&gt;MASTER &amp;lt;-&amp;gt; SLAVE sync started&lt;/code&gt; to appear on &lt;code&gt;server B&lt;/code&gt;'s Redis&lt;/li&gt;
&lt;li&gt;Wait for &lt;code&gt;MASTER &amp;lt;-&amp;gt; SLAVE sync: Finished with success&lt;/code&gt; to appear on &lt;code&gt;server B&lt;/code&gt;'s Redis&lt;/li&gt;
&lt;li&gt;Cleanup&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I recorded the time it took &lt;code&gt;server B&lt;/code&gt; to go from step 5 to step 6, effectivly measuring the duration of a full replication.&lt;br&gt;
The Redis data set was about 1GB. Not the biggest I've ever seen, but enough for my tests.
I played around with a few parameters, and these are my results:  &lt;/p&gt;
&lt;style type="text/css"&gt;th,td{padding: 20px;}&lt;/style&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;platform&lt;/th&gt;
&lt;th&gt;protocol&lt;/th&gt;
&lt;th&gt;compression&lt;/th&gt;
&lt;th&gt;duration&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;OpenVPN&lt;/td&gt;
&lt;td&gt;TCP&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;21m&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;15m&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;UDP&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;6m&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;5m&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SSH&lt;/td&gt;
&lt;td&gt;TCP&lt;/td&gt;
&lt;td&gt;default&lt;/td&gt;
&lt;td&gt;1m50s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;1m30s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;2m30s&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;As you can see, SSH beats OpenVPN. By far.&lt;br&gt;
I was surprised to see this, so I did some additional tests, using &lt;code&gt;iperf&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Test 2&lt;/h3&gt;
&lt;p&gt;My second test utilized &lt;code&gt;iperf&lt;/code&gt;, and I left OpenVPN compression on, because disabling it clearly wasn't helping.&lt;br&gt;
Server A was running the iperf server, using &lt;code&gt;iperf -s&lt;/code&gt;.&lt;br&gt;
Server B was running the iperf client, using &lt;code&gt;iperf -c &amp;lt;SERVER ADDRESS&amp;gt; -p &amp;lt;PORT&amp;gt;&lt;/code&gt;.&lt;br&gt;
Below is my test summary.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;platform&lt;/th&gt;
&lt;th&gt;protocol&lt;/th&gt;
&lt;th&gt;encrpytion&lt;/th&gt;
&lt;th&gt;speed (M&lt;strong&gt;b&lt;/strong&gt;/s)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;OpenVPN&lt;/td&gt;
&lt;td&gt;TCP&lt;/td&gt;
&lt;td&gt;BlowFish&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;AES-256-CBC&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;UDP&lt;/td&gt;
&lt;td&gt;BlowFish&lt;/td&gt;
&lt;td&gt;43&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;AES-256-CBC&lt;/td&gt;
&lt;td&gt;36&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SSH&lt;/td&gt;
&lt;td&gt;TCP&lt;/td&gt;
&lt;td&gt;AWS128-CTR&lt;/td&gt;
&lt;td&gt;91&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Although the gap is reduced, SSH stil wins.
After some helpful hints at &lt;a href="http://serverfault.com/questions/653211/ssh-tunneling-is-faster-than-openvpn-could-it-be"&gt;ServerFault&lt;/a&gt;, I understood why, contrary to public opinion, SSH is faster.&lt;/p&gt;
&lt;h3&gt;The solution&lt;/h3&gt;
&lt;p&gt;The difference between SSH and OpenVPN, giving SSH its edge, is on which &lt;a href="http://en.wikipedia.org/wiki/OSI_model"&gt;OSI layer&lt;/a&gt; they work.  &lt;/p&gt;
&lt;h4&gt;OpenVPN&lt;/h4&gt;
&lt;p&gt;Being a VPN service, OpenVPN can operate as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TUN&lt;/code&gt;, a level 3 (IP) device&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TAP&lt;/code&gt;, a level 2 (MAC) device&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Being a network device allows OpenVPN to support diverse protocols (anything over IP with &lt;code&gt;TUN&lt;/code&gt; and anything over Eth802.3 with &lt;code&gt;TAP&lt;/code&gt;) with diverse destinations (different IP addresses, broadcasts etc.) and diverse ports. However, to do that, it has to preserve the original packet structure, so it has to take most of the original packet, wrap it in its own packet (to encrypt and give it a new destination), and send it to ther other OpenVPN instance, where it's unpacked.&lt;br&gt;
This generates overhead, like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://blog.backslasher.net/images/ssh-openvpn-tunneling/diag-openvpn.jpg"&gt;&lt;/p&gt;
&lt;h4&gt;SSH connection forwarding&lt;/h4&gt;
&lt;p&gt;On the other hand, SSH connection forwarding operates at layer 4 (TCP). Because of that, you can only forward one port (unless you're using dynamic forwarding, which has its own overhead), and it has to be on TCP/IP.
However, because SSH operates at a higher OSI layer, less of the original data has to be preseved, so it has less overhead. It looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://blog.backslasher.net/images/ssh-openvpn-tunneling/diag-ssh.jpg"&gt;&lt;/p&gt;
&lt;h3&gt;Some SSH &lt;code&gt;netstat&lt;/code&gt;s&lt;/h3&gt;
&lt;p&gt;I recorded my socket status when running &lt;code&gt;redis-cli&lt;/code&gt; over SSH forwarding.&lt;br&gt;
The redis server is listening on port 6379, and the forwarding is on port 20000.&lt;br&gt;
The commands I used are:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ssh -f &amp;lt;SERVER IP&amp;gt; -L &lt;span class="m"&gt;20000&lt;/span&gt;:127.0.0.1:6379 -N
redis-cli -p &lt;span class="m"&gt;20000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I removed the listening &lt;code&gt;sshd&lt;/code&gt; socket, because it's irrelevant.&lt;br&gt;
&lt;strong&gt;Before running &lt;code&gt;redis-cli&lt;/code&gt;&lt;/strong&gt;, we can see SSH has an established a tunnel and  listening &lt;code&gt;localhost&lt;/code&gt; socket on the client&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;backslasher@client$ netstat -nap | grep -P &amp;#39;(ssh|redis)&amp;#39;
...
tcp        0      0 127.0.0.1:20000             0.0.0.0:*                   LISTEN      20879/ssh
tcp        0      0 10.105.16.225:53142         &amp;lt;SERVER IP&amp;gt;:22              ESTABLISHED 20879/ssh
...

backslasher@server$ netstat -nap | grep -P &amp;#39;(ssh|redis)&amp;#39;
...
tcp        0      0 0.0.0.0:6379                0.0.0.0:*                   LISTEN      54328/redis-server
tcp        0      0 &amp;lt;SERVER IP&amp;gt;:22              &amp;lt;CLIENT IP&amp;gt;:53142           ESTABLISHED 53692/sshd
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;After running &lt;code&gt;redis-cli&lt;/code&gt;&lt;/strong&gt;, we can see the redis socket on the server, originating from sshd&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;backslasher@client$ netstat -nap | grep -P &amp;#39;(ssh|redis)&amp;#39;
...
tcp        0      0 127.0.0.1:20000             0.0.0.0:*                   LISTEN      20879/ssh
tcp        0      0 127.0.0.1:20000             127.0.0.1:53142             ESTABLISHED 20879/ssh
tcp        0      0 127.0.0.1:53142             127.0.0.1:20000             ESTABLISHED 21692/redis-cli
...

backslasher@server$ netstat -nap | grep -P &amp;#39;(ssh|redis)&amp;#39;
...
tcp        0      0 0.0.0.0:6379                0.0.0.0:*                   LISTEN      54328/redis-server
tcp        0      0 127.0.0.1:6379              127.0.0.1:42680             ESTABLISHED 54328/redis-server
tcp        0      0 127.0.0.1:42680             127.0.0.1:6379              ESTABLISHED 54333/sshd
tcp        0      0 &amp;lt;SERVER IP&amp;gt;:22              &amp;lt;CLIENT IP&amp;gt;:53142           ESTABLISHED 52889/sshd
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As we can see, SSH creates a loopback port on both client and server, so neither address each other directly.&lt;br&gt;
Thanks to that, this information (client IP/port, server IP/port) doesn't have to be transferred, saving overhead.&lt;/p&gt;
&lt;h3&gt;TL;DR&lt;/h3&gt;
&lt;p&gt;As long as you only need one TCP port forwarded, SSH is a much faster choice, because it has less overhead.&lt;/p&gt;</content><category term="FOSS"></category><category term="Mysteries Solved"></category><category term="Networking"></category><category term="Linux"></category><category term="SSH"></category><category term="Security"></category></entry><entry><title>AWS's Block Device Mapping in CentOS</title><link href="https://blog.backslasher.net/aws-block-device-centos.html" rel="alternate"></link><published>2014-12-10T15:40:00+01:00</published><updated>2014-12-10T15:40:00+01:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2014-12-10:/aws-block-device-centos.html</id><summary type="html">&lt;h3&gt;The Story&lt;/h3&gt;
&lt;p&gt;I'm using Amazon's EC2 for some of my VMs, which run CentOS. 
When viewing Block Device Mappings (mapping between the virtual storage - ebs, ephemerals etc. and the block devices inside the VM) in CentOS 6.5, I ran into an annoying issue.
When inspecting my instance metadata using …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;The Story&lt;/h3&gt;
&lt;p&gt;I'm using Amazon's EC2 for some of my VMs, which run CentOS. 
When viewing Block Device Mappings (mapping between the virtual storage - ebs, ephemerals etc. and the block devices inside the VM) in CentOS 6.5, I ran into an annoying issue.
When inspecting my instance metadata using:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;curl http://169.254.169.254/latest/meta-data/block-device-mapping/ephemeral0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;My ephemeral drive shows up as &lt;code&gt;sdb&lt;/code&gt;.&lt;br&gt;
However, when viewing my actual devices, I found it became &lt;code&gt;sdf&lt;/code&gt;:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ls -l /dev/sd*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;lrwxrwxrwx. 1 root root 4 2014-12-10 13:09 /dev/sda -&amp;gt; xvde
lrwxrwxrwx. 1 root root 4 2014-12-10 13:09 /dev/sdf -&amp;gt; xvdf
lrwxrwxrwx. 1 root root 4 2014-12-10 13:09 /dev/sdg -&amp;gt; xvdg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This means I can't rely on the mappings for my scripts, meaning I can't easily differentiate between ephemeral drives (fast, free and get wiped every time the instance stops) and EBS drives. Pretty problematic.&lt;/p&gt;
&lt;h3&gt;Red herrings&lt;/h3&gt;
&lt;p&gt;I found a udev rule in &lt;code&gt;/etc/udev/rules.d/99-ami-udev.rules&lt;/code&gt;, which looked like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;KERNEL==&amp;quot;xvd*&amp;quot;, PROGRAM=&amp;quot;/usr/sbin/ami-udev %k&amp;quot;, SYMLINK+=&amp;quot;%c&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Which led me to &lt;code&gt;/usr/sbin/ami-udev&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$#&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; -ne &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$0&lt;/span&gt;&lt;span class="s2"&gt; &amp;lt;device&amp;gt;&amp;quot;&lt;/span&gt; &amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;
  &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;grep -qE &lt;span class="s1"&gt;&amp;#39;xvd[a-z][0-9]?&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; sd&lt;span class="k"&gt;$(&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;1&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s2"&gt;&amp;quot;y/[e-v]/[a-z]/&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;2&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
  &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;which led me to read about &lt;code&gt;sed&lt;/code&gt;s "transliteration". &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;All for nothing, because the problem wasn't there&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;The true issue&lt;/h3&gt;
&lt;p&gt;For reasons I don't completely understand (I'm sure they're valid, I just don't understand them), RHEL guys decided to change &lt;code&gt;xen_blkfront&lt;/code&gt;, the module in charge of loading virtualized Xen hard drives.&lt;br&gt;
&lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=729586"&gt;This Bugzilla entry&lt;/a&gt; points out the issue - virtual SCSI devices (which is what Amazon is using) are now starting at "e", meaning the first device is &lt;code&gt;xvde&lt;/code&gt; (rather than &lt;code&gt;xvda&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;While not an issue by itself, Amazon's metadata service is unaware of this change, causing the metadata to disagree with the real data.&lt;/p&gt;
&lt;h3&gt;The road I didn't take&lt;/h3&gt;
&lt;p&gt;The first solution that I tried is to modify the parameter mentioned in the entry (&lt;code&gt;sda_is_xvda&lt;/code&gt;) to cause the kernel to start naming the devices in the "right" order.&lt;br&gt;
This method has the following steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Make sure nothing depends on the current block device names&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add an entry to &lt;code&gt;modprobe&lt;/code&gt; to change the parameter &lt;code&gt;sda_is_xvda&lt;/code&gt; to 1.&lt;br&gt;
  I did it using&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; options xen_blkfront &lt;span class="nv"&gt;sda_is_xvda&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sudo tee /etc/modprobe.d/xen_blkfront.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rebuild the kernel image (since this is part of the image)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo dracut -f
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reboot and check for modified drives&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I chose not to do this because I didn't want to customize my kernel if I didn't have to, not to mention mandating a reboot before continuing my setup.&lt;/p&gt;
&lt;h3&gt;The road I took&lt;/h3&gt;
&lt;p&gt;While less elegant, I've decided to compensate for RHEL's nonsense in my scripts.&lt;br&gt;
It's not that complicated (&lt;code&gt;echo sdb | perl -p -e 'substr($_,2,1)=~tr{a-j}{e-p}'&lt;/code&gt; prints &lt;code&gt;sdf&lt;/code&gt;), but I needed a way to make sure the server has this "&lt;code&gt;xvde&lt;/code&gt; is the first iscsi device" configuration before compensating for it.&lt;br&gt;
My solution to this issue was to compare this (root drive as seen by AWS):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;r&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;curl -s http://169.254.169.254/latest/meta-data/block-device-mapping/root&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;r&lt;/span&gt;&lt;span class="p"&gt;: -2:&lt;/span&gt;&lt;span class="nv"&gt;1&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;to this (root drive IRL):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;mount &lt;span class="p"&gt;|&lt;/span&gt; perl -nae &lt;span class="s1"&gt;&amp;#39;print substr($F[0],-1),&amp;quot;\n&amp;quot; if / on \/ /;&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If these results are different, that means that AWS and our OS aren't seeing eye-to-eye, and we need to compensate.  &lt;/p&gt;
&lt;h3&gt;Bonus - Chef test&lt;/h3&gt;
&lt;p&gt;This is my real implementation in Chef:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;aws_root&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:ec2&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="ss"&gt;:block_device_mapping_root&lt;/span&gt;&lt;span class="o"&gt;][-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;real_root&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`mount`&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="sr"&gt;/ on \/ /&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="sr"&gt;/^([^ ]+[a-zA-Z])\d? /&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;][-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;block_diff&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;aws_root&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;real_root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;real_root&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;ord&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;aws_root&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;ord&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="FOSS"></category><category term="Linux"></category><category term="AWS"></category><category term="Virtualization"></category><category term="Mysteries Solved"></category><category term="Ruby"></category><category term="Perl"></category><category term="Scripts"></category><category term="Chef"></category></entry><entry><title>Downloading Artifacts from Jenkins with Authentication</title><link href="https://blog.backslasher.net/downloading-artifacts-from-jenkins-with-authentication.html" rel="alternate"></link><published>2014-11-27T15:12:00+01:00</published><updated>2014-11-27T15:12:00+01:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2014-11-27:/downloading-artifacts-from-jenkins-with-authentication.html</id><summary type="html">&lt;h3&gt;Some Background&lt;/h3&gt;
&lt;p&gt;Jenkins is a platform for build automation, and as such allows you to store the results of the build (the binaries, commonly known as "artifacts") for later.&lt;br/&gt;
&lt;img alt="" src="https://blog.backslasher.net/images/artifacts-jenkins-authentication/jenkins-ui1.png"/&gt; &lt;/p&gt;
</summary><content type="html">&lt;h3&gt;Some Background&lt;/h3&gt;
&lt;p&gt;Jenkins is a platform for build automation, and as such allows you to store the results of the build (the binaries, commonly known as "artifacts") for later.&lt;br&gt;
&lt;img alt="" src="https://blog.backslasher.net/images/artifacts-jenkins-authentication/jenkins-ui1.png"&gt;  &lt;/p&gt;

&lt;p&gt;I saw other people on the internet manually downloading their results via the web UI:&lt;br&gt;
&lt;img alt="" src="https://blog.backslasher.net/images/artifacts-jenkins-authentication/jenkins-ui2.png"&gt;&lt;br&gt;
However, I wanted to pull the artifacts from my automation platform (currently Chef), and ran into an authentication predicament.&lt;/p&gt;
&lt;h3&gt;The Problem&lt;/h3&gt;
&lt;p&gt;Normally, when using HTTP basic authentication, there's a "challenge-response" mechanism, looking something like this:&lt;br&gt;
&lt;img alt="" src="https://blog.backslasher.net/images/artifacts-jenkins-authentication/http-auth.png"&gt;  &lt;/p&gt;
&lt;p&gt;However, Jenkins &lt;a href="https://wiki.jenkins-ci.org/display/JENKINS/Authenticating+scripted+clients"&gt;doesn't challenge clients for credentials&lt;/a&gt; (response 401), and instead fails immediatly (response 403).&lt;br&gt;
This is called &lt;a href="http://hc.apache.org/httpclient-3.x/authentication.html#Preemptive_Authentication"&gt;"Preemptive authentication"&lt;/a&gt;, and is considered a bad habit because the client hands out credentials when it's not definitely required. Therefore, most clients require special configuration to handle this.&lt;br&gt;
For instance, when using &lt;code&gt;wget&lt;/code&gt;, one can use:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;wget --auth-no-challenge --http-user&lt;span class="o"&gt;=&lt;/span&gt;USER --http-password&lt;span class="o"&gt;=&lt;/span&gt;BESTPASS http://server/jenkins
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;However, when using any tool where the URL is implicit, such as &lt;a href="https://pip.pypa.io/en/latest/reference/pip_install.html"&gt;PIP&lt;/a&gt; or Chef's &lt;a href="https://docs.getchef.com/resource_remote_file.html"&gt;remote_file&lt;/a&gt;, I can only provide credentials by specifying them in the URL (e.g. &lt;code&gt;http://back:slasher@private.com/repo&lt;/code&gt;), so I don't have any way of modifying the authentication method.&lt;/p&gt;
&lt;p&gt;The result - I can't download artifacts directly from Jenkins, messing up my deployment cookbooks.&lt;br&gt;
I thought about storing the results in a secondary server to act as a repo, but I really liked having Jenkins automatic maintenance (only keeping the last successful build's artifact) and the simplicity of downloading from Jenkins directly, because less steps in building-downloading-installing means less places to fail.&lt;/p&gt;
&lt;h3&gt;The Solution&lt;/h3&gt;
&lt;p&gt;I ended up using Apache on the Jenkins server as a credentials-requiring-proxy, meaning that:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Apache will require credentials using the good-old "challenge-response" method&lt;/li&gt;
&lt;li&gt;Apache will forward the request, including the now-provided crednetials, to Jenkins&lt;/li&gt;
&lt;li&gt;Jenkins will do it's thing, providing the latest build's artifacts&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The setup was as pretty standard reverse proxy, except for the authentication part - I needed Apache to require credetials, but accept any non-empty set.&lt;br&gt;
I used &lt;a href="http://httpd.apache.org/docs/2.2/mod/mod_authn_anon.html"&gt;mod_authn_anon&lt;/a&gt; to require authentication with &lt;code&gt;*&lt;/code&gt; as the value, causing it to accept any user/password provided.&lt;br&gt;
The result looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;VirtualHost&lt;/span&gt; &lt;span class="s"&gt;*:1234&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;Location&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;# Allow any user, but require one&lt;/span&gt;
    &lt;span class="nb"&gt;Anonymous&lt;/span&gt; *
    &lt;span class="nb"&gt;AuthType&lt;/span&gt; basic
    &lt;span class="nb"&gt;AuthName&lt;/span&gt; &amp;#39;Jenkins Proxy&amp;#39;
    &lt;span class="nb"&gt;AuthBasicProvider&lt;/span&gt; anon
    &lt;span class="nb"&gt;Require&lt;/span&gt; valid-user
&lt;span class="nt"&gt;&amp;lt;/Location&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;ProxyPass&lt;/span&gt; / http://localhost:1111/
&lt;span class="nt"&gt;&amp;lt;/VirtualHost&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Where &lt;code&gt;http://localhost:1111/&lt;/code&gt; is Jenkins' normal web UI.&lt;br&gt;
Since I only use "end" URLs (as in not following redirections from the server), I didn't need to add a &lt;a href="http://httpd.apache.org/docs/2.2/mod/mod_proxy.html#proxypassreverse"&gt;ProxyPassReverse&lt;/a&gt; directive like &lt;code&gt;ProxyPassReverse / http://localhost:1111/&lt;/code&gt;, which causes Apache to rewrite HTTP headers to match the proxy rather than the original server.&lt;/p&gt;
&lt;p&gt;I won't post the entire apache configuration, because it's pretty trivial. However, the modules I needed are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mod_proxy&lt;/li&gt;
&lt;li&gt;mod_proxy_http&lt;/li&gt;
&lt;li&gt;mod_auth_basic&lt;/li&gt;
&lt;li&gt;mod_authn_anon&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now everything works and I'm happy.&lt;/p&gt;
&lt;h3&gt;Attribution&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;HTTP Authentication diagram from &lt;a href="https://docs.oracle.com/cd/E19226-01/820-7627/bncbo/index.html"&gt;Oracle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Wget configuration for Jenkins - &lt;a href="http://www.braggfamily.com/2013/03/download-artifacts-from-jenkins-with.html"&gt;Ed Bragg&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="FOSS"></category><category term="Jenkins"></category><category term="Linux"></category><category term="Security"></category><category term="HTTP"></category></entry><entry><title>Git Prompt Variables</title><link href="https://blog.backslasher.net/git-prompt-variables.html" rel="alternate"></link><published>2014-10-22T09:05:00+02:00</published><updated>2014-10-22T09:05:00+02:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2014-10-22:/git-prompt-variables.html</id><summary type="html">&lt;p&gt;I recently reinstalled my laptop and had to reconfigure my git prompt.
I use the git prompt script that is included in Ubuntu's git package, and integrate it into my prompt by editing &lt;code&gt;~/.bashrc&lt;/code&gt;, executing &lt;code&gt;source /etc/bash_completion.d/git-prompt&lt;/code&gt;, and adding &lt;code&gt;$(__git_ps1)&lt;/code&gt; to my &lt;code&gt;PS1&lt;/code&gt; variable, just before the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I recently reinstalled my laptop and had to reconfigure my git prompt.
I use the git prompt script that is included in Ubuntu's git package, and integrate it into my prompt by editing &lt;code&gt;~/.bashrc&lt;/code&gt;, executing &lt;code&gt;source /etc/bash_completion.d/git-prompt&lt;/code&gt;, and adding &lt;code&gt;$(__git_ps1)&lt;/code&gt; to my &lt;code&gt;PS1&lt;/code&gt; variable, just before the ending &lt;code&gt;\$&lt;/code&gt; (which is the final &lt;code&gt;$&lt;/code&gt; in your prompt).&lt;br&gt;
This gives me a basic prompt, that looks something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;nitz@computer:~/project (master)$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note the &lt;code&gt;(master)&lt;/code&gt; - that's the git prompt addition.&lt;br&gt;
However, there are environment variables that can be set before calling &lt;code&gt;git-prompt&lt;/code&gt;, that add more information to PS1. I always forget some because I haven't found an organized list of them, only comments in the &lt;code&gt;git-prompt&lt;/code&gt; file itself. I've decided to compile my own list.&lt;/p&gt;
&lt;h3&gt;The Script&lt;/h3&gt;
&lt;p&gt;I used this nifty script to extract all variables mentioned in the actual &lt;code&gt;git-prompt&lt;/code&gt; script with the pattern &lt;code&gt;GIT_PS_*&lt;/code&gt;, since it looks like those are the relevant variables.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;cat /usr/lib/git-core/git-sh-prompt &lt;span class="p"&gt;|&lt;/span&gt; perl -nle &lt;span class="s1"&gt;&amp;#39;print &amp;quot;$1&amp;quot; if (/(GIT_PS1_[a-zA-Z_]+)/)&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sort &lt;span class="p"&gt;|&lt;/span&gt; uniq
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GIT_PS1_DESCRIBE_STYLE&lt;/code&gt;&lt;br&gt;
  Modifies the way detached HEAD is shown. Possible values are:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;contains&lt;/code&gt;: Looks forward in the tree for a tag, so you know which tag you're behind&lt;/li&gt;
&lt;li&gt;&lt;code&gt;branch&lt;/code&gt;: Looks forward in the tree for a tag or a branch (whatever's nearest)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;describe&lt;/code&gt;: Looks backwards in the tree for a tag, so you know which tag you're ahead of&lt;/li&gt;
&lt;li&gt;default: If your exactly on a tag, display it.
  If the method you chose fails to find a tag/branch to display, you'll see the commit id instead.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GIT_PS1_SHOWCOLORHINTS&lt;/code&gt;&lt;br&gt;
&lt;code&gt;__git_ps1&lt;/code&gt; can be used to &lt;strong&gt;create&lt;/strong&gt; the PS1 prompt and not just its own output. If that's the case, a non-empty value tells git to color the prompt according to the current state (dirty, untracked files...)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GIT_PS1_SHOWDIRTYSTATE&lt;/code&gt;&lt;br&gt;
  Shows the "dirty" indicator - meaning whether you modified tracked files.
  Can be &lt;code&gt;*&lt;/code&gt; for unstaged changes, &lt;code&gt;+&lt;/code&gt; for staged changes, &lt;code&gt;#&lt;/code&gt; for "no HEAD to compare against" (usually only happens before initial commit)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GIT_PS1_SHOWSTASHSTATE&lt;/code&gt;&lt;br&gt;
  Shows the "stash" indicator - meaning whether you have files &lt;a href="http://git-scm.com/book/en/Git-Tools-Stashing"&gt;stashed&lt;/a&gt;.&lt;br&gt;
  Looks like &lt;code&gt;$&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GIT_PS1_SHOWUNTRACKEDFILES&lt;/code&gt;
  Shows the "untracked" indicator - meaning whether you have untracked files (files that are in the working directory but haven't been added using &lt;code&gt;git add&lt;/code&gt; to the repository).&lt;br&gt;
  Looks like &lt;code&gt;%&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;GIT_PS1_SHOWUPSTREAM&lt;/code&gt;&lt;br&gt;
  Shows the difference between the upstream branch and the current branch. I only use "auto", meaning that I get the following values:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;&lt;/code&gt; when I'm behind (I need to pull to get changes from the server)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;gt;&lt;/code&gt; when I'm ahead (I need to push to update the server with my changes)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; when I'm diverged from the server (some conflict resolution will be required)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;=&lt;/code&gt; when we're identical (no action is needed).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This obviously requires me to &lt;code&gt;fetch&lt;/code&gt; the remote server from time to time.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;How I did it&lt;/h3&gt;
&lt;p&gt;My prompt currently looks like this. The &lt;code&gt;if&lt;/code&gt; actually sets the prompt and is mostly unmodified (except for adding &lt;code&gt;$(__git_ps1)&lt;/code&gt;).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Git&lt;/span&gt;
&lt;span class="nv"&gt;GIT_PS1_SHOWDIRTYSTATE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;GIT_PS1_SHOWSTASHSTATE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;GIT_PS1_SHOWUNTRACKEDFILES&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;GIT_PS1_DESCRIBE_STYLE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;contains&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;GIT_PS1_SHOWUPSTREAM&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;auto&amp;#39;&lt;/span&gt;

&lt;span class="nb"&gt;source&lt;/span&gt; /etc/bash_completion.d/git-prompt

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$color_prompt&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; yes &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nv"&gt;PS1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]$(__git_ps1)\$ &amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="nv"&gt;PS1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;${debian_chroot:+($debian_chroot)}\u@\h:\w$(__git_ps1)\$ &amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="nb"&gt;unset&lt;/span&gt; color_prompt force_color_prompt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="FOSS"></category><category term="git"></category><category term="bash"></category></entry><entry><title>Validating network segments using Puppet</title><link href="https://blog.backslasher.net/validating-network-segments-using-puppet.html" rel="alternate"></link><published>2014-09-25T13:10:00+02:00</published><updated>2014-09-25T13:10:00+02:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2014-09-25:/validating-network-segments-using-puppet.html</id><summary type="html">&lt;h2&gt;The Problem&lt;/h2&gt;
&lt;p&gt;When configuring KeepaliveD using Puppet, sometimes an interface name has to be used. Imagine a server with 2 interfaces (&lt;code&gt;eth0&lt;/code&gt;,&lt;code&gt;eth1&lt;/code&gt;), where one is facing the internal network and one is facing the internet.&lt;br&gt;
My puppet configuration for an internet-facing virtual interface can be something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="na"&gt;keepalived&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="na"&gt;vrrp …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h2&gt;The Problem&lt;/h2&gt;
&lt;p&gt;When configuring KeepaliveD using Puppet, sometimes an interface name has to be used. Imagine a server with 2 interfaces (&lt;code&gt;eth0&lt;/code&gt;,&lt;code&gt;eth1&lt;/code&gt;), where one is facing the internal network and one is facing the internet.&lt;br&gt;
My puppet configuration for an internet-facing virtual interface can be something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="na"&gt;keepalived&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="na"&gt;vrrp&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="na"&gt;instance&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;external_interface&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;interface&lt;/span&gt;         &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;eth1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;state&lt;/span&gt;             &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;MASTER&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;virtual_router_id&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;50&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;priority&lt;/span&gt;          &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;100&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;virtual_ipaddress&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;10.0.0.50&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;10.0.0.51&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;10.0.0.52&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;However, by doing so, I'm assuming that eth1 is the external network interface. When configuring the server manually, I use &lt;code&gt;ifconfig&lt;/code&gt; to manually check for misconfigurations (e.g. &lt;code&gt;eth0&lt;/code&gt; is the internet-facing interface). I'd like to do the same on Puppet.&lt;/p&gt;
&lt;h2&gt;The Solution&lt;/h2&gt;
&lt;p&gt;Until I have the courage to automatically rename my network devices, I configured Puppet to fail the catalog compilation (thus avoid misconfiguring KeepaliveD) whenever an adapter doesn't have the address I expect it to be (meaning it's misconfigured). I use this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="na"&gt;segment_verify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nv"&gt;$iface_name=$title,&lt;/span&gt;
    &lt;span class="nv"&gt;$required_network=undef,&lt;/span&gt;
    &lt;span class="nv"&gt;$segment_regex=undef&lt;/span&gt;
&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;

&lt;span class="c"&gt;    # resolve network&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;$segment_regex&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;$required_network&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;fail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Cannot define both required_network and segment_regex&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;$regex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$segment_regex&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nv"&gt;$required_network&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;private&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;$regex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;^10\.0\.0\.&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="na"&gt;public&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;$regex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;^192\.44\.283\.$&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;fail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Unkown required_network &amp;#39;${required_network}&amp;#39;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nv"&gt;$ip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;inline_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;lt;%=@ipaddress_${iface_name}%&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nv"&gt;$ip&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;fail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Could not find IP of interface $iface_name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;inline_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;lt;%=if /${regex}/.match(&amp;#39;${ip}&amp;#39;) then &amp;#39;yes&amp;#39; else &amp;#39;no&amp;#39; end %&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;$match&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;yes&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;fail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Interface ${iface_name} with IP ${ip} doesn&amp;#39;t match &amp;#39;${regex}&amp;#39;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you can see, this code is hardly elegant. I can't use CIDR notations ("10.0.0.0/24") and I use ruby templates for the regex. However, it works.&lt;br&gt;
This form of work is imposed on me because Puppet's DSL is designed to be declarative rather than procedural, so many "procedural" bits are broken. In my case, there is no possibility to convert a provided string (&lt;code&gt;^10\.0\.0\.&lt;/code&gt;) to a regular expression, so I have to accomplish that using templates. Same oddity for getting &lt;code&gt;ipaddress_ETHNAME&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I guess I could use a local resource rather than a function, but this method does its trick - it allows me to specify a network adapter and a regex its IP should match to, and fail the catalog if it's not so. For instance:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="na"&gt;segment_verify&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;eth0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;required_network&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;private&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="na"&gt;segment_verify&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;eth1_ends_with_100&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;iface_name&lt;/span&gt;    &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;eth1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;segment_regex&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;\.100$&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="FOSS"></category><category term="Puppet"></category><category term="Networking"></category><category term="Regex"></category></entry><entry><title>Accessing a specific server in an HTTP cluster</title><link href="https://blog.backslasher.net/accessing-a-specific-server-in-an-http-cluster.html" rel="alternate"></link><published>2014-09-10T14:00:00+02:00</published><updated>2014-09-10T14:00:00+02:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2014-09-10:/accessing-a-specific-server-in-an-http-cluster.html</id><summary type="html">&lt;h2&gt;The Problem&lt;/h2&gt;
&lt;h3&gt;Part1 - Fault tolerence&lt;/h3&gt;
&lt;p&gt;A common configuration of web servers is setting up multiple servers to serve the same content, with a load-balancing method redirecting / forwarding clients to a specific server.&lt;br&gt;
For instance, let's say I'm using servers &lt;code&gt;server&lt;/code&gt; and &lt;code&gt;otherserver&lt;/code&gt; to serve the site &lt;code&gt;cluster-name&lt;/code&gt;.&lt;br&gt;
The cheapest (as …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;The Problem&lt;/h2&gt;
&lt;h3&gt;Part1 - Fault tolerence&lt;/h3&gt;
&lt;p&gt;A common configuration of web servers is setting up multiple servers to serve the same content, with a load-balancing method redirecting / forwarding clients to a specific server.&lt;br&gt;
For instance, let's say I'm using servers &lt;code&gt;server&lt;/code&gt; and &lt;code&gt;otherserver&lt;/code&gt; to serve the site &lt;code&gt;cluster-name&lt;/code&gt;.&lt;br&gt;
The cheapest (as in "not requiring any additional software/hardware") way of doing it is creating the following DNS records:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;cluster-name IN CNAME server
cluster-name IN CNAME otherserver
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Due to  &lt;a href="http://en.wikipedia.org/wiki/Round-robin_DNS"&gt;round-robin DNS&lt;/a&gt;, about 50% of the clients querying for &lt;code&gt;cluster-name&lt;/code&gt; will get the record pointing to &lt;code&gt;server&lt;/code&gt; first (and therefor access it), and the other ones will get &lt;code&gt;otherserver&lt;/code&gt; first. As long as the &lt;code&gt;server&lt;/code&gt; and &lt;code&gt;otherserver&lt;/code&gt; are configured to reply to requests containing &lt;code&gt;Host:"cluster-nane"&lt;/code&gt; with the right application, everything works fine.  &lt;/p&gt;
&lt;h3&gt;Part2 - Monitoring&lt;/h3&gt;
&lt;p&gt;A popular weay to monitor web applications is hitting a specific page and making sure it comes out OK (for example, fetching &lt;code&gt;/test&lt;/code&gt; and making sure it's empty).&lt;br&gt;
When you have just one server, this is easy to test. For example, one can use:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;SERVER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://site-adress&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt; -z &lt;span class="k"&gt;$(&lt;/span&gt;curl -s &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$SERVER&lt;/span&gt;&lt;span class="s2"&gt;/test&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;$SERVER is damaged&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;However, when using a configuration with mutliple servers, you can't use the cluster name, because you'll get a random server, and as a responsible admin you want to test all of them individually.&lt;br&gt;
When the servers redirect any hostname to this site, this is still relatively easy to script, like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;SERVERS&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;server&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;otherserver&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; SERVER in &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;SERVERS&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="o"&gt;[&lt;/span&gt; -z &lt;span class="k"&gt;$(&lt;/span&gt;curl -s &lt;span class="s2"&gt;&amp;quot;http://&lt;/span&gt;&lt;span class="nv"&gt;$SERVER&lt;/span&gt;&lt;span class="s2"&gt;/test&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;$SERVER is damaged&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;However, most sites are configured on &lt;a href="http://en.wikipedia.org/wiki/Virtual_hosting"&gt;virtual hosting&lt;/a&gt;, so they respond only to a specific hostname (mostly to allow serving several sites on the same port). When using the above script on such sites, it won't work (because the host name is wrong).&lt;/p&gt;
&lt;h2&gt;The Solution&lt;/h2&gt;
&lt;p&gt;Any proper solution should modify the client (the system running the monitoring script) and not the server, so I'm not talking about serving the site at another IP etc.&lt;/p&gt;
&lt;h3&gt;The primitive one&lt;/h3&gt;
&lt;p&gt;The most primitive way of accessing a specific server is by modifying the HOSTS file, adding a record like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;&amp;lt;server ip&amp;gt;    cluster-name&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;However, modifying the HOSTS file requires root/admin privilleges, might affect other processes on the machine and feels messy.&lt;/p&gt;
&lt;h3&gt;The universal one&lt;/h3&gt;
&lt;p&gt;This method works with every tool I saw, because it's utilizing &lt;a href="http://en.wikipedia.org/wiki/Proxy_server#Web_proxy_servers"&gt;HTTP/Web Proxy&lt;/a&gt; support, which is pretty basic.&lt;br&gt;
Normally, the client opens a socket to the hostname/port combination in the URL, writes the HTTP request and reads the response.&lt;br&gt;
When using an HTTP proxy, the client opens a socket to the proxy hostname/port combination and reads the response. The proxy is in charge of contacting the actual host via the &lt;code&gt;Host&lt;/code&gt; HTTP header.&lt;br&gt;
By specifying the server as the proxy, we can keep the request "addressed" to &lt;code&gt;cluster-name&lt;/code&gt; (by using the HTTP header &lt;code&gt;Host: "cluster-name"&lt;/code&gt;), but actually access the server we want.&lt;br&gt;
And now for some examples, assuming &lt;code&gt;server:port&lt;/code&gt; is the actual server/port listening, and &lt;code&gt;http://cluster-name/site&lt;/code&gt; is the target site.&lt;/p&gt;
&lt;h4&gt;Using cURL / wget&lt;/h4&gt;
&lt;p&gt;Both applications can use the environment variable &lt;code&gt;http_proxy&lt;/code&gt;, so the syntax is quite elegant.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;http_proxy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://server:port&amp;#39;&lt;/span&gt; curl &lt;span class="s1"&gt;&amp;#39;http://cluster-name/site&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;http_proxy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://server:port&amp;#39;&lt;/span&gt; wget &lt;span class="s1"&gt;&amp;#39;http://cluster-name/site&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;Using PowerShell&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;$prox&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;new-object&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Net&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WebProxy&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://server:port&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;$req&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="no"&gt;[System.Net.WebRequest]&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://cluster-name/site&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;$req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Proxy&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$prox&lt;/span&gt;
&lt;span class="nv"&gt;$req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetResponse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;Using Python&lt;/h4&gt;
&lt;p&gt;Using the &lt;a href="http://docs.python-requests.org/en/latest/"&gt;requests&lt;/a&gt; module&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="n"&gt;proxies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;http&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://server:port&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://cluster-name/site&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;proxies&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;proxies&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;Using Ruby&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;net/http&amp;#39;&lt;/span&gt;
&lt;span class="no"&gt;Net&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;HTTP&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cluster-name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;server&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;port&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cluster-name/site&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="FOSS"></category><category term="HTTP"></category><category term="Web"></category><category term="Scripts"></category><category term="PowerShell"></category><category term="curl"></category><category term="linux"></category></entry><entry><title>Linux and SSDs - Should You TRIM?</title><link href="https://blog.backslasher.net/linux-and-ssds-should-you-trim.html" rel="alternate"></link><published>2014-07-16T15:46:00+02:00</published><updated>2014-07-16T15:46:00+02:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2014-07-16:/linux-and-ssds-should-you-trim.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Although my experience is with Debian, I think this post helps anyone using some modern Linux distribution.  &lt;/p&gt;
&lt;h3&gt;What is TRIM?&lt;/h3&gt;
&lt;p&gt;As a Windows sysadmin, I didn't really consider the cons of running on top of &lt;a href="http://en.wikipedia.org/wiki/Solid_state_drives"&gt;Solid-State Drives&lt;/a&gt;, or SSDs. These drives are based on &lt;a href="http://en.wikipedia.org/wiki/Flash_memory"&gt;flash memory&lt;/a&gt; (similar to a Disk-On-Key), rather than metallic plates.&lt;br/&gt;
A big difference between magnetic hard drives and SSDs is block reuse.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Although my experience is with Debian, I think this post helps anyone using some modern Linux distribution.  &lt;/p&gt;
&lt;h3&gt;What is TRIM?&lt;/h3&gt;
&lt;p&gt;As a Windows sysadmin, I didn't really consider the cons of running on top of &lt;a href="http://en.wikipedia.org/wiki/Solid_state_drives"&gt;Solid-State Drives&lt;/a&gt;, or SSDs. These drives are based on &lt;a href="http://en.wikipedia.org/wiki/Flash_memory"&gt;flash memory&lt;/a&gt; (similar to a Disk-On-Key), rather than metallic plates.&lt;br&gt;
A big difference between magnetic hard drives and SSDs is block reuse.&lt;/p&gt;


&lt;h4&gt;The Problem&lt;/h4&gt;
&lt;p&gt;Every storage device is seen (with the driver's help) as a collection of sectors (or "blocks") by the operating system, which can read and write a fixed amount of data (512 bytes / 4KB) to every sector. File systems are different ways of using said sectors to store files, directories, metadata etc.&lt;br&gt;
In magnetic hard drives, used and unused blocks take the same time to write to. Modern file systems exploit that fact in different ways. For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Instead of deleting a file, they just "forget" about it, leaving the blocks in their used state (&lt;a href="http://whereismydata.wordpress.com/2009/05/02/forensics-what-happens-when-files-are-deleted/"&gt;Example&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Copy_on_write"&gt;Copy-On-Write&lt;/a&gt; techniques allow file systems to "effortlessly" remember the previous content of files (for versioning, corruption protection etc.), by writing modified content on free blocks&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In SSDs, however, this is not the situation. I read a metaphor somewhere thats it's like building a house where a house is already present - you have to demolish the existing house, and only after that you can build your own.
For that reason, used blocks take more time writing to, because the SSD has to erase the block first. The result - after many writes, the performance of SSDs degrades dramatically, even lower than traditional HDs.&lt;br&gt;
&lt;strong&gt;Note&lt;/strong&gt;: There is an additional issue called &lt;a href="http://en.wikipedia.org/wiki/Write_amplification"&gt;Write amplification&lt;/a&gt;, where you can only delete clusters of blocks, requiring the SSD to rearrange partially used blocks. In modern SSD drives, this is solved by the drive's own firmware/configuration as long as you keep the file system trimmed.&lt;/p&gt;
&lt;h4&gt;The Solution&lt;/h4&gt;
&lt;p&gt;The solution to that problem is a new OS-Device command called "&lt;a href="http://en.wikipedia.org/wiki/TRIM"&gt;TRIM&lt;/a&gt;", telling the drive "I don't need this block anymore. Erase it when you have the time". This is a new idea, because traditional HDs don't need that information.&lt;/p&gt;
&lt;h3&gt;Trimming and You&lt;/h3&gt;
&lt;h4&gt;Naming&lt;/h4&gt;
&lt;p&gt;You'll often see TRIM being called "discard". This is because the concept  has been generalised, and can apply to &lt;a href="http://en.wikipedia.org/wiki/Thin_provisioning"&gt;thin-provisioned&lt;/a&gt; LUNs as well.&lt;/p&gt;
&lt;h4&gt;Timing&lt;/h4&gt;
&lt;p&gt;The most obvious way to use TRIM is like Windows does - whenever blocks are no longer needed (e.g. a file was deleted), let the SSD know.&lt;br&gt;
In Linux, this option has &lt;strong&gt;negative performance impact&lt;/strong&gt;, because the Linux kernel &lt;a href="http://en.opensuse.org/SDB:SSD_discard_%28trim%29_support#Kernel_support"&gt;currently handles one block at a time&lt;/a&gt;. For instance, if I delete a file containing 500 blocks, instead of one IO operation (removing the pointer to the file from the directory listing), the kernel will issue 501 IO operations (remove the pointer, TRIM block 1, TRIM block 2...).&lt;br&gt;
In the general use-case, this &lt;a href="http://people.redhat.com/lczerner/discard/ext4_discard.html"&gt;ruins&lt;/a&gt; the performance advantage of SSDs.&lt;br&gt;
I think this is only a temporary setback, because Windows (supposedly) handles TRIM the correct way - using a range.&lt;/p&gt;
&lt;p&gt;If we take an example from Ubuntu, version 14.04 supports trimming but &lt;a href="https://launchpad.net/ubuntu/+source/util-linux/2.20.1-5.1ubuntu14"&gt;uses a weekly scheduled execution&lt;/a&gt; of &lt;a href="http://man7.org/linux/man-pages/man8/fstrim.8.html"&gt;fstrim&lt;/a&gt;. According to a quick Google search, this seems to be the preferred method, because you can execute it in a maintenance window, when I/O isn't peaking.&lt;/p&gt;
&lt;h4&gt;Support&lt;/h4&gt;
&lt;p&gt;Support for TRIM in Linux is partial.&lt;br&gt;
Mainstream &lt;strong&gt;file systems&lt;/strong&gt; (ext4, btrfs) support TRIM, either immediately (using "discard" mount option) or on demand ("fstrim").&lt;br&gt;
Some &lt;strong&gt;containers&lt;/strong&gt; (LVM, md) support passing TRIM commands from the contained file system and some don't. Some containers even issue "discard" requests by themselves if configured to, like LVM (with &lt;code&gt;issue_discards&lt;/code&gt; enabled) when removing volumes. These individual discards are only relevant when making configuration changes (deleting a RAID array) frequently, or when using snapshots.&lt;/p&gt;
&lt;h4&gt;Testing&lt;/h4&gt;
&lt;p&gt;There are many posts on testing TRIM, like &lt;a href="http://andyduffell.com/techblog/?p=852"&gt;this one&lt;/a&gt;, but they only test whether trimming already works, and not if you need it. IMHO, the only proper method to know is benchmarking, manually trimming (using fstrim) and benchmarking again.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Yes, you should trim, and by cronning &lt;code&gt;fstrim&lt;/code&gt;. It's worth it.&lt;/p&gt;</content><category term="FOSS"></category><category term="Mysteries Solved"></category><category term="Linux"></category><category term="FileSystem"></category><category term="Debian"></category><category term="Ramblings"></category><category term="Ubuntu"></category><category term="Performance"></category></entry><entry><title>My Pinning Guidelines</title><link href="https://blog.backslasher.net/my-pinning-guidelines.html" rel="alternate"></link><published>2014-06-14T12:10:00+02:00</published><updated>2014-06-14T12:10:00+02:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2014-06-14:/my-pinning-guidelines.html</id><summary type="html">&lt;p&gt;In my &lt;a href="https://blog.backslasher.net/why-pinning.html"&gt;previous post&lt;/a&gt; about
pinning I talked about the reasons to configure apt pinning.&lt;br&gt;
This post details my logic about what and how to pin.&lt;/p&gt;
&lt;h3&gt;Pinning technicalities&lt;/h3&gt;
&lt;h4&gt;How pinning is done&lt;/h4&gt;
&lt;p&gt;The best way to pin stuff is to add files in &lt;code&gt;/etc/apt/preferences.d/&lt;/code&gt;&lt;br&gt;
Those files are …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In my &lt;a href="https://blog.backslasher.net/why-pinning.html"&gt;previous post&lt;/a&gt; about
pinning I talked about the reasons to configure apt pinning.&lt;br&gt;
This post details my logic about what and how to pin.&lt;/p&gt;
&lt;h3&gt;Pinning technicalities&lt;/h3&gt;
&lt;h4&gt;How pinning is done&lt;/h4&gt;
&lt;p&gt;The best way to pin stuff is to add files in &lt;code&gt;/etc/apt/preferences.d/&lt;/code&gt;&lt;br&gt;
Those files are parsed whenever the package cache is updated (e.g. &lt;code&gt;apt-get
update&lt;/code&gt;), and rules inside the files are applied to the packages.&lt;br&gt;
You can view the official documentation about pinning using:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;man apt_preferences
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;What can you pin&lt;/h4&gt;
&lt;p&gt;Pinning is done on a per-option basis (package+version+origin), meaning
you can pin according to the different fields of an option. The field
details start at about line 289 in the &lt;code&gt;apt_preferences&lt;/code&gt; man page.&lt;br&gt;
Most times, pinning is done according to a specific origin (as in
"pinning a repository") or according to a name and version ( as in
"pinning a version"). You can obviously mix and match for your needs,
but test the results using:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo apt-get update
apt-cache policy PACKAGENAME
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;What to pin&lt;/h3&gt;
&lt;p&gt;There is no "right way" to pin packages (only wrong ones).&lt;br&gt;
Pinning is supposed to reflect the administrator's opinion of "which version of the
package is best", so think of what rules you'd follow if you installed
all packages by hand, and try and see how you can explain that to apt.&lt;br&gt;
These are some strategies I thought of.  &lt;/p&gt;
&lt;h4&gt;Latest is best (default)&lt;/h4&gt;
&lt;p&gt;The default behaviour is preferring the latest version available. When
installing packages only from the stable Debian repositories, this is a
good idea since the only updates are critical bug and security fixes.&lt;br&gt;
It also saves you the trouble of keeping the package version locked (and
needing to update the lock later).  &lt;/p&gt;
&lt;h4&gt;Keeping a certain version&lt;/h4&gt;
&lt;p&gt;Some software repositories offer several versions of the same package,
and let you choose which version to install.&lt;br&gt;
Pinning the package to a specific version will tell apt to prefer  that version if available.&lt;br&gt;
&lt;strong&gt;Note:&lt;/strong&gt; You might encounter dependency issues (see "version pinning and
dependencies" for the problem and possible solutions).  &lt;/p&gt;
&lt;h4&gt;Keeping a certain major/minor version&lt;/h4&gt;
&lt;p&gt;Like to the previous example, you may want to hold apt to a
specific major/minor version (e.g. puppet 3.1), but have it upgrade to
the highest build/revision (to allow bug/security updates that don't
modify behaviour). To do so, pin the package to a
&lt;a href="http://en.wikipedia.org/wiki/Globbing"&gt;globbed&lt;/a&gt; version, like &lt;code&gt;3.1.*&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;A last resort repository&lt;/h4&gt;
&lt;p&gt;Some packages aren't available in your official distribution's
repository, but are available on other repositories.&lt;br&gt;
For instance, &lt;a href="http://haproxy.1wt.eu/"&gt;HAProxy&lt;/a&gt; isn't available on the
Debian stable repo, but is available on the Debian &lt;a href="http://backports.debian.org/"&gt;backports
repo&lt;/a&gt;. If we just add the backports
repository, apt will upgrade everything to the backports version (since
every package option there has the same priority and a higher version
number).&lt;br&gt;
If we instead add the repo and pin it to a lower priority, apt will only
take from it packages it can't find anywhere else.  &lt;/p&gt;
&lt;h4&gt;A high priority repository&lt;/h4&gt;
&lt;p&gt;Similar to the last example, you could have a company repo with packages
compiled especially for you - passing additional security audits,
containing critical features, etc. You want apt to prefer package
options in that repo over "normal" options, even if their version number
is lower. To do so, pin the repository to a higher priority than the
default. Remember that you have to keep this repository up to date,
because apt will avoid applying upgrades found in the "normal"
repositories.  &lt;/p&gt;
&lt;h3&gt;Other points to consider&lt;/h3&gt;
&lt;p&gt;These aren't pinning strategies, but rather tips I picked up along they
way.  &lt;/p&gt;
&lt;h4&gt;Which priority numbers do I choose?&lt;/h4&gt;
&lt;p&gt;The examples don't contain actual priority numbers, since these are very delicate.&lt;br&gt;
Priority numbers do more than tell apt which option to prefer
- they modify apt's treatment of the package even further. The full
documentation is in the &lt;code&gt;apt_preferences&lt;/code&gt; man page, but for instance:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Priorities over 1000 instruct apt to install this package even if it
constitutes a downgrade&lt;/li&gt;
&lt;li&gt;Priorities lower than 100 will cause apt to only use this version if the package isn't installed at all (no upgrades).  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So choose your numbers carefully - if you don't want apt to change its
behaviour, stick to numbers around 500 (the default value).    &lt;/p&gt;
&lt;h4&gt;Version pinning and dependencies&lt;/h4&gt;
&lt;p&gt;When installing package dependencies (packages that are required for the
one you requested), to packages pinned by version, apt might behave
strangely:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The package may require a specific version of the dependency (for
    example, &lt;code&gt;puppet&lt;/code&gt; 3.3.1 requires &lt;code&gt;puppet-common&lt;/code&gt; &lt;strong&gt;exactly&lt;/strong&gt; in version
    3.3.1)&lt;/li&gt;
&lt;li&gt;When reviewing the dependency installation options, sorted by
    priority and version, the first result may be a different version
    (e.g. version 3.6.2)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this situation, apt is in a pickle - it can't satisfy the dependency
requirement by installing the highest-priority option.&lt;br&gt;
Different apt front-ends treat this dilemma differently:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Apt-get&lt;/strong&gt; gives up, giving a weird error like &lt;code&gt;X: depends
Y(=LOWVERSION) but HIGHVERSION is to be installed&lt;/code&gt;, combined with the
accusing statement &lt;code&gt;You have held broken packages&lt;/code&gt;.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://blog.backslasher.net/images/my-pinning-guidelines/apt-pinning-issue.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Aptitude&lt;/strong&gt; offers several solutions (aptitude always does), one of
them is what we want (installing the dependency):  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://blog.backslasher.net/images/my-pinning-guidelines/aptitude-pinning-puppet.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;strong&gt;python apt module&lt;/strong&gt; will throw an exception, telling you the
automatic dependency resolution failed.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://blog.backslasher.net/images/my-pinning-guidelines/python-apt-pinning.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;The solution&lt;/strong&gt; to this issue is to study the failed dependencies, and
pin them in the same way. Use aptitude's interactive UI to check for the
dependencies of your package, and find the ones with version constraints
(&lt;code&gt;=X.YY.ZZZZ&lt;/code&gt;). Those are the ones you'll need to pin.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://blog.backslasher.net/images/my-pinning-guidelines/aptitude-depends.png"&gt;&lt;/p&gt;
&lt;p&gt;Remember - wrong pinning could negatively impact your system's security,
performance, stability etc. Make sure you plan it carefully!&lt;/p&gt;</content><category term="FOSS"></category><category term="Security"></category><category term="Linux"></category><category term="Debian"></category><category term="Apt"></category></entry><entry><title>Why Pinning</title><link href="https://blog.backslasher.net/why-pinning.html" rel="alternate"></link><published>2014-06-14T09:05:00+02:00</published><updated>2014-06-14T09:05:00+02:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2014-06-14:/why-pinning.html</id><summary type="html">&lt;p&gt;There are plenty of guides about apt pinning, but no one really explains
the motivation to do so. It took me some time to understand that, so I
thought I'd write it down.  &lt;/p&gt;
&lt;h3&gt;The Issue&lt;/h3&gt;
&lt;p&gt;The mainstream method of downloading and installing packages from a
repository is via APT &lt;a href="http://en.wikipedia.org/wiki/Advanced_Packaging_Tool"&gt;(Advanced …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;There are plenty of guides about apt pinning, but no one really explains
the motivation to do so. It took me some time to understand that, so I
thought I'd write it down.  &lt;/p&gt;
&lt;h3&gt;The Issue&lt;/h3&gt;
&lt;p&gt;The mainstream method of downloading and installing packages from a
repository is via APT &lt;a href="http://en.wikipedia.org/wiki/Advanced_Packaging_Tool"&gt;(Advanced Packaging
Tool)&lt;/a&gt;. When using
apt, the administrator usually says which package he wants installed,
but apt needs a bit more information:&lt;br&gt;
&lt;strong&gt;Which source?&lt;/strong&gt;&lt;br&gt;
The same package may be available from multiple sources. For example, my
development server is set up to have 3 repositories, all containing some
version of python:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The Debian &lt;code&gt;stable&lt;/code&gt; repository, guaranteeing compatibility with other
    packages&lt;/li&gt;
&lt;li&gt;The Debian &lt;code&gt;backports&lt;/code&gt; repository, including more features but still
    pretty stable&lt;/li&gt;
&lt;li&gt;The Debian &lt;code&gt;unstable&lt;/code&gt; repository, offering many new features but
    risking weird behaviour and undiscovered bugs &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Unless told manually which repository to install from, apt has to choose
one by itself. &lt;br&gt;
&lt;strong&gt;Which version?&lt;/strong&gt;&lt;br&gt;
When maintaining a server farm, it's important to remember two things:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The software packages should be updated regularly, to protect the
    server from bugs and security vulnerabilities that were discovered
    (and fixed in newer versions).&lt;/li&gt;
&lt;li&gt;Some upgrades shouldn't be allowed, because they modify the
    software's behaviour in an unacceptable way. For instance, upgrading
    mongodb to version 2.4 changes the JavaScript engine to
    multithreading, possibly messing up some scripts. The administrator
    can't afford having some servers with the new versions and some not,
    so when installing a new server the administrator doesn't want the
    new package.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In short, apt should choose a version that is new, but not too new.  &lt;/p&gt;
&lt;h3&gt;The Solution - Priorities&lt;/h3&gt;
&lt;p&gt;To solve this issue, apt assigns each package option
(&lt;code&gt;name&lt;/code&gt;+&lt;code&gt;version&lt;/code&gt;+&lt;code&gt;source&lt;/code&gt;) a priority number. When installing a package, the
command usually looks something like:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo apt-get install puppet
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Apt-get then collects all of the possible options, sorts them by
descending priority (highest priority to lowest) and then by descending
version. It chooses the top option and installs that. The administrator
can manipulate the options' priorities, causing apt to prefer the
"right" version. &lt;br&gt;
For example, I pinned my puppet agent package to a specific version.&lt;br&gt;
When executing:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;apt-cache policy puppet
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We can see the pinning:&lt;br&gt;
&lt;img alt="" src="https://blog.backslasher.net/images/why-pinning/puppet-pinned.png"&gt;&lt;/p&gt;
&lt;h3&gt;Defaults&lt;/h3&gt;
&lt;p&gt;For Debian / Ubuntu, all of the sources have the same priority - 500.
Usually, apt only encounters one option available of every package, so
there is no collision. When installing / upgrading packages, apt chooses
the latest version released by the official repository - the best
package to install.  &lt;/p&gt;
&lt;h3&gt;Dangers of Pinning&lt;/h3&gt;
&lt;p&gt;Pinning causes apt to change its default behaviour, so if you're doing
it - you better have a reason. Incorrect pinning can cause:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Not upgrading old packages, meaning you're exposed to security,
    performance and reliability issues&lt;/li&gt;
&lt;li&gt;Upgrading to unstable versions, meaning you're exposed to (you
    guessed it) security, performance and reliability issues&lt;/li&gt;
&lt;li&gt;Installing nonfunctional packages - some sources may upload packages
    that are incorrectly built, or contain wrong metadata, causing them
    to misbehave and even break other packages&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See my &lt;a href="https://blog.backslasher.net/my-pinning-guidelines.html"&gt;other
post&lt;/a&gt; about pinning for guidelines about what to pin and how.  &lt;/p&gt;</content><category term="FOSS"></category><category term="Security"></category><category term="Linux"></category><category term="Debian"></category><category term="Apt"></category></entry><entry><title>Adding Repositories for Inspection</title><link href="https://blog.backslasher.net/adding-repositories-for-inspection.html" rel="alternate"></link><published>2014-06-12T12:46:00+02:00</published><updated>2014-06-12T12:46:00+02:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2014-06-12:/adding-repositories-for-inspection.html</id><summary type="html">&lt;p&gt;Sometime I want to inspect software repositories. However, I don't want my machine to actually install anything from it.&lt;br&gt;
To do so, I made a small bash function that both adds the repository and pins it to priority -1, telling apt to never install anything from it
(unless manually told …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Sometime I want to inspect software repositories. However, I don't want my machine to actually install anything from it.&lt;br&gt;
To do so, I made a small bash function that both adds the repository and pins it to priority -1, telling apt to never install anything from it
(unless manually told to).&lt;br&gt;
The files created in the process are printed to screen so they can be easily deleted.   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;#Usage:   add-repository-for-inspection NAME REPOINFO&lt;/span&gt;
&lt;span class="c1"&gt;#Example: add-repository-for-inspection wheezy-backports http://debian.co.il/debian wheezy-backports main&lt;/span&gt;

&lt;span class="k"&gt;function&lt;/span&gt; add-repository-for-inspection
&lt;span class="o"&gt;{&lt;/span&gt;
 &lt;span class="nv"&gt;NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
 &lt;span class="nb"&gt;shift&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
 &lt;span class="nv"&gt;REPO&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
 &lt;span class="c1"&gt;# Add repository&lt;/span&gt;
 &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;deb &lt;/span&gt;&lt;span class="nv"&gt;$REPO&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sudo tee /etc/apt/sources.list.d/&lt;span class="nv"&gt;$NAME&lt;/span&gt;.list &amp;gt;/dev/null &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/etc/apt/sources.list.d/&lt;/span&gt;&lt;span class="nv"&gt;$NAME&lt;/span&gt;&lt;span class="s2"&gt;.list&amp;quot;&lt;/span&gt;
 &lt;span class="nv"&gt;RELEASE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$2&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
 &lt;span class="nb"&gt;echo&lt;/span&gt; -e &lt;span class="s2"&gt;&amp;quot;Package: *\nPin: release a=&lt;/span&gt;&lt;span class="nv"&gt;$RELEASE&lt;/span&gt;&lt;span class="s2"&gt;\nPin-Priority: -1&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sudo tee /etc/apt/preferences.d/&lt;span class="nv"&gt;$NAME&lt;/span&gt; &amp;gt;/dev/null &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/etc/apt/preferences.d/&lt;/span&gt;&lt;span class="nv"&gt;$NAME&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: It's still best to remove the files and apt-get update immediately
after checking.  &lt;/p&gt;
&lt;p&gt;For instance, I can check for alternative versions of XBMC in &lt;code&gt;wheezy-backports&lt;/code&gt; without risking accidental installations:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;FILES&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;add-repository-for-inspection wheezy-backports http://debian.co.il/debian wheezy-backports main&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo apt-get update &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&amp;gt;/dev/null &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-cache policy xbmc &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo rm -f &lt;span class="nv"&gt;$FILES&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo apt-get update &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&amp;gt;/dev/null
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="FOSS"></category><category term="Scripts"></category><category term="Linux"></category><category term="Debian"></category><category term="Apt Pinning"></category><category term="One-Liner"></category><category term="Apt"></category></entry><entry><title>Setting up Gargoyle as a Time Server</title><link href="https://blog.backslasher.net/setting-up-gargoyle-as-time-server.html" rel="alternate"></link><published>2014-06-11T12:12:00+02:00</published><updated>2014-06-11T12:12:00+02:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2014-06-11:/setting-up-gargoyle-as-time-server.html</id><summary type="html">&lt;p&gt;&lt;span style="font-size: x-large;"&gt;The Story&lt;/span&gt; &lt;br&gt;
For reasons unknown to me, Debian's NTP daemon only works on udp port
123, even when operating as a client.&lt;br&gt;
This is a problem because my network configuration does not allow
incoming packets on this port, thus preventing my raspberrySeed
(raspberry pi running Debian, deluge, flexget) from syncing …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;span style="font-size: x-large;"&gt;The Story&lt;/span&gt; &lt;br&gt;
For reasons unknown to me, Debian's NTP daemon only works on udp port
123, even when operating as a client.&lt;br&gt;
This is a problem because my network configuration does not allow
incoming packets on this port, thus preventing my raspberrySeed
(raspberry pi running Debian, deluge, flexget) from syncing, causing it
to slowly drift away from the real world.&lt;br&gt;
To solve the issue, I did two things:  &lt;/p&gt;
&lt;h3&gt;The Solution&lt;/h3&gt;
&lt;h4&gt;1. Turn Gargoyle into an NTP server&lt;/h4&gt;
&lt;p&gt;Since Gargoyle is already syncing from outside, I only had to tell it to
act as a server.&lt;br&gt;
First, &lt;code&gt;ssh&lt;/code&gt; into your gargoyle setup.&lt;br&gt;
Edit the file &lt;code&gt;/etc/config/system&lt;/code&gt;, and under &lt;code&gt;timeserver&lt;/code&gt;, change the
option &lt;code&gt;enable_server&lt;/code&gt; to &lt;code&gt;'1'&lt;/code&gt;.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://blog.backslasher.net/images/setting-up-gargoyle-as-time-server/gargoyle-time-settings.png"&gt;&lt;/p&gt;
&lt;p&gt;After editing the file, restart the service using   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;/etc/init.d/sysntpd restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And ensure the argument &lt;code&gt;-l&lt;/code&gt; was added to the ntp daemon command line,
using this code:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ps &lt;span class="p"&gt;|&lt;/span&gt; grep ntp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt="" src="https://blog.backslasher.net/images/setting-up-gargoyle-as-time-server/gargoyle-ntp-working.png"&gt;&lt;/p&gt;
&lt;h4&gt;2. Tell debian to ask Gargoyle:&lt;/h4&gt;
&lt;p&gt;ssh to your debian machine, and edit the file &lt;code&gt;/etc/ntp.conf&lt;/code&gt;.&lt;br&gt;
Comment out all of the server entires, and only leave one pointing to
the name/IP address of Gargoyle:  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://blog.backslasher.net/images/setting-up-gargoyle-as-time-server/debian-ntp-config.png"&gt;&lt;/p&gt;
&lt;p&gt;After that, restart the ntp daemon by running   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo service ntp restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Wait a couple of minutes and use this to test everything is OK:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ntpq -p
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You should see one entry for your Gargoyle router, with the other fields
making sense (not all zeroes):&lt;br&gt;
&lt;img alt="" src="https://blog.backslasher.net/images/setting-up-gargoyle-as-time-server/debian-time-ok.png"&gt;&lt;/p&gt;
&lt;p&gt;Enjoy your new time configuration!&lt;/p&gt;</content><category term="FOSS"></category><category term="Mysteries Solved"></category><category term="Gargoyle"></category><category term="Linux"></category><category term="Raspberry Pi"></category><category term="Debian"></category><category term="raspberrySeed"></category><category term="NTP"></category></entry><entry><title>Timing Execution By Output Lines</title><link href="https://blog.backslasher.net/timing-execution-by-output-lines.html" rel="alternate"></link><published>2014-06-05T12:12:00+02:00</published><updated>2014-06-05T12:12:00+02:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2014-06-05:/timing-execution-by-output-lines.html</id><summary type="html">&lt;h3&gt;The Story&lt;/h3&gt;
&lt;p&gt;Today I got annoyed that some puppet agent runs took me over 90 seconds
to complete, even though they actually did nothing (no change was
needed).&lt;br&gt;
I wanted to see which part of the run took the longest, so I tried this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo puppet agent --test --debug
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Unfortunately …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;The Story&lt;/h3&gt;
&lt;p&gt;Today I got annoyed that some puppet agent runs took me over 90 seconds
to complete, even though they actually did nothing (no change was
needed).&lt;br&gt;
I wanted to see which part of the run took the longest, so I tried this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo puppet agent --test --debug
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Unfortunately, I don't have the ability to follow the terminal for 90
seconds with full attention, so the only thing I recognized was small
bursts of text:  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://blog.backslasher.net/images/timing-execution-by-output-lines/can-you-follow.png"&gt;&lt;br&gt;
&lt;em&gt;Can you follow?&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;I wished puppet's output would have timestamps, but there's no such
feature.&lt;br&gt;
Luckily, I have scripting!&lt;br&gt;
I wanted the solution to be a one-liner (and not a file to be executed)
to keep it portable (as in not having to copy the file to every server).
I considered using awk, python or bash loops, but ended up using perl
because... it gave me the best functionality to code ratio :)   &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://blog.backslasher.net/images/timing-execution-by-output-lines/much-better.png"&gt;&lt;/p&gt;
&lt;h3&gt;The Script&lt;/h3&gt;
&lt;p&gt;I use this code to simulate a real application:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;(&lt;/span&gt;sleep &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;sleep &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;err&amp;#39;&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt="" src="https://blog.backslasher.net/images/timing-execution-by-output-lines/timing-1.png"&gt;&lt;/p&gt;
&lt;p&gt;My one-liner will prepend to each line the seconds passed since the
script's start. That way, if you see a large number gap between two
lines, you can probably tell what's wasting your time.   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;YOURCODEHERE &lt;span class="p"&gt;|&lt;/span&gt; perl -e &lt;span class="s1"&gt;&amp;#39;$b=time();while (&amp;lt;stdin&amp;gt;) {print ((time()-$b),&amp;quot; $_&amp;quot;)};&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt="" src="https://blog.backslasher.net/images/timing-execution-by-output-lines/timing-2.png"&gt;&lt;/p&gt;
&lt;h4&gt;Possible Tweaks&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Consider using &lt;code&gt;|&amp;amp;&lt;/code&gt; instead of &lt;code&gt;|&lt;/code&gt; to pipeline errors (&lt;code&gt;STDERR&lt;/code&gt;) too -
  sometime they're more informative than the standard output, like this:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;YOURCODEHERE &lt;span class="p"&gt;|&amp;amp;&lt;/span&gt; perl -e &lt;span class="s1"&gt;&amp;#39;$b=time();while (&amp;lt;stdin&amp;gt;) {print ((time()-$b),&amp;quot; $_&amp;quot;)};&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt="" src="https://blog.backslasher.net/images/timing-execution-by-output-lines/timing-3.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I really wanted the time measured from the script's start, and not the
computer local time. If you'd rather have that, try something like:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;YOURCODEHERE &lt;span class="p"&gt;|&lt;/span&gt; perl -e &lt;span class="s1"&gt;&amp;#39;while (&amp;lt;stdin&amp;gt;) {print ((scalar localtime()),&amp;quot; $_&amp;quot;)};&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt="" src="https://blog.backslasher.net/images/timing-execution-by-output-lines/timing-4.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By the way, puppet's run took so long due to some SQL queries being run
as part of the &lt;code&gt;puppetdb&lt;/code&gt; class.&lt;/p&gt;</content><category term="FOSS"></category><category term="Programming"></category><category term="Perl"></category><category term="Scripts"></category><category term="Linux"></category><category term="One-Liner"></category><category term="Bash"></category></entry><entry><title>Hijacking a process's i/o streams using gdb</title><link href="https://blog.backslasher.net/hijacking-processs-io-streams-using-gdb.html" rel="alternate"></link><published>2014-05-28T12:13:00+02:00</published><updated>2014-05-28T12:13:00+02:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2014-05-28:/hijacking-processs-io-streams-using-gdb.html</id><summary type="html">&lt;h3&gt;The Story&lt;/h3&gt;
&lt;p&gt;I recently had a very annoying problem - some daemon failed, but ran
fine when told to run at foreground (not daemonize). Running at
foreground is the easiest way to debug processes, because that way you
get their input / output / error streams in your terminal.&lt;br&gt;
Said daemon had no …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;The Story&lt;/h3&gt;
&lt;p&gt;I recently had a very annoying problem - some daemon failed, but ran
fine when told to run at foreground (not daemonize). Running at
foreground is the easiest way to debug processes, because that way you
get their input / output / error streams in your terminal.&lt;br&gt;
Said daemon had no "log to file" option as well, so the only indication
I had that something was wrong is that the daemon didn't do what it's
supposed to do.  &lt;/p&gt;
&lt;p&gt;When processes daemonize, they create a sub process that isn't attached
to anything (so it won't be affected by the terminal closing, for
instance).&lt;br&gt;
The originating process usually exists after creating the sub process,
and so you can't easily capture the output of the sub process.  &lt;/p&gt;
&lt;p&gt;I eventually realized that I need to "hijack" the &lt;code&gt;stderr&lt;/code&gt; stream from the
sub process. I did some stupid attempts, like this (&lt;strong&gt;NOT WORKING&lt;/strong&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;tail -f /proc/&lt;span class="k"&gt;$(&lt;/span&gt;pidof &lt;span class="nv"&gt;$DAEMON&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;/ld/2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Eventually I wrote something using strace, which was
OK:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo strace -ff -p &lt;span class="k"&gt;$(&lt;/span&gt;pidof &lt;span class="nv"&gt;$DAEMON&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; -e &lt;span class="nv"&gt;write&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;,2 -s &lt;span class="m"&gt;1024&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; grep &lt;span class="s2"&gt;&amp;quot;^ |&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt="" src="https://blog.backslasher.net/images/hijacking-processs-io-streams-using-gdb/strace-ok-solution.png"&gt;&lt;/p&gt;
&lt;p&gt;It gave me the output I wanted, and I solved my issue (which was me
passing relative file locations, inaccessible to the sub process created
because it doesn't inherit the parent's working directory). However, I
wanted something more elegant. I found the commands in &lt;a href="http://gcolpart.evolix.net/blog21/capture-inputoutput-of-a-process-with-gdb/"&gt;this
post&lt;/a&gt;,
which did something better - given a &lt;code&gt;pid&lt;/code&gt;, they redirect its input,
output and error streams to some &lt;code&gt;tty&lt;/code&gt; (terminal), giving you control over
the process.&lt;br&gt;
However, it wasn't a fire-and forget script. I tried to fix that :-)  &lt;/p&gt;
&lt;h3&gt;The Solution&lt;/h3&gt;
&lt;p&gt;My script will hook the process to your current terminal.&lt;br&gt;
&lt;strong&gt;Please note:&lt;/strong&gt; I don't think it's a good idea to leave the hijacked
daemon running after finishing troubleshooting. You should probably
restart it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;DAEMON&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;afuse
&lt;span class="nv"&gt;MYT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;tty&lt;span class="k"&gt;)&lt;/span&gt;
sudo gdb -p &lt;span class="k"&gt;$(&lt;/span&gt;pidof &lt;span class="nv"&gt;$DAEMON&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;lt;&amp;lt;EOF&lt;/span&gt;
&lt;span class="s"&gt;call close(0)&lt;/span&gt;
&lt;span class="s"&gt;call close(1)&lt;/span&gt;
&lt;span class="s"&gt;call close(2)&lt;/span&gt;
&lt;span class="s"&gt;call open(&amp;quot;$MYT&amp;quot;, 2, 0)&lt;/span&gt;
&lt;span class="s"&gt;call dup(0)&lt;/span&gt;
&lt;span class="s"&gt;call dup(0)&lt;/span&gt;
&lt;span class="s"&gt;detach&lt;/span&gt;
&lt;span class="s"&gt;EOF&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Notice the output - much better:  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://blog.backslasher.net/images/hijacking-processs-io-streams-using-gdb/gdb-great-solution.png"&gt;&lt;/p&gt;
&lt;p&gt;The way the script works is this:&lt;br&gt;
First, it uses &lt;code&gt;tty&lt;/code&gt; to find the path to the current terminal.&lt;br&gt;
gdb is then called to close streams 0,1,2 (which are almost always
&lt;code&gt;stdin&lt;/code&gt;, &lt;code&gt;stdout&lt;/code&gt;, &lt;code&gt;stderr&lt;/code&gt;) and open a new stream to the &lt;code&gt;tty&lt;/code&gt; found before.
The new stream opens at index 0 (because it's the lowest index
available, since we just closed 0,1,2) and copies it to 1 and 2 as well.
Now &lt;code&gt;stdin&lt;/code&gt;, &lt;code&gt;stdout&lt;/code&gt; and &lt;code&gt;stderr&lt;/code&gt; are all mapped to the current terminal -
success!&lt;/p&gt;</content><category term="FOSS"></category><category term="Scripts"></category><category term="Linux"></category><category term="gdb"></category><category term="Debugging"></category><category term="Bash"></category></entry><entry><title>Testing Local Facebook Applications with ABE</title><link href="https://blog.backslasher.net/testing-local-facebook-applications-with-abe.html" rel="alternate"></link><published>2014-05-05T12:59:00+02:00</published><updated>2014-05-05T12:59:00+02:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2014-05-05:/testing-local-facebook-applications-with-abe.html</id><summary type="html">&lt;p&gt;I'm using Firefox with &lt;a href="http://noscript.net/"&gt;NoScript&lt;/a&gt;, which is the
AdBlock of scripts - allowing you to selectively block scripts according
to various rules (e.g. block all scripts from analytics.google.com), and
additionally helps protecting you from XSS (&lt;a href="http://en.wikipedia.org/wiki/Cross-site_scripting"&gt;cross site
scripting&lt;/a&gt;).&lt;br&gt;
One of the components in NoScript is ABE (&lt;a href="http://noscript.net/abe/"&gt;Application Boundaries …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;I'm using Firefox with &lt;a href="http://noscript.net/"&gt;NoScript&lt;/a&gt;, which is the
AdBlock of scripts - allowing you to selectively block scripts according
to various rules (e.g. block all scripts from analytics.google.com), and
additionally helps protecting you from XSS (&lt;a href="http://en.wikipedia.org/wiki/Cross-site_scripting"&gt;cross site
scripting&lt;/a&gt;).&lt;br&gt;
One of the components in NoScript is ABE (&lt;a href="http://noscript.net/abe/"&gt;Application Boundaries
Enforcer&lt;/a&gt;), which I see as a replacement for
Internet Explorer's zones.&lt;br&gt;
It comes populated with one rule - preventing non-local sites from
accessing local resources (for example, preventing &lt;code&gt;www.evilsite.com&lt;/code&gt; from
invoking &lt;code&gt;file:///etc/group&lt;/code&gt; to learn about your local groups).&lt;br&gt;
Problem is, when developing Facebook applications, you usually want to
run the application locally (because it's much easier to modify and
debug), but still view it from the Facebook website (because Facebook
populates your site with some needed variables that way).&lt;br&gt;
When I tried doing that in firefox, I found out that ABE was protecting
me:  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://blog.backslasher.net/images/testing-local-facebook-applications-with-abe/FB-Abe-Blocking.png"&gt;&lt;/p&gt;
&lt;p&gt;My immediate thought was to disable ABE while
developing, but I've decided to take this opportunity to learn how it
works.&lt;br&gt;
I saw the relevant rule looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# Prevent Internet sites from requesting LAN resources.
Site LOCAL
Accept from LOCAL
Deny
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And after adding this rule above it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# The &amp;quot;.&amp;quot; are at the beginning on purpose!
Site .My-Computer.FQDN
Accept ALL from .facebook.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;ABE no longer blocked it:  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://blog.backslasher.net/images/testing-local-facebook-applications-with-abe/FB-Abe-Allowing.png"&gt;&lt;/p&gt;
&lt;p&gt;Now I have my own bugs to deal with :)&lt;/p&gt;</content><category term="FOSS"></category><category term="Security"></category><category term="Facebook"></category><category term="Development"></category><category term="NoScript"></category><category term="Firefox"></category><category term="HTTP"></category></entry><entry><title>Fixing Ugly Hebrew on Ubuntu + Firefox</title><link href="https://blog.backslasher.net/fixing-ugly-hebrew-on-ubuntu-firefox.html" rel="alternate"></link><published>2014-04-24T13:01:00+02:00</published><updated>2014-04-24T13:01:00+02:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2014-04-24:/fixing-ugly-hebrew-on-ubuntu-firefox.html</id><summary type="html">&lt;p&gt;The default viewing experience, when visiting some Hebrew sites when
using Firefox on Ubuntu, is quite unsightly.&lt;br/&gt;
If we check &lt;a href="http://ynet.co.il/"&gt;Ynet.co.il&lt;/a&gt;, a news site, we'll see
this biblical font being used:  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://blog.backslasher.net/images/fixing-ugly-hebrew-on-ubuntu-firefox/ff-hebrew-ugly.png"/&gt;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;The default viewing experience, when visiting some Hebrew sites when
using Firefox on Ubuntu, is quite unsightly.&lt;br&gt;
If we check &lt;a href="http://ynet.co.il/"&gt;Ynet.co.il&lt;/a&gt;, a news site, we'll see
this biblical font being used:  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://blog.backslasher.net/images/fixing-ugly-hebrew-on-ubuntu-firefox/ff-hebrew-ugly.png"&gt;&lt;/p&gt;

&lt;p&gt;Let's check which fonts Ynet asks to be viewed in:  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://blog.backslasher.net/images/fixing-ugly-hebrew-on-ubuntu-firefox/ff-ynet-david.png"&gt;&lt;/p&gt;
&lt;p&gt;If you look at the marked part, you'll see something like:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;font-family&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Arial&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Arial (Hebrew)&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;David (Hebrew)&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Courier New (Hebrew)&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now we see the reason - a lot of sites were designed and tested for
Windows  (surprise!), and as such require fonts that aren't free
(&lt;a href="http://en.wikipedia.org/wiki/Gratis_versus_libre"&gt;libre&lt;/a&gt;).&lt;br&gt;
For example, the font "David" is not free to use &lt;a href="http://www.fonts.com/font/masterfont/david"&gt;at
all&lt;/a&gt;. Because of that, such
fonts are not included in Ubuntu by default.  &lt;/p&gt;
&lt;h3&gt;The Solution&lt;/h3&gt;
&lt;p&gt;Use this following command, taken from &lt;a href="http://askubuntu.com/a/166995"&gt;askubuntu&lt;/a&gt;, to install Microsoft fonts.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo apt-get install ttf-mscorefonts-installer culmus
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Complete installation, refresh and voila:  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://blog.backslasher.net/images/fixing-ugly-hebrew-on-ubuntu-firefox/ff-hebrew-nice.png"&gt;&lt;/p&gt;
&lt;h3&gt;Further reading&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://www.microsoft.com/typography/fonts/"&gt;Microsoft typography  - fonts&lt;/a&gt;&lt;br&gt;
&lt;a href="https://help.ubuntu.com/community/RestrictedFormats/Microsoft_Fonts"&gt;Microsoft Fonts at ubuntu.com&lt;/a&gt;&lt;/p&gt;</content><category term="FOSS"></category><category term="Linux"></category><category term="Fonts"></category><category term="HTML"></category><category term="Ubuntu"></category><category term="Firefox"></category></entry><entry><title>Automatically Mounting USB drives and Surviving Reconnects</title><link href="https://blog.backslasher.net/automatically-mounting-usb-drives-and-surviving-reconnects.html" rel="alternate"></link><published>2014-04-15T17:48:00+02:00</published><updated>2014-04-15T17:48:00+02:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2014-04-15:/automatically-mounting-usb-drives-and-surviving-reconnects.html</id><summary type="html">&lt;p&gt;Today I solved a problem that has been bothering me for a while - being unable to automatically "remount" my USB drive in case it disconnects and reconnects.&lt;/p&gt;
&lt;h3&gt;The Story&lt;/h3&gt;
&lt;p&gt;My raspberrySeed (rPi + Debian + Deluge) has a USB drive connected (to keep the downloaded content in). The filesystem on that drive …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Today I solved a problem that has been bothering me for a while - being unable to automatically "remount" my USB drive in case it disconnects and reconnects.&lt;/p&gt;
&lt;h3&gt;The Story&lt;/h3&gt;
&lt;p&gt;My raspberrySeed (rPi + Debian + Deluge) has a USB drive connected (to keep the downloaded content in). The filesystem on that drive should be always mounted to the same directory, which is not trivial in Linux.&lt;br&gt;
Unlike Windows, which tries to assign consistent drive letters to the mounted filesystems (If your disk-on-key gets the letter "F:", after disconnecting and connecting it, it'll still be "F:" if not occupied), Linux chooses the lowest block device name (sda, sdb...) available for a new device, so no consistency is guranteed.&lt;br&gt;
If you want consistency, you're offered to mount your filesystems
according to their &lt;a href="https://help.ubuntu.com/community/UsingUUID"&gt;UUID (or LABEL)&lt;/a&gt;, which can be found by listing the following directories (after knowing the current block device you're interested in):  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;user@computer:~$ ls -l /dev/disk/by-uuid/
total 0
lrwxrwxrwx 1 root root 10 apr 15 10:58 aSECRETa-aaaa-aaaa-aaaa-aaaaaaaaaaaa -&amp;gt; ../../dm-0
lrwxrwxrwx 1 root root 10 apr 15 10:58 aSECRETa-aaaa-aaaa-aaaa-aaaaaaaaaaaa -&amp;gt; ../../sda6
lrwxrwxrwx 1 root root 10 apr 15 10:58 aaaaSECRETaaaaaa -&amp;gt; ../../sda1
lrwxrwxrwx 1 root root 10 apr 15 10:58 aTHEaONE-aaaa-aaIa-aaaa-aWANTaaaaaaa -&amp;gt; ../../sdb2
lrwxrwxrwx 1 root root 10 apr 15 10:58 aSECRETa-aaaa-aaaa-aaaa-aaaaaaaaaaaa -&amp;gt; ../../sda5
lrwxrwxrwx 1 root root 10 apr 15 10:58 aaaaSECRETaaaaaa -&amp;gt; ../../sdb1

user@computer:~$ ls -l /dev/disk/by-label/
total 0
lrwxrwxrwx 1 root root 10 apr 15 10:58 some.Partition -&amp;gt; ../../sdb1
lrwxrwxrwx 1 root root 10 apr 15 10:58 partition-name -&amp;gt; ../../sdb2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you know your stuff, you can see that those are just symlinks, maintained by udev.&lt;br&gt;
After finding the right UUID, you can add this line to your &lt;code&gt;/etc/fstab&lt;/code&gt; file, to make Linux mount it to &lt;code&gt;/media/dest&lt;/code&gt; (an empty directory) automatically on boot:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;UUID=aTHEaONE-aaaa-aaIa-aaaa-aWANTaaaaaaa /media/dest ext4 defaults,auto 0 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Looks ideal, but if we check the command &lt;code&gt;mount&lt;/code&gt;, we'll see that it's resolving the symlink and mounting the actual block device:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;user@computer:~$ sudo mount -a
user@computer:~$ mount
...
/dev/sdb2 on /media/dest type ext4 (rw,relatime,data=ordered)
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;My problem was that by when my disk disconnects-reconnects (quite common in my setup, due to power surges, faulty cables etc.), it gets a new block device and the mount remains connected to the old one:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;user@computer:~$ ls -l /dev/disk/by-uuid/aTHEaONE-aaaa-aaIa-aaaa-aWANTaaaaaaa
lrwxrwxrwx 1 root root 10 apr 15 10:58 aTHEaONE-aaaa-aaIa-aaaa-aWANTaaaaaaa -&amp;gt; ../../sdc2

user@computer:~$ mount | grep /media/dest
/dev/sdb2 on /media/dest type ext4 (rw,relatime,data=ordered)

user@computer:~$ ls /media/dest
ls: cannot access dest: Input/output error

user@computer:~$ sudo mount -a
user@computer:~$ mount | grep /media/dest
/dev/sdc2 on /media/dest type ext4 (rw,relatime,data=ordered)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;See the problem? Without manually telling Linux to re-evaluate the symlink, the mount remains connected to the old block device, rendering it useless.&lt;/p&gt;
&lt;h3&gt;The Solution&lt;/h3&gt;
&lt;p&gt;The best solution I found is using &lt;a href="https://wiki.debian.org/udev"&gt;udev rules&lt;/a&gt;.&lt;br&gt;
&lt;code&gt;udev&lt;/code&gt; is the Linux subsystem in charge of handling physical devices, and  among many other things, is in charge of creating the "by-uuid" and "by-label" symlinks we saw before.&lt;br&gt;
The processing occurs according to rules called "udev rules", listed in &lt;code&gt;/lib/udev/rules.d/&lt;/code&gt;&lt;br&gt;
So here is my solution:  &lt;/p&gt;
&lt;h4&gt;1. Identify filesystem UUID and destination directory&lt;/h4&gt;
&lt;p&gt;Use some trick (&lt;code&gt;gnome-disks&lt;/code&gt; on another system, listing &lt;code&gt;/dev/disks/by-uuid&lt;/code&gt; as seen earlier) to find your filesystem's UUID.&lt;br&gt;
Let's say it's &lt;code&gt;aaDREAMa-aaaa-aaaa-aaaa-aFILESYSaaaa&lt;/code&gt;&lt;br&gt;
Also prepare a directory to mount to. It should be empty.&lt;br&gt;
Let's say it's &lt;code&gt;/media/dest&lt;/code&gt;   &lt;/p&gt;
&lt;h4&gt;2. Create fstab entry - do not use automount&lt;/h4&gt;
&lt;p&gt;Edit &lt;code&gt;/etc/fstab&lt;/code&gt; to contain all configuration related to your filesystem.&lt;br&gt;
It's not mandatory (you can specify the destination mount in the udev rule), but I think it's better to keep that configuration in a standard location. You can use something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; -e &lt;span class="s1"&gt;&amp;#39;UUID=aaDREAMa-aaaa-aaaa-aaaa-aFILESYSaaaa /media/dest auto defaults,noauto 0 0&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sudo tee -a /etc/fstab
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;3. Create udev rules to mount / unmount whenever the device is connected / disconnected&lt;/h4&gt;
&lt;p&gt;This is the fun part. Create a file in &lt;code&gt;/lib/udev/rules.d&lt;/code&gt;. I chose &lt;code&gt;/lib/udev/rules.d/99-automount-usb.rules&lt;/code&gt; to make sure it runs last (after the by-uuid symlink has been created), and put two actions in it - one will mount the device when connected, and another dismounts it
when it's disconnected:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ACTION==&amp;quot;add&amp;quot;, ENV{ID_FS_UUID_ENC}==&amp;quot;aaDREAMa-aaaa-aaaa-aaaa-aFILESYSaaaa&amp;quot;, RUN+=&amp;quot;/bin/mount /dev/%k&amp;quot;&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sudo tee &lt;span class="s1"&gt;&amp;#39;/lib/udev/rules.d/99-automount-usb.rules&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ACTION==&amp;quot;remove&amp;quot;, ENV{ID_FS_UUID_ENC}==&amp;quot;aaDREAMa-aaaa-aaaa-aaaa-aFILESYSaaaa&amp;quot;, RUN+=&amp;quot;/bin/umount /dev/%k&amp;quot;&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sudo tee -a &lt;span class="s1"&gt;&amp;#39;/lib/udev/rules.d/99-automount-usb.rules&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;4. Test&lt;/h4&gt;
&lt;p&gt;Apply the settings using&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo udevadm control --reload-rules
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now stop any processes interacting with the device (like Deluge), disconnect and reconnect it, and note the output of:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;mount &lt;span class="p"&gt;|&lt;/span&gt; grep /media/dest&lt;span class="p"&gt;;&lt;/span&gt;ls /media/dest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If everything works, it should either return nothing when the drive is unplugged, and somthing like this when it is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;/dev/sdb1 on /media/dest type ext4 (rw,relatime,data=ordered)
&amp;lt;Files inside the mobile drive&amp;#39;s filesystem&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Further reading:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.reactivated.net/writing_udev_rules.html"&gt;http://www.reactivated.net/writing_udev_rules.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ubuntuforums.org/showthread.php?t=168221"&gt;http://ubuntuforums.org/showthread.php?t=168221&lt;/a&gt; (Commands are out
    of date, but still decent)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/udev"&gt;https://wiki.archlinux.org/index.php/udev&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="FOSS"></category><category term="Mysteries Solved"></category><category term="Scripts"></category><category term="Linux"></category><category term="FileSystem"></category><category term="Raspberry Pi"></category><category term="raspberrySeed"></category><category term="udev"></category></entry><entry><title>Python Library for Deluge Torrent Maintenance</title><link href="https://blog.backslasher.net/python-library-for-deluge-torrent-maintenance.html" rel="alternate"></link><published>2014-04-14T13:05:00+02:00</published><updated>2014-04-14T13:05:00+02:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2014-04-14:/python-library-for-deluge-torrent-maintenance.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; I added &lt;a href="https://github.com/BackSlasher/deluge_framework"&gt;this project&lt;/a&gt; as my first
GitHub repo  &lt;/p&gt;
&lt;p&gt;I have an ongoing project which I nickname my raspberrySeed, which is a
Rasbperry Pi running Deluge. Works 24/7, takes very little power,
minimal heat, no noise, works as a fine seedbox.&lt;br&gt;
However, I recently encountered strange situtations in …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; I added &lt;a href="https://github.com/BackSlasher/deluge_framework"&gt;this project&lt;/a&gt; as my first
GitHub repo  &lt;/p&gt;
&lt;p&gt;I have an ongoing project which I nickname my raspberrySeed, which is a
Rasbperry Pi running Deluge. Works 24/7, takes very little power,
minimal heat, no noise, works as a fine seedbox.&lt;br&gt;
However, I recently encountered strange situtations in which the remote
Deluge UI (on my PC) would get stuck and eventually cause the Deluge
daemon (on the rPi) to crash.&lt;br&gt;
After some checking, I realized showing the UI is too demanding, at
least with the amount of torrents I'm seeding. Time to weed out some
torrents, but how will I do it without a working UI?&lt;br&gt;
The original &lt;code&gt;deluge-console&lt;/code&gt; didn't work for two reasons:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Manipulation of massive amounts of torrents is a nightmare - I'll be
    surprised if someone can manage more than 20 torrents at a time with
    this interface.&lt;br&gt;
&lt;img alt="" src="https://blog.backslasher.net/images/python-library-for-deluge-torrent-maintenance/deluge-console-full.png"&gt;&lt;/li&gt;
&lt;li&gt;Even the console was too much - apparently it's sophisticated enough
    to subscribe for updates from the Deluge daemon and many other
    things, overloading my poor rPi.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Eventually, I found &lt;a href="http://forum.deluge-torrent.org/viewtopic.php?f=9&amp;amp;t=37157"&gt;this post&lt;/a&gt;, where someone wrote a python script that deletes old torrents.&lt;br&gt;
Instead of creating my own (because the &lt;a href="http://deluge-torrent.org/docs/1.2/core/rpc.html"&gt;Deluge
RPC&lt;/a&gt; Python API is
event based and basically annoying), I rewrote that script to give a me
a Python library (or module, not sure).&lt;br&gt;
The calling script should only contain the "business logic" - what to do with
every torrent. The real action (deletion, for instance) is performed by
the library.&lt;br&gt;
First, some already working use cases. All cases assume Deluge library
files (included with Deluge), the library is in "deluge_framework.py"
and a local-running daemon (remote instances are obviously fine, and
parameters are detailed in the library itself).  &lt;/p&gt;
&lt;h4&gt;Searching for some torrents&lt;/h4&gt;
&lt;p&gt;Print using the library all torrents containing "linux":  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;deluge_framework&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;filter_torrents&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;torrentAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;torrent_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;torrent_info&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;linux&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;torrent_info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;l&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;filter_torrents&lt;/span&gt;&lt;span class="p"&gt;({},[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;torrentAction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;[+] Connection was successful!
[i] ?????????SECRET????????????????????????? [kali-linux-1.0.5-amd64]: Listing (doing nothing)
[+] Finished
[i] Client disconnected.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;Printing progress and state for all torrents&lt;/h4&gt;
&lt;p&gt;Print (using pyton's &lt;code&gt;print&lt;/code&gt;) every torrent's id, status and progress:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;deluge_framework&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;filter_torrents&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;torrentAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;torrent_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;torrent_info&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;torrent_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;torrent_info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;state&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;torrent_info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;progress&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;filter_torrents&lt;/span&gt;&lt;span class="p"&gt;({},[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;state&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;progress&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;torrentAction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;[+] Connection was successful!
?????????SECRET?????????????????????????: Queued 100.0
?????????SECRET?????????????????????????: Queued 100.0
?????????SECRET?????????????????????????: Seeding 100.0
?????????SECRET?????????????????????????: Queued 100.0
?????????SECRET?????????????????????????: Queued 100.0
?????????SECRET?????????????????????????: Seeding 100.0
?????????SECRET?????????????????????????: Queued 100.0
?????????SECRET?????????????????????????: Queued 100.0
?????????SECRET?????????????????????????: Queued 100.0
[+] Finished
[i] Client disconnected.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;Summing the size of all torrents&lt;/h4&gt;
&lt;p&gt;Collect the total size of each torrent and print the sum (in GB):  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;deluge_framework&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;filter_torrents&lt;/span&gt;
&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;torrentAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;torrent_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;torrent_info&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;
    &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="n"&gt;torrent_info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;total_done&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;filter_torrents&lt;/span&gt;&lt;span class="p"&gt;({},[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;total_done&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;torrentAction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;total: &lt;/span&gt;&lt;span class="si"&gt;%i&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;[+] Connection was successful!
[+] Finished
[i] Client disconnected.
total: 198
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;Removing all done torrents&lt;/h4&gt;
&lt;p&gt;Delete (without deleting data) all completed torrents:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;deluge_framework&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;filter_torrents&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;torrentAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;torrent_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;torrent_info&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;torrent_info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;progress&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;d&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;filter_torrents&lt;/span&gt;&lt;span class="p"&gt;({},[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;progress&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;torrentAction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;[+] Connection was successful!
[+] ?????????SECRET????????????????????????? [SOME TORRENT NAME]: Deleted without data
[+] ?????????SECRET????????????????????????? [SOME TORRENT NAME]: Deleted without data
[+] ?????????SECRET????????????????????????? [SOME TORRENT NAME]: Deleted without data
[+] Finished
[i] Client disconnected.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;The Actual Code&lt;/h3&gt;
&lt;p&gt;If you can think of another good use for it, please tell me in the
comments!   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;

&lt;span class="c1"&gt;###############&lt;/span&gt;
&lt;span class="c1"&gt;# By: Nitzan (http://BackSlasher.net)&lt;/span&gt;
&lt;span class="c1"&gt;# The interesting code is at the bottom&lt;/span&gt;
&lt;span class="c1"&gt;# call filter_torrents from your code like this:&lt;/span&gt;
&lt;span class="c1"&gt;## from deluge_framework import filter_torrents&lt;/span&gt;
&lt;span class="c1"&gt;## filter_torrents(connection_data,torrent_info_wanted,action,interactive)&lt;/span&gt;
&lt;span class="c1"&gt;# see bottom of script for details&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;deluge.log&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;LOG&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;log&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;deluge.ui.client&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;deluge.component&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;component&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;twisted.internet&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;reactor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;defer&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;printSuccess&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dresult&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;is_success&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;smsg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;is_interactive&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_interactive&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_success&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;[+]&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;smsg&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;[i]&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;smsg&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;printError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;emsg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;is_interactive&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_interactive&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;[e]&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;emsg&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;endSession&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;esresult&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;esresult&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;esresult&lt;/span&gt;
        &lt;span class="n"&gt;reactor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;disconnect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;printSuccess&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Client disconnected.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;reactor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;printReport&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rresult&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;printSuccess&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Finished&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;endSession&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;on_torrents_status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;torrents&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;tlist&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;torrent_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;torrent_info&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;torrents&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;torrentAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;torrent_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;torrent_info&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;successmsg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; [&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;]: Deleted without data&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;torrent_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;torrent_info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                &lt;span class="n"&gt;errormsg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; [&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;]: Error deleting without data&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;torrent_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;torrent_info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                &lt;span class="n"&gt;tlist&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove_torrent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;torrent_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addCallbacks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;printSuccess&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;printError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;callbackArgs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;successmsg&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;errbackArgs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;errormsg&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;D&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;successmsg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; [&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;]: Deleted WITH DATA&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;torrent_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;torrent_info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                &lt;span class="n"&gt;errormsg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; [&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;]: Error deleting WITH DATA&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;torrent_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;torrent_info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                &lt;span class="n"&gt;tlist&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove_torrent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;torrent_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addCallbacks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;printSuccess&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;printError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;callbackArgs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;successmsg&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;errbackArgs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;errormsg&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;l&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;printSuccess&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; [&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;]: Listing (doing nothing)&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;torrent_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;torrent_info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;pass&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;printError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; [&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;]: Unknown function response &amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;#39;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;torrent_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;torrent_info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;inst&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;printError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; [&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;]: Exception &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;torrent_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;torrent_info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;inst&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;defer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DeferredList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tlist&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;printReport&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;on_session_state&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_torrents_status&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;torrent_info_wanted&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;on_torrents_status&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;on_connect_success&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;printSuccess&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Connection was successful!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_session_state&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;on_session_state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;filter_torrents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connection_data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{},&lt;/span&gt;&lt;span class="n"&gt;info_wanted&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;tid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;tinfo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;l&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;interactive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; Get all torrents and filter them&lt;/span&gt;
&lt;span class="sd"&gt;    Arguments:&lt;/span&gt;
&lt;span class="sd"&gt;    connection_data -- How to connect to the deluged daemon. Specify a dictionary of host, port(integer), username, password&lt;/span&gt;
&lt;span class="sd"&gt;    info_wanted -- A list of fields to be retrived for each torrent. You&amp;#39;ll get it as a populated dictionary when action is called&lt;/span&gt;
&lt;span class="sd"&gt;    action -- function called for each torrent. Will get two variables - the torrent id and a populated dictionary of the torrent data. Should return a string indicating what to do with the torrent. Possible values:&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;#39;&amp;#39;:  Do nothing&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;#39;d&amp;#39;: Delete torrent (without deleting data)&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;#39;D&amp;#39;: Delete torrent WITH data&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;#39;l&amp;#39;: List torrent (display id and name)&lt;/span&gt;
&lt;span class="sd"&gt;        (Anything else): Causes an error.&lt;/span&gt;
&lt;span class="sd"&gt;        More things to come!&lt;/span&gt;
&lt;span class="sd"&gt;    interactive -- whether to write information / errors to output. Send False for cron jobs&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="c1"&gt;# ensure &amp;#39;name&amp;#39; is in torrent_info_wanted&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;info_wanted&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;info_wanted&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# set parameters&lt;/span&gt;
    &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;cliconnect&lt;/span&gt;
    &lt;span class="n"&gt;cliconnect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;connection_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;torrent_info_wanted&lt;/span&gt;
    &lt;span class="n"&gt;torrent_info_wanted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;info_wanted&lt;/span&gt;
    &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;torrentAction&lt;/span&gt;
    &lt;span class="n"&gt;torrentAction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;
    &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;is_interactive&lt;/span&gt;
    &lt;span class="n"&gt;is_interactive&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;interactive&lt;/span&gt;
    &lt;span class="c1"&gt;# start the show&lt;/span&gt;
    &lt;span class="n"&gt;cliconnect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addCallbacks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;on_connect_success&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;endSession&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errbackArgs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Connection failed: check settings and try again.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;reactor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="FOSS"></category><category term="Programming"></category><category term="Scripts"></category><category term="Raspberry Pi"></category><category term="raspberrySeed"></category><category term="Ramblings"></category><category term="Python"></category><category term="Deluge"></category></entry><entry><title>Listing Unity's Scopes and Originating Package</title><link href="https://blog.backslasher.net/listing-unitys-scopes-and-originating-package.html" rel="alternate"></link><published>2014-04-14T09:36:00+02:00</published><updated>2014-04-14T09:36:00+02:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2014-04-14:/listing-unitys-scopes-and-originating-package.html</id><summary type="html">&lt;p&gt;I recently upgraded to Ubuntu 14.04 (beta2), and I got all of my
"lenses" (searching additional items in the dash menu), that look like
this:  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://blog.backslasher.net/images/listing-unitys-scopes-and-originating-package/lenses.png"&gt;&lt;/p&gt;
&lt;p&gt;Of course there's a way to disable those lenses, but I actually want to
remove those I'll never use (like flickr).&lt;br&gt;
The problem  - lenses …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I recently upgraded to Ubuntu 14.04 (beta2), and I got all of my
"lenses" (searching additional items in the dash menu), that look like
this:  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://blog.backslasher.net/images/listing-unitys-scopes-and-originating-package/lenses.png"&gt;&lt;/p&gt;
&lt;p&gt;Of course there's a way to disable those lenses, but I actually want to
remove those I'll never use (like flickr).&lt;br&gt;
The problem  - lenses are installed using packages that don't always
match the lens' name. Using &lt;code&gt;apt-file&lt;/code&gt; (a utility for finding files inside
packages) and &lt;code&gt;parallel&lt;/code&gt;, I built a little script.&lt;br&gt;
First, install &lt;code&gt;parallel&lt;/code&gt; and &lt;code&gt;apt-file&lt;/code&gt;, and update apt-file's cache:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo apt-get install parallel apt-file
sudo apt-file update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then execute this script:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;find /usr/share/unity/scopes/ -name &lt;span class="se"&gt;\*&lt;/span&gt;.scope &lt;span class="p"&gt;|&lt;/span&gt; parallel &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt; ROW=$(apt-file search {});&lt;/span&gt;
&lt;span class="s1"&gt; FILE=$(echo $ROW | cut -f 2 -d &amp;quot;:&amp;quot;);&lt;/span&gt;
&lt;span class="s1"&gt; PACK=$(echo $ROW | cut -f 1 -d &amp;quot;:&amp;quot;);&lt;/span&gt;
&lt;span class="s1"&gt; NAME=$(cat $FILE | grep ^Name | head -1 | sed &amp;quot;s/^Name\=//&amp;quot;);&lt;/span&gt;
&lt;span class="s1"&gt; echo &amp;quot;$PACK: $NAME&amp;quot;&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sort
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;you'll see a list of lens friendly names, sorted by containing package,
like this:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;...
unity-scope-gourmet: Gourmet
unity-scope-guayadeque: Guayadeque
unity-scope-manpages: Manpages
unity-scope-musicstores: Music store
unity-scope-musique: Musique
unity-scope-openclipart: OpenClipArt
unity-scopes-master-default: Applications
unity-scopes-master-default: Books
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That way you can see which lenses you'll never use and remove the
matching package (using &lt;code&gt;apt-get&lt;/code&gt; or your favorite package manager).&lt;br&gt;
Of course, if you remove a package you'll lose access to all lenses inside it, so think it through!  &lt;/p&gt;</content><category term="FOSS"></category><category term="Unity"></category><category term="Scripts"></category><category term="Linux"></category><category term="Parallel"></category><category term="Ubuntu"></category><category term="Bash"></category></entry><entry><title>Mass-Checking SSH Connections using Parallel</title><link href="https://blog.backslasher.net/mass-checking-ssh-connections-using-parallel.html" rel="alternate"></link><published>2014-04-13T12:23:00+02:00</published><updated>2014-04-13T12:23:00+02:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2014-04-13:/mass-checking-ssh-connections-using-parallel.html</id><summary type="html">&lt;p&gt;Today I wanted to make sure I have SSH access to about 100 servers.&lt;br&gt;
Obviously, I wasn't going to verify the list by hand, so I put all of
the servers' names in a file, and wrote this little script:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; NAME in &lt;span class="k"&gt;$(&lt;/span&gt;cat ~/Desktop/server-names&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="nb"&gt;echo&lt;/span&gt; -n &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$NAME …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Today I wanted to make sure I have SSH access to about 100 servers.&lt;br&gt;
Obviously, I wasn't going to verify the list by hand, so I put all of
the servers' names in a file, and wrote this little script:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; NAME in &lt;span class="k"&gt;$(&lt;/span&gt;cat ~/Desktop/server-names&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="nb"&gt;echo&lt;/span&gt; -n &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$NAME&lt;/span&gt;&lt;span class="s2"&gt; &amp;quot;&lt;/span&gt;
        ssh -o &lt;span class="s2"&gt;&amp;quot;StrictHostKeyChecking no&amp;quot;&lt;/span&gt; -o &lt;span class="s2"&gt;&amp;quot;BatchMode yes&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;$NAME&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;echo a&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&amp;gt;/dev/null
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$?&lt;/span&gt; -eq &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
                &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;OK&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;
                &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;BAD&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note the SSH executes the command &lt;code&gt;echo a&lt;/code&gt;, because otherwise it'll run
interactively. Also, note the options &lt;code&gt;StrictHostKeyChecking no&lt;/code&gt;,
meaning it will accept new host fingerprints without asking, and
&lt;code&gt;BatchMode yes&lt;/code&gt;, meaning it will not prompt for a password (only try my
SSH key).&lt;br&gt;
This script will print a list of results such as:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;server1 OK
server2 BAD
server3 OK
server4 OK
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Which you can save in a file, and then view all of the bad servers using
something like:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;cat ssh-test-results &lt;span class="p"&gt;|&lt;/span&gt; grep &lt;span class="s2"&gt;&amp;quot;BAD&lt;/span&gt;$&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="s1"&gt;&amp;#39;{print $1}&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Problem was, I didn't like the script checking only one server at a
time, so I parallelized it:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;parallel &lt;span class="s1"&gt;&amp;#39;echo -n &amp;quot;{} &amp;quot;;ssh -o StrictHostKeyChecking=no -o BatchMode=yes {} &amp;quot;echo a&amp;quot; &amp;amp;&amp;gt;/dev/null;if [ $? -eq 0 ]; then echo &amp;quot;OK&amp;quot;;else echo &amp;quot;BAD&amp;quot;;fi;&amp;#39;&lt;/span&gt; &amp;lt;server-names-file
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The result is the same (not sorted according to the original but I didn't care about it), only much quicker.&lt;/p&gt;</content><category term="FOSS"></category><category term="Scripts"></category><category term="SSH"></category><category term="One-Liner"></category><category term="Bash"></category><category term="Parallel"></category></entry><entry><title>Fixing Dynamic DNS on Gargoyle</title><link href="https://blog.backslasher.net/fixing-dynamic-dns-on-gargoyle.html" rel="alternate"></link><published>2014-03-23T13:07:00+01:00</published><updated>2014-03-23T13:07:00+01:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2014-03-23:/fixing-dynamic-dns-on-gargoyle.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: I switched to &lt;code&gt;inadyn&lt;/code&gt; on my home server eventually. I left this article because it's still relevant&lt;/p&gt;
&lt;p&gt;I was digging through the logs of my latest
&lt;a href="http://www.gargoyle-router.com/"&gt;Gargoyle&lt;/a&gt; installation (a router
firmware based on OpenWrt, with a better UI in my opinion), and found
out that &lt;a href="http://en.wikipedia.org/wiki/Dynamic_DNS"&gt;Dynamic DNS&lt;/a&gt; updates
were …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: I switched to &lt;code&gt;inadyn&lt;/code&gt; on my home server eventually. I left this article because it's still relevant&lt;/p&gt;
&lt;p&gt;I was digging through the logs of my latest
&lt;a href="http://www.gargoyle-router.com/"&gt;Gargoyle&lt;/a&gt; installation (a router
firmware based on OpenWrt, with a better UI in my opinion), and found
out that &lt;a href="http://en.wikipedia.org/wiki/Dynamic_DNS"&gt;Dynamic DNS&lt;/a&gt; updates
were failing.&lt;br&gt;
I was a little disappointed that I couldn't find any documentation about
what to do - the messages, both in the log and in the UI weren't too
informative.&lt;br&gt;
They were either:  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://blog.backslasher.net/images/fixing-dynamic-dns-on-gargoyle/DDNSCliError.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Successfully retrieved local ip from url&lt;/code&gt;..., so no real error there&lt;br&gt;
Or:  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://blog.backslasher.net/images/fixing-dynamic-dns-on-gargoyle/DDNSUIError.png"&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;Update of new dynamic DNS service configuration(s) failed&lt;/span&gt;
&lt;span class="err"&gt;...&lt;/span&gt;
&lt;span class="err"&gt;Service(s) could not be update properly and have therefore been&lt;/span&gt;
&lt;span class="err"&gt;removed.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Which gives me no info.&lt;br&gt;
Luckily, it's all Linux, so I quickly found the configuration files and
got to work.&lt;br&gt;
Because my DDNS provider is &lt;a href="http://dnsexit.com/"&gt;dnsexit.com&lt;/a&gt;, I
searched for files containing "dnsexit" in the &lt;code&gt;/etc&lt;/code&gt; directory (which
is where configuration is usually kept), like this:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;grep -r &lt;span class="s2"&gt;&amp;quot;dnsexit&amp;quot;&lt;/span&gt; /etc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I found the configuration in &lt;code&gt;/etc/ddns_providers.conf&lt;/code&gt;. You'll see
there the configuration for all of different DDNS providers. I'll copy
my current one:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;service dnsexit.com
 url_template   https://www.dnsexit.com/RemoteUpdate.sv?login=[[USERNAME]]&amp;amp;password=[[PASSWORD]]&amp;amp;host=[[DOMAIN]]&amp;amp;myip=[[IP]]
 required_variables  domain username password
 required_variable_names  DyDNS.DoNm,DyDNS.UsrN,DyDNS.Pssw
 success_regexp   /^0=Success|1=IP*/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Using this configuration, we can deduce that hitting the url under
&lt;code&gt;url_template&lt;/code&gt; while replacing all double-bracketed variables with
actual values will try and update my IP, and the response has to match
the &lt;a href="http://en.wikipedia.org/wiki/Regular_expression"&gt;regular expression&lt;/a&gt; under
&lt;code&gt;success_regexp&lt;/code&gt;. My next action was building this small bash script to
try and emulate Gargoyle's actions:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;HOST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;BESTHOSTEVER.com
&lt;span class="nv"&gt;USER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;SOMETHING
&lt;span class="nv"&gt;PASS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;SOMETHINGELSE

&lt;span class="nv"&gt;IP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;curl -s ifconfig.me/ip&lt;span class="k"&gt;)&lt;/span&gt;
curl &lt;span class="s2"&gt;&amp;quot;https://www.dnsexit.com/RemoteUpdate.sv?login=&lt;/span&gt;&lt;span class="nv"&gt;$USER&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;password=&lt;/span&gt;&lt;span class="nv"&gt;$PASS&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;host=&lt;/span&gt;&lt;span class="nv"&gt;$HOST&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;myip=&lt;/span&gt;&lt;span class="nv"&gt;$IP&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note the line starting with IP. It uses &lt;code&gt;cURL&lt;/code&gt; to hit a nice website,
which is supposed to return your external IP address. The result I got
looked like:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt; HTTP/1.1 200 OK
4=IP not changed. To save our system resources, please don&amp;#39;t post updates unless the IP got changed.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So it looks like dnsexit says something like "no change is needed.
Please don't bother us for no reason." According to &lt;a href="http://downloads.dnsexit.com/ipUpdate.doc"&gt;this document&lt;/a&gt; I found, the code
returned should be 1 (same IP) and not 4 (stop hammering our servers),
because I tried that action once every couple of hours. I can instruct
Gargoyle to accept this as a reasonable answer by modifying
"success_regexp" to this:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt; success_regexp   /^0=Success|1=IP|4=IP not changed*/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;After backing up the file, editing and trying again, lo and behold!
Everything works!&lt;/p&gt;</content><category term="FOSS"></category><category term="DNS"></category><category term="Mysteries Solved"></category><category term="Gargoyle"></category><category term="Scripts"></category><category term="Linux"></category><category term="Networking"></category><category term="DDNS"></category><category term="Bash"></category></entry><entry><title>Setting Up Samba on Raspberry Pi</title><link href="https://blog.backslasher.net/setting-up-samba-on-raspberry-pi.html" rel="alternate"></link><published>2014-01-13T13:12:00+01:00</published><updated>2014-01-13T13:12:00+01:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2014-01-13:/setting-up-samba-on-raspberry-pi.html</id><summary type="html">&lt;p&gt;After setting up my rPi TorrentBox, I wanted to let my family access the
downloaded files.&lt;br&gt;
Since they use Windows (and I don't want to bother their systems with
NFS), I wanted to install Samba on the rPi and create a read-only share
(and a weak user for them to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;After setting up my rPi TorrentBox, I wanted to let my family access the
downloaded files.&lt;br&gt;
Since they use Windows (and I don't want to bother their systems with
NFS), I wanted to install Samba on the rPi and create a read-only share
(and a weak user for them to access the share with).&lt;br&gt;
I found a lot of guides for setting up Samba, but every one was missing
something, so I documented my own procedure:  &lt;/p&gt;
&lt;h3&gt;1. Plan Configuration&lt;/h3&gt;
&lt;p&gt;Answer these questions before you start:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Shares:&lt;ul&gt;
&lt;li&gt;Are you going to use authentication or guest access? (hint:
    authentication is better)&lt;/li&gt;
&lt;li&gt;Is the share read-only?&lt;/li&gt;
&lt;li&gt;What is the share name? (best to keep it in lower-case)&lt;/li&gt;
&lt;li&gt;What is the physical path the share is pointing to? Is it always
    mounted or on a removable drive?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Users / authentication:&lt;ul&gt;
&lt;li&gt;Do you need to change the workgroup's name?&lt;/li&gt;
&lt;li&gt;Do you need to disable password encryption (VERY old clients)?&lt;/li&gt;
&lt;li&gt;How many different remote-access users will be required? How are
    they called? &lt;/li&gt;
&lt;li&gt;Do some users already exist as UNIX users?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It's much easier working with a clear understanding of the desired
configuration.  &lt;/p&gt;
&lt;h3&gt;2. Prepare Access User&lt;/h3&gt;
&lt;p&gt;Create the linux user you want to use (in my case "theothers"). You can
use this command:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;adduser --shell /bin/false --no-create-home
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note that:&lt;/strong&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Shell is set to &lt;code&gt;/bin/false&lt;/code&gt; to help prevent the user from actually
    logging in&lt;/li&gt;
&lt;li&gt;No home directory is created, because the user isn't supposed to
    login anyway&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;3. Prepare Permissions&lt;/h3&gt;
&lt;p&gt;Make sure the access user can't do too much damage, because it might be
abused. I limited its permissions to read (since I don't want my family
messing about the directory anyway).&lt;br&gt;
I won't go into the POSIX permissions model, but the best way to test
the user's permissions is to impersonate that user using   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo su -s /bin/bash theothers
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that the terminal prompt changes to show the impersonated user,
like "theothers@bestrpi". Try and test everything:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;touch&lt;/code&gt;: Creating files&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mkdir&lt;/code&gt;: Creating directories&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ls&lt;/code&gt;: Listing directories&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tail&lt;/code&gt;: Reading files&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Use &lt;code&gt;exit&lt;/code&gt; when finished to return to your own user  &lt;/p&gt;
&lt;h3&gt;4. Install Samba&lt;/h3&gt;
&lt;p&gt;As always, you should update &amp;amp; upgrade before:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo apt-get update &lt;span class="p"&gt;;&lt;/span&gt; sudo apt-get upgrade
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The installation couldn't be simpler:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo apt-get install samba
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;5. Create User Mapping&lt;/h3&gt;
&lt;p&gt;Assuming you're using the default authentication method (you should!),
any user accessing Samba should be imported to the Samba user database.&lt;br&gt;
Use this command to add the user. I'm not sure about password
synchronization, so I just gave it the same password as the "real"
user.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo pdbedit -a -u theothers
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;6. Edit Configuration File&lt;/h3&gt;
&lt;p&gt;This is the hardest part. I'd back up the configuration file to
somewhere safe and start fresh.&lt;br&gt;
Refer to &lt;a href="http://www.samba.org/samba/docs/using_samba/ch06.html"&gt;this site&lt;/a&gt; and &lt;a href="http://www.samba.org/samba/docs/man/manpages/smb.conf.5.html"&gt;this one&lt;/a&gt; for
how the configuration file should look like.&lt;br&gt;
After modifying the configuration, restart the Samba service to apply:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo service samba restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can test your shares from gnome, using "connect to server" and using
the "smb" initial  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://blog.backslasher.net/images/setting-up-samba-on-raspberry-pi/ConnectToServer.png"&gt;&lt;/p&gt;
&lt;h3&gt;7. Apply to Clients&lt;/h3&gt;
&lt;p&gt;Make sure everything works. I find it best to restart all involved
machines and testing again, to make sure all settings are persistent.&lt;br&gt;
When accessing the shares from Windows, I find it best to use network
drives. Check "reconnect at sign-in" to make the drive "permanent" and
check "Connect using different credentials".  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://blog.backslasher.net/images/setting-up-samba-on-raspberry-pi/NetworkDrive.png"&gt;&lt;/p&gt;
&lt;p&gt;(photo from &lt;a href="http://techynotes.net/question-how-do-i-map-a-network-drive-in-windows-8/"&gt;techynotes&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Use the workgroup from the Samba configuration as a domain, e..g
&lt;code&gt;WORKGROUP\theothers&lt;/code&gt;.  &lt;/p&gt;
&lt;p&gt;Enjoy your Samba server!&lt;/p&gt;</content><category term="FOSS"></category><category term="Samba"></category><category term="Security"></category><category term="Linux"></category><category term="SMB"></category><category term="Raspberry Pi"></category><category term="raspberrySeed"></category></entry><entry><title>Raspberry Pi + Deluge = Segmentation Fault</title><link href="https://blog.backslasher.net/raspberry-pi-deluge-segmentation-fault.html" rel="alternate"></link><published>2014-01-09T15:43:00+01:00</published><updated>2014-01-09T15:43:00+01:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2014-01-09:/raspberry-pi-deluge-segmentation-fault.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This is relevant to any ARM based device running Linux&lt;/p&gt;
&lt;p&gt;I'm trying to use a Raspberry Pi as a torrentbox (an always-on
BitTorrent client).&lt;br&gt;
If I ever finish this project, I'll defiantly post my build.&lt;br&gt;
Anyway, I had a really annoying problem - every once in a while, the
Deluge …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This is relevant to any ARM based device running Linux&lt;/p&gt;
&lt;p&gt;I'm trying to use a Raspberry Pi as a torrentbox (an always-on
BitTorrent client).&lt;br&gt;
If I ever finish this project, I'll defiantly post my build.&lt;br&gt;
Anyway, I had a really annoying problem - every once in a while, the
Deluge daemon would crash, printing only this message as a reason:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;Segmentation Fault&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(Meaning that the program tried to access a part of the memory it's not
allowed to.)  &lt;/p&gt;
&lt;p&gt;I made sure I'm running the latest version of deluge (as offered by the
rPi debian repository), and attempted to troubleshoot. &lt;br&gt;
I tried running deluge using debug logging, but found no consistent
message pattern before the crash, probably meaning that the code causing
the fault wasn't message-worthy or it meant to log its action after the
line responsible for the crash. &lt;br&gt;
Since then I've been ignoring it and simply restarting the daemon every
now and then, but today it wouldn't stay running for 5 minutes, so I had
to do something.&lt;br&gt;
Even though I know very little about Linux troubleshooting, I've decided
to try and use GDB (GNU Debugger) to try and understand the cause.&lt;br&gt;
I used these commands to recreate the problem in gdb:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ gdb --args python /usr/bin/deluged -d -L info
(gdb) handle SIGILL nostop
(gdb) run
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;deluged&lt;/code&gt; (deluge daemon) arguments are used to tell deluged to avoid
"daemonising" (so to stay attached to console) and to log to screen
information messages.&lt;br&gt;
The &lt;code&gt;handle&lt;/code&gt; line is because libcrypto is testing the CPU features on
initialization, and creates (and handles) a fake "Illegal Instruction"
error (&lt;a href="http://www.raspberrypi.org/phpBB3/viewtopic.php?p=155085"&gt;link&lt;/a&gt;).&lt;br&gt;
&lt;code&gt;run&lt;/code&gt; tells deluged to start executing, and then we wait for the
inevitable crash.&lt;br&gt;
The crash looked something like this:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Program received signal SIGSEGV, Segmentation fault.
[Switching to Thread 0xb5a5e470 (LWP 10169)]
RC4 () at /usr/lib/arm-linux-gnueabihf/libcrypto.so.1.0.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So the "guilty" code is libcrypto. Let's search for its owner:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ apt-cache search libcrypto
libcrypto++-dev - General purpose cryptographic library - C++ development
libcrypto++-doc - General purpose cryptographic library - documentation
libcrypto++-utils - General purpose cryptographic library - utilities and data files
libcrypto++9 - General purpose cryptographic library - shared library
libcrypto++9-dbg - General purpose cryptographic library - debug symbols
libcryptokit-ocaml - cryptographic algorithm library for OCaml - runtime
libcryptokit-ocaml-dev - cryptographic algorithm library for OCaml - development
libssl-dev - SSL development libraries, header files and documentation
libssl-doc - SSL development documentation documentation
libssl1.0.0 - SSL shared libraries
libssl1.0.0-dbg - Symbol tables for libssl and libcrypto
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As we can see, it's part of &lt;code&gt;libssl1.0.0&lt;/code&gt;. Since these are also
up-to-date, I don't want to touch them. After examining the backtrace in
gdb:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;(gdb) thread apply all backtrace
...
Thread 3 (Thread 0xb5a5e470 (LWP 10169)):
#0  0xb6568c7c in RC4 () from /usr/lib/arm-linux-gnueabihf/libcrypto.so.1.0.0
#1  0xb67acee4 in libtorrent::bt_peer_connection::send_buffer(char const*, int, int) () from /usr/lib/libtorrent-rasterbar.so.6
#2  0xb67ab3ec in libtorrent::bt_peer_connection::append_const_send_buffer(char const*, int) () from /usr/lib/libtorrent-rasterbar.so.6
#3  0xb68b6b30 in ?? () from /usr/lib/libtorrent-rasterbar.so.6
#4  0xb68b6b30 in ?? () from /usr/lib/libtorrent-rasterbar.so.6
Backtrace stopped: previous frame identical to this frame (corrupt stack?)
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I can see it's being called by &lt;code&gt;libtorrent::bt_peer_connection&lt;/code&gt;, so
it's probably related to peer-to-peer encryption.&lt;br&gt;
Disabling it wasn't trivial either - since I couldn't get deluged to run
for more than one minute, I had to edit the configuration file
manually.&lt;br&gt;
After editing the file &lt;code&gt;~/.config/deluge/core.conf&lt;/code&gt; and changing these
settings (UI equivalent in brackets):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;enc_level&lt;/code&gt; (&lt;code&gt;Network &amp;gt; Encryption &amp;gt; Level&lt;/code&gt;) from &lt;code&gt;2&lt;/code&gt; to &lt;code&gt;0&lt;/code&gt; ("Handshake")  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;enc_prefer_rc4&lt;/code&gt; (&lt;code&gt;Network &amp;gt; Encryption &amp;gt; Encrypt entire stream&lt;/code&gt;) from &lt;code&gt;true&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Everything seems to be normal now. &lt;del&gt;I'm still not fully aware what are
the friendly names of those settings.&lt;/del&gt; Thanks Lucas for the setting names!  &lt;/p&gt;
&lt;p&gt;Of course this is only a workaround, but at least I can use Deluge
again.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://blog.backslasher.net/images/raspberry-pi-deluge-segmentation-fault/DelugedWorking.png"&gt;&lt;/p&gt;
&lt;p&gt;What an adventure!&lt;/p&gt;</content><category term="FOSS"></category><category term="Mysteries Solved"></category><category term="Linux"></category><category term="BitTorrent"></category><category term="Raspberry Pi"></category><category term="raspberrySeed"></category><category term="Ramblings"></category><category term="Deluge"></category></entry><entry><title>Avoiding Text Overflow with Prettify on Blogger</title><link href="https://blog.backslasher.net/avoiding-text-overflow-with-prettify-on-blogger.html" rel="alternate"></link><published>2014-01-09T12:32:00+01:00</published><updated>2014-01-09T12:32:00+01:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2014-01-09:/avoiding-text-overflow-with-prettify-on-blogger.html</id><summary type="html">&lt;p&gt;I'm currently testing &lt;a href="http://code.google.com/p/google-code-prettify/"&gt;Prettify&lt;/a&gt; to replace &lt;a href="http://alexgorbatchev.com/SyntaxHighlighter/"&gt;SyntaxHighlighter&lt;/a&gt; as the
syntax-highlighting solution in my blog.&lt;br&gt;
By the way, it's nothing critical, but Blogger's preview mode breaks because of SH's inclusion (the reference URLs are being converted to https and break down) and the project's homepage seems quite stale (latest version release …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I'm currently testing &lt;a href="http://code.google.com/p/google-code-prettify/"&gt;Prettify&lt;/a&gt; to replace &lt;a href="http://alexgorbatchev.com/SyntaxHighlighter/"&gt;SyntaxHighlighter&lt;/a&gt; as the
syntax-highlighting solution in my blog.&lt;br&gt;
By the way, it's nothing critical, but Blogger's preview mode breaks because of SH's inclusion (the reference URLs are being converted to https and break down) and the project's homepage seems quite stale (latest version release was long ago).&lt;br&gt;
After some initial testing, I found that scripts that are too long are overflowing, which looks bad:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://blog.backslasher.net/images/avoiding-text-overflow-with-prettify-on-blogger/PrettifyWithOverflow.png"&gt;&lt;/p&gt;
&lt;p&gt;I slightly modified a solution I found in &lt;a href="http://stackoverflow.com/a/10787539"&gt;StackOverflow&lt;/a&gt;.&lt;br&gt;
I created a Style segment in my template, but targeted all "prettyprint" &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt;s (to avoid having to add "codescroll" to every &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt;) and only left the CSS directive "overflow-x: auto;".&lt;br&gt;
The code looks like this:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;style&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;pre.prettyprint {overflow-x: auto}&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And the result, like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://blog.backslasher.net/images/avoiding-text-overflow-with-prettify-on-blogger/PrettifyNoOverflow.png"&gt;&lt;/p&gt;
&lt;p&gt;Much better!&lt;/p&gt;</content><category term="FOSS"></category><category term="Prettify"></category><category term="CSS"></category><category term="HTML"></category><category term="Blog"></category></entry><entry><title>Extending Yii's Web Application Creation</title><link href="https://blog.backslasher.net/extending-yiis-web-application-creation.html" rel="alternate"></link><published>2012-03-24T18:01:00+01:00</published><updated>2012-03-24T18:01:00+01:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2012-03-24:/extending-yiis-web-application-creation.html</id><summary type="html">&lt;p&gt;I found out that after creating my Yii Applications through &lt;code&gt;Yiic.bat&lt;/code&gt;, I tend to modify the same things in all of them (adding &lt;code&gt;.htaccess&lt;/code&gt; files for pretty urls (no &lt;code&gt;index.php&lt;/code&gt;), adding a reference for my custom modules directory, etc.), so I decided to try and override the WebApp …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I found out that after creating my Yii Applications through &lt;code&gt;Yiic.bat&lt;/code&gt;, I tend to modify the same things in all of them (adding &lt;code&gt;.htaccess&lt;/code&gt; files for pretty urls (no &lt;code&gt;index.php&lt;/code&gt;), adding a reference for my custom modules directory, etc.), so I decided to try and override the WebApp command with one of my own. There might be better methods, but it's also good practice.&lt;br&gt;
My steps were as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Copy the following files from the framework directory to a side
directory (which I named &lt;code&gt;myWebApp&lt;/code&gt;):&lt;code&gt;yiic&lt;/code&gt;,&lt;code&gt;yiic.bat&lt;/code&gt;,&lt;code&gt;yiic.php&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;In &lt;code&gt;yiic.php&lt;/code&gt;, modify &lt;code&gt;require_once&lt;/code&gt; to reference the actual location of &lt;code&gt;yii.php&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;Create the following directories in the side directory:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cli/commands&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cli/views/webapp&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Copy the file &lt;code&gt;cli/commands/WebAppCommand.php&lt;/code&gt; from the framework directory into your &lt;code&gt;cli/commands&lt;/code&gt; directory. Be sure to rename it. I
chose &lt;code&gt;myWebAppCommand.php&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Open the copied file.&lt;/li&gt;
&lt;li&gt;Change the class name to match the file name. In my case - &lt;code&gt;MyWebAppCommand&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Change it to extend &lt;code&gt;WebAppCommand&lt;/code&gt;, in order to have access to the original application generation code.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Just before the class deceleration, manually import the original
WebAppCommand file (autoload won't find it) using the following statement:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?&lt;/span&gt; &lt;span class="nx"&gt;Yii&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="na"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;system.cli.commands.WebAppCommand&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Modify the class to your liking. Sadly, the "UI" and the file copy logic are located at the same method (&lt;code&gt;run&lt;/code&gt;), so it's either copying the entire method to your clone, or missing out on the entire logic of the application. Assuming you "steal" the run method, you should do one of the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Also copy the template web site, found at &lt;code&gt;cli/views/webapp&lt;/code&gt; to your side directory (at the same path!)&lt;/li&gt;
&lt;li&gt;Modify the line that tells Yii where to find the source files:&lt;br&gt;
  Instead of &lt;code&gt;$sourceDir=realpath(dirname(__FILE__).'/../views/webapp');&lt;/code&gt;&lt;br&gt;
  Use &lt;code&gt;$sourceDir=realpath(Yii::getPathOfAlias('system').'/cli/views/webapp');&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Further customize the file. The most common things to do:&lt;ul&gt;
&lt;li&gt;Copy additional files - Create your own webapp directory and copy it after copying the original one&lt;/li&gt;
&lt;li&gt;Add customization callback - copy one of the &lt;code&gt;generate\*&lt;/code&gt; methods and add appropriate callback in the &lt;code&gt;run&lt;/code&gt; method.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Happy hacking!&lt;/p&gt;</content><category term="FOSS"></category><category term="PHP"></category><category term="Yii"></category></entry><entry><title>Fixing Facebook to Google Calendar synchronization</title><link href="https://blog.backslasher.net/fixing-facebook-to-google-calendar.html" rel="alternate"></link><published>2012-03-24T17:39:00+01:00</published><updated>2012-03-24T17:39:00+01:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2012-03-24:/fixing-facebook-to-google-calendar.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: It's fixed now. The project itself is still pretty cool&lt;/p&gt;
&lt;p&gt;I recently managed to sync my Facebook events to my Google Calendar (and
thusly to my Android phone). At first the task seemed simple, because
Facebook offers you a link to export your events in
&lt;a href="http://en.wikipedia.org/wiki/ICal"&gt;iCal&lt;/a&gt; format, but once …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: It's fixed now. The project itself is still pretty cool&lt;/p&gt;
&lt;p&gt;I recently managed to sync my Facebook events to my Google Calendar (and
thusly to my Android phone). At first the task seemed simple, because
Facebook offers you a link to export your events in
&lt;a href="http://en.wikipedia.org/wiki/ICal"&gt;iCal&lt;/a&gt; format, but once imported to
Google Calendar all you can see from the events is a "busy/free" block,
like this  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://blog.backslasher.net/images/fixing-facebook-to-google-calendar/busycalendar.PNG"&gt;&lt;/p&gt;
&lt;p&gt;Of course it won't do at all, as you want to be able to see all of the
event details!&lt;br&gt;
After some fiddling (with &lt;a href="http://fiddler2.com/"&gt;Fiddler&lt;/a&gt;) I saw that
the iCal events had a field called &lt;code&gt;CLASS&lt;/code&gt;, which was set to &lt;code&gt;PRIVATE&lt;/code&gt;
on all of my Facebook events.  &lt;/p&gt;
&lt;p&gt;Facebook is probably using that field to signify which events are public
and which are invite-only, like mine where.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://blog.backslasher.net/images/fixing-facebook-to-google-calendar/inviteOnly.PNG"&gt;&lt;/p&gt;
&lt;p&gt;Google Calendar must be interpreting the &lt;code&gt;private&lt;/code&gt; as an event which is
sensitive and cannot be fully shown - only the "busy/free" field.&lt;/p&gt;
&lt;p&gt;I didn't have the intention to find which one is using this field
"correctly", but something had to be done. After editing the iCal with
notepad and modifying this field to &lt;code&gt;PUBLIC&lt;/code&gt;, the events showed up fine,
So I knew what I had to do.&lt;/p&gt;
&lt;p&gt;I created another Yii application called
"&lt;a href="http://apps.oneboredadmin.com/eventFix/"&gt;eventFix&lt;/a&gt;" that helps users
feed their Facebook events url and get a proxy url - one that goes
through my application which replaces all instances of &lt;code&gt;CLASS:PRIVATE&lt;/code&gt;
to &lt;code&gt;CLASS:PUBLIC&lt;/code&gt;. I'm using it already!&lt;/p&gt;
&lt;p&gt;If you're worried about me sniffing your precious events, I can probably
tell you that I don't really care / have the db space for that. But if
you're uncomfortable using this applications for that reason, don't.&lt;/p&gt;
&lt;p&gt;I'm sure other people have encountered the same problem and came up with
their own solutions, and I'm sure some of those are better than mine. I
don't care, I did it for the practice.&lt;/p&gt;
&lt;p&gt;Have fun syncing!&lt;/p&gt;</content><category term="Foss"></category><category term="Mysteries Solved"></category><category term="Facebook"></category><category term="iCal"></category><category term="Calendar"></category><category term="Yii"></category></entry><entry><title>Creating a common Yii code directory</title><link href="https://blog.backslasher.net/creating-common-yii-code-directory.html" rel="alternate"></link><published>2012-03-23T20:51:00+01:00</published><updated>2012-03-23T20:51:00+01:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2012-03-23:/creating-common-yii-code-directory.html</id><summary type="html">&lt;p&gt;Yii natively supports code recycling, by allowing you to store common code in modules, widgets etc.&lt;br&gt;
However, to share code between applications, you still have to copy the files from one application to another. Right? &lt;strong&gt;Wrong!&lt;/strong&gt;&lt;br&gt;
I recently created a common code directory (wittingly called "my-yii") where I store all …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Yii natively supports code recycling, by allowing you to store common code in modules, widgets etc.&lt;br&gt;
However, to share code between applications, you still have to copy the files from one application to another. Right? &lt;strong&gt;Wrong!&lt;/strong&gt;&lt;br&gt;
I recently created a common code directory (wittingly called "my-yii") where I store all of my common code.&lt;br&gt;
To access it from other applications, I added the following line to the &lt;code&gt;index.php&lt;/code&gt; file (you should add it to your application's &lt;code&gt;yiic.php&lt;/code&gt; if relevant), just before the application creation:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?&lt;/span&gt; &lt;span class="nx"&gt;Yii&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="na"&gt;setPathOfAlias&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;my-yii&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;__FILE__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/../my-yii&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now you can use all of the code contained in your common directory, as
long as you append "my-yii" to the inclusion directory, thusly:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?&lt;/span&gt; &lt;span class="nv"&gt;$mailer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Yii&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="na"&gt;createComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;my-yii.extensions.mailer.EMailer&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="FOSS"></category><category term="PHP"></category><category term="Yii"></category></entry><entry><title>RssCache - An RSS Cache / Aggregator</title><link href="https://blog.backslasher.net/rsscache-rss-cache-aggregator.html" rel="alternate"></link><published>2012-02-12T19:28:00+01:00</published><updated>2012-02-12T19:28:00+01:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2012-02-12:/rsscache-rss-cache-aggregator.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; I'm no longer using this site, and might take it down. Let me know if you want the code.  &lt;/p&gt;
&lt;p&gt;Recently I've decided that I want to use μTorrent's Feed ability to auto
download BitTorrent torrents, after I gave up on Miro (I moved my video
library and discovered that …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; I'm no longer using this site, and might take it down. Let me know if you want the code.  &lt;/p&gt;
&lt;p&gt;Recently I've decided that I want to use μTorrent's Feed ability to auto
download BitTorrent torrents, after I gave up on Miro (I moved my video
library and discovered that Miro couldn't take it, and to change that
setting without losing all of my preferences I would have to edit some
mini-db... ugh). This minor decision had some interesting effects.&lt;/p&gt;
&lt;h3&gt;The Problem&lt;/h3&gt;
&lt;p&gt;I'm a member of a certain torrent sharing site, and I tried feeding that
site's feed to uTrorrent.&lt;br&gt;
The problem I discovered - The feed was only showing the latest 100 items, and since a new torrent is uploaded every
10 mins or so, If I leave my client off for a day, some items are bound
to go undiscovered.&lt;br&gt;
I tried leaving my PC on at night, but I couldn't sleep. I considered moving my torrent-box to an "offsite" place (another room), but found it too complex.  &lt;/p&gt;
&lt;h3&gt;The Solution&lt;/h3&gt;
&lt;p&gt;Eventually, I came up with quite an elegant solution - Creating a small
PHP site (which I call RssCache) that'll consume the torrent site's
feed, save the items on its own db, and present the client with a bigger
feed.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt;&lt;br&gt;
Today I've finished all of the UI using
&lt;a href="http://www.yiiframework.com/"&gt;YII&lt;/a&gt;! You're more than welcome to &lt;a href="http://apps.oneboredadmin.com/rssCache/"&gt;check it out&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;I chose a PHP/MySQL solution, because I have a nice hosting package at
dreamhost.com.&lt;br&gt;
My primary pages are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Cron.php&lt;/strong&gt;: Triggered by a cron job (duh) and populates the database
  with the feed items  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Feed.php&lt;/strong&gt;: Given the right key, creates an RSS feed from the db and
presents it  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The coding itself isn't that impressive - it's a very small solution.&lt;br&gt;
However, there are some interesting points I've encountered and wish to
share with you:  &lt;/p&gt;
&lt;h4&gt;Purging items&lt;/h4&gt;
&lt;p&gt;I figured that although I want the list to be beefy, items will have to
die sometime. So I created a &lt;code&gt;created&lt;/code&gt; column and added a little
statement at the start of the cron script to purge the table from items
72 hours old.   &lt;/p&gt;
&lt;h4&gt;Storing feed items in the db&lt;/h4&gt;
&lt;p&gt;I initially started parsing the feed with
&lt;a href="http://magpierss.sourceforge.net/"&gt;MagpieRSS&lt;/a&gt;, but then thought about
what info to store in the db:&lt;br&gt;
&lt;strong&gt;If I use one table column for one item field&lt;/strong&gt;, I won't have room for extra/unexpected item data.&lt;br&gt;
&lt;strong&gt;If I serialize the PHP object&lt;/strong&gt;, I'd have to reconstruct it when I serve the feed.&lt;br&gt;
Eventually I decided to simply store the entire item's XML in
the db.  &lt;/p&gt;
&lt;h4&gt;Detecting duplicates&lt;/h4&gt;
&lt;p&gt;Storing feed items in the db is easy, but avoiding duplicate items is
quite difficult, especially because the RSS structure offers no id or
unique key.&lt;br&gt;
I started comparing rows based on the entire item xml, but
later found out that my particular torrent site changed the item's
description based on the seed/leech ratio, which made the item appear
twice.&lt;br&gt;
I thought about that for a while, and decided that item URLs are
supposed to be unique, so I created a &lt;code&gt;link&lt;/code&gt; column in the item table,
used solely to detect duplicates, combined with the item's parent (the
source feed).&lt;/p&gt;
&lt;h4&gt;Avoiding db-intensive operations&lt;/h4&gt;
&lt;p&gt;Like any decent programmer, I try to avoid overworking the db, because
it's almost always the weak spot in data-driven applications (even tiny
ones like mine).&lt;br&gt;
Unfortunately for my MySQL server, I'm inserting the feed items to the
db one at a time (I know I can add several items with a single &lt;code&gt;INSERT&lt;/code&gt;,
but it'll be more difficult to utilize &lt;code&gt;PDO&lt;/code&gt;'s prepared statements, which
save me the trouble of escaping my data, which can be quite annoying
when messing with xml).&lt;br&gt;
However, I decided that to compensate for the single-item statements,
I'll save the duplicate-checking for later.&lt;br&gt;
Eventually I ended up inserting the items to a temporary table, and adding to the real table the results of a &lt;code&gt;left outer join&lt;/code&gt; between the tables, selecting only the temp rows that have no matching "permanent" rows. The query looks
something like this:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;insert&lt;/span&gt; &lt;span class="k"&gt;into&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FeedId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RssData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="k"&gt;current_timestamp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;tempitems&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;
    &lt;span class="k"&gt;left&lt;/span&gt; &lt;span class="k"&gt;join&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FeedId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FeedId&lt;/span&gt; &lt;span class="k"&gt;AND&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt;
    &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FeedId&lt;/span&gt; &lt;span class="k"&gt;IS&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;Sorting items&lt;/h4&gt;
&lt;p&gt;When I started testing my little script, I saw that new items are
appended to the end of the list (rather than the head, where it's placed
at the "real" feed). I considered sorting the items by &lt;code&gt;created&lt;/code&gt;
(descending, of course), but eventually realised that it's not that
important for now, and will consume considerable time when the table
gets larger.  &lt;/p&gt;
&lt;h4&gt;Some sort of security&lt;/h4&gt;
&lt;p&gt;I didn't want to be bothered with authentication on this site (after
all, creating a user management system for two php pages is kind of
stupid), and I don't have https on my hosting, but I still didn't want
my rss to be available for the whole world to see.&lt;br&gt;
In addition to separating the served feeds into "channels" (each channel can aggregate several feeds) and giving each channel a unique int id and a friendly
name (used as a title), I gave each channel its own 20-Character key.
This key is used when fetching the feed, serving as a sort of password.&lt;/p&gt;
&lt;h4&gt;Intelligent Indexing&lt;/h4&gt;
&lt;p&gt;Considering the fact that the item table is expected to be quite large
and have many rows removed from it on an hourly basis, I avoided adding
the almost-mandatory &lt;code&gt;id&lt;/code&gt; column to this table.&lt;br&gt;
The reason is that I'll never be required to identify a single item, and creating a primary key means that the server maintains an index on the table, and has to update it when rows are added and more importantly, removed.&lt;br&gt;
Instead, I created a non-unique index on the &lt;code&gt;created&lt;/code&gt; column, to help the server find expired items.&lt;br&gt;
I also count on the &lt;code&gt;feeds-items&lt;/code&gt; foreign key to assist the server in
looking up items based on feed (useful when serving a specific feed).  &lt;/p&gt;
&lt;h3&gt;The Result&lt;/h3&gt;
&lt;p&gt;I finished coding in about 6 hours and the site is currently very much
alive at
&lt;a href="http://apps.oneboredadmin.com/rssCache"&gt;http://Apps.OneBoredAdmin.com/rssCache&lt;/a&gt;
(fair warning  - at the moment the site has no UI whatsoever). I'll make
it more user-friendly when I feel like it. The important point is - I
can turn my computer off tonight safely!&lt;br&gt;
If you'd like to use my site feel free to comment, message me or
whatever, and I'll try to speed the UI development up.&lt;br&gt;
&lt;strong&gt;Edit:&lt;/strong&gt; Finished! Check top for link&lt;/p&gt;</content><category term="FOSS"></category><category term="MySQL"></category><category term="Programming"></category><category term="PHP"></category><category term="RSS"></category><category term="BitTorrent"></category><category term="Ramblings"></category><category term="SQL"></category></entry><entry><title>Google Friendly Apache Domain Migration</title><link href="https://blog.backslasher.net/google-friendly-apache-domain-migration.html" rel="alternate"></link><published>2011-07-26T15:10:00+02:00</published><updated>2011-07-26T15:10:00+02:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2011-07-26:/google-friendly-apache-domain-migration.html</id><summary type="html">&lt;p&gt;I recently migrated a domain for a client, and did it like a noob (as in
simply copying the db and files, making sure everything's working, and
then shutting down the old site). As a result, Google's pageranks were
lost, old links were broken and ghost pages were found on …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I recently migrated a domain for a client, and did it like a noob (as in
simply copying the db and files, making sure everything's working, and
then shutting down the old site). As a result, Google's pageranks were
lost, old links were broken and ghost pages were found on Google
searches.&lt;br&gt;
After googling around, I found out what I &lt;strong&gt;should&lt;/strong&gt; have done, and made
my own action list.&lt;br&gt;
&lt;strong&gt;Note:&lt;/strong&gt; While this list contains Apache and Google specific steps, you
can certainly research and replace them with equivalent steps for your
scenario.&lt;br&gt;
Also, Google's change of address only works for root domains (not
bla.othersite.com)  &lt;/p&gt;
&lt;h3&gt;1. Prepare destination environment&lt;/h3&gt;
&lt;p&gt;Copy files, dbs etc from to the new site, and make sure it's working.&lt;br&gt;
Change whatever absolute (http://bla.com/file) URLs you have in your
site to point to the new domain &lt;br&gt;
Before you get to the next stage, make sure your new site is up to date
(dbs updated etc).  &lt;/p&gt;
&lt;h3&gt;2. Prepare to redirect the old&lt;/h3&gt;
&lt;p&gt;site
Make sure &lt;a href="http://httpd.apache.org/docs/2.2/mod/mod_rewrite.html"&gt;mod_rewrite&lt;/a&gt; is
enabled on the old server. Almost all modern Apache hosts have it
enabled.&lt;br&gt;
Rename / wipe the old site's root directory (including deleting sub
directories). Of course you should back up the files if you delete them.&lt;/p&gt;
&lt;h3&gt;3. Preform the actual redirection&lt;/h3&gt;
&lt;p&gt;Create the &lt;code&gt;.htaccess&lt;/code&gt; in the root directory, and set it to contain:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;lt;ifmodule mod_rewrite.c&amp;gt;
RewriteEngine On
RewriteCond %{REQUEST_FILENAME} !-f
RewriteRule ^(.*)$ http://NEWDOMAIN.COM/$1 [R=301,L]
&amp;lt;/ifmodule&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will cause &lt;code&gt;mod_rewrite&lt;/code&gt; to redirect all requests to the new domain,
except for files that exist in the old site (that's what the
RewriteConds do, &lt;code&gt;-f&lt;/code&gt; is for files). It's useful because that way you can
keep Google Webmaster Tools' validation file on the old domain, but it
won't be served on the new one.&lt;br&gt;
Test the redirection by:  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Trying to access the old site and getting redirected to the new
    (working) site&lt;/li&gt;
&lt;li&gt;Putting a file on the old site (such as &lt;code&gt;test.txt&lt;/code&gt;) and successfully
    downloading it (via &lt;code&gt;oldsite.com/test.txt&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;4. Verify sites in Google Webmaster Tools&lt;/h3&gt;
&lt;p&gt;If you haven't done so already, add both sites to &lt;a href="http://www.google.com/webmasters/tools/"&gt;Google Webmaster Tools&lt;/a&gt; (it's free!) and
validate them according to the site. It's preferable to use the html
file validation.  &lt;/p&gt;
&lt;h3&gt;5. Post a change of address&lt;/h3&gt;
&lt;p&gt;Via Webmaster Tools:  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open the old site's dashboard&lt;/li&gt;
&lt;li&gt;Click &lt;code&gt;Site Configuration&amp;gt;  Change of Address&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Verify the checklist. Should be overlapping with mine.&lt;/li&gt;
&lt;li&gt;Select the new site from the dropdown below and submit&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That's it! Make sure to check Webmaster tools every few days to look for
things such as crawl errors or incoming links pointing to the old
domain, and make sure to google the old and new site to see if Google's
db has updated.&lt;br&gt;
&lt;code&gt;.htaccess&lt;/code&gt; code taken from &lt;a href="http://stackoverflow.com/questions/6531188/old-to-new-301-redirect-parameters-for-better-google-migration"&gt;StackOverflow&lt;/a&gt;&lt;br&gt;
Happy migrating!&lt;/p&gt;
&lt;/p&gt;</content><category term="FOSS"></category><category term="Apache"></category><category term="Google"></category></entry><entry><title>Dumping your MySQL db using PHP</title><link href="https://blog.backslasher.net/dumping-your-mysql-db-using-php.html" rel="alternate"></link><published>2011-05-28T12:54:00+02:00</published><updated>2011-05-28T12:54:00+02:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2011-05-28:/dumping-your-mysql-db-using-php.html</id><summary type="html">&lt;p&gt;Hi.&lt;br&gt;
One of my clients asked me to be able to take manual backups of his DB,
and because he wasn't so technologically-inclined, using the hosting
company's interface wasn't an option. So I created a small PHP page that
uses &lt;strong&gt;mysqldump&lt;/strong&gt; to dump the site's db in a downloadable way …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hi.&lt;br&gt;
One of my clients asked me to be able to take manual backups of his DB,
and because he wasn't so technologically-inclined, using the hosting
company's interface wasn't an option. So I created a small PHP page that
uses &lt;strong&gt;mysqldump&lt;/strong&gt; to dump the site's db in a downloadable way. The
interesting part is:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?&lt;/span&gt;
&lt;span class="c1"&gt;// Make sure user is allowed to dump the DB. We don&amp;#39;t want everyone getting a copy of our data!&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;UserIsAdmin&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="c1"&gt;// Replace variables with your own values&lt;/span&gt;
 &lt;span class="nv"&gt;$user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SQLUSER&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nv"&gt;$password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SQLPASSWORD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nv"&gt;$db&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SQLDATABASE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nv"&gt;$host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SQLSERVER&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nv"&gt;$command&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;mysqldump --user &lt;/span&gt;&lt;span class="si"&gt;$user&lt;/span&gt;&lt;span class="s2"&gt; --password=&lt;/span&gt;&lt;span class="si"&gt;$password&lt;/span&gt;&lt;span class="s2"&gt; --host &lt;/span&gt;&lt;span class="si"&gt;$host&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
 &lt;span class="s2"&gt;&amp;quot; --create-options &lt;/span&gt;&lt;span class="si"&gt;$db&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
 &lt;span class="nv"&gt;$arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="c1"&gt;// Execute&lt;/span&gt;
 &lt;span class="nb"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$command&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;$arr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="nv"&gt;$res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;implode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$arr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="c1"&gt;// Make the resulting input look like a downloadable file. Remove these if you wish&lt;/span&gt;
 &lt;span class="nb"&gt;header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Content-Type: text/plain; charset=utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="nb"&gt;header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Content-Disposition: attachment;filename=&amp;quot;backup.sql&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$res&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And that's it!&lt;br&gt;
Of course this script only works if you can execute stuff on your host.&lt;br&gt;
You can give it its own page, or make it a part of a bigger one.&lt;br&gt;
Enjoy!&lt;/p&gt;</content><category term="Foss"></category><category term="PHP"></category><category term="SQL"></category><category term="Backups"></category></entry><entry><title>Making your pages more Facebook shareable</title><link href="https://blog.backslasher.net/making-your-pages-more-facebook-shareable.html" rel="alternate"></link><published>2011-04-01T16:44:00+02:00</published><updated>2011-04-01T16:44:00+02:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2011-04-01:/making-your-pages-more-facebook-shareable.html</id><summary type="html">&lt;p&gt;I'm working on a project involving &lt;a href="http://gallery.menalto.com/"&gt;Gallery 3&lt;/a&gt;, and one of my goals was tight Facebook
integration. Today I've wanted to make sure that when someone shares a
page from my gallery on Facebook, it'll show up OK.&lt;br&gt;
After some digging around I found some interesting stuff:  &lt;/p&gt;
&lt;h4&gt;Facebook's URL Linter …&lt;/h4&gt;</summary><content type="html">&lt;p&gt;I'm working on a project involving &lt;a href="http://gallery.menalto.com/"&gt;Gallery 3&lt;/a&gt;, and one of my goals was tight Facebook
integration. Today I've wanted to make sure that when someone shares a
page from my gallery on Facebook, it'll show up OK.&lt;br&gt;
After some digging around I found some interesting stuff:  &lt;/p&gt;
&lt;h4&gt;Facebook's URL Linter&lt;/h4&gt;
&lt;p&gt;Whenever you want to test / troubleshoot your shared URLs, use &lt;a href="http://developers.facebook.com/tools/lint"&gt;this tool&lt;/a&gt; to see what Facebook
makes of it. It'll take a url and display all metadata that Facebook
harvests from the page, like its title, description and thumbnail.  &lt;/p&gt;
&lt;h4&gt;Metadata tags&lt;/h4&gt;
&lt;p&gt;Page metadata can be "force-fed" to Facebook using &lt;code&gt;&amp;lt;Metadata&amp;gt;&lt;/code&gt; tags.&lt;br&gt;
I haven't been able to find a complete list, but these folks will do for
most people:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;title&lt;/li&gt;
&lt;li&gt;description&lt;/li&gt;
&lt;li&gt;image_src&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Open Graph Tags&lt;/h4&gt;
&lt;p&gt;If your page represents a real-life object (such as a celebrity, movie,
restaurant) you might prefer using &lt;a href="http://ogp.me/"&gt;Open Graph&lt;/a&gt;. Don't
be misled by the name, this standard was created for Facebook. It's not
some internet-wide phenomenon (at least for now!)  &lt;/p&gt;
&lt;p&gt;These resources should be enough for you to be able to make your page
Facebook-shareable.&lt;/p&gt;</content><category term="FOSS"></category><category term="Facebook"></category><category term="HTML"></category></entry><entry><title>Changing php settings without .htaccess or php.ini</title><link href="https://blog.backslasher.net/changing-php-settings-without-htaccess.html" rel="alternate"></link><published>2011-02-04T14:06:00+01:00</published><updated>2011-02-04T14:06:00+01:00</updated><author><name>Nitz</name></author><id>tag:blog.backslasher.net,2011-02-04:/changing-php-settings-without-htaccess.html</id><summary type="html">&lt;p&gt;I'm doing a little developing in PHP as a hobby, and I got some task involving free hosting in &lt;a href="http://www.freehostingcloud.com/"&gt;FreeHostingCloud.com&lt;/a&gt;.&lt;br&gt;
Since I'm just starting to learn PHP 5, I have a lot of errors. All kinds of them. And it took me a while to understand that errors aren't …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I'm doing a little developing in PHP as a hobby, and I got some task involving free hosting in &lt;a href="http://www.freehostingcloud.com/"&gt;FreeHostingCloud.com&lt;/a&gt;.&lt;br&gt;
Since I'm just starting to learn PHP 5, I have a lot of errors. All kinds of them. And it took me a while to understand that errors aren't being displayed onscreen because the &lt;code&gt;display_errors&lt;/code&gt; flag was off.&lt;br&gt;
Google told me that I should change this flag using the &lt;code&gt;.htaccess&lt;/code&gt; file, if it's an Apache module, or the &lt;code&gt;php.ini&lt;/code&gt; file, if it's a FastCGI implementation (which it is).  &lt;/p&gt;
&lt;h3&gt;The Problem&lt;/h3&gt;
&lt;p&gt;Since it's a free hosting package, I can't access the &lt;code&gt;php.ini&lt;/code&gt; file or change the php-wrapper file, that tells the server where to find &lt;code&gt;php.ini&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;The Solution&lt;/h3&gt;
&lt;p&gt;I was beginning to think that I'll have to deal with having no errors on screen at all, until I found &lt;code&gt;ini_set&lt;/code&gt;. It's a function that sets a PHP flag for the duration of the script. So now I've added to my &lt;code&gt;base.php&lt;/code&gt; (the PHP file I include in every page) the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?&lt;/span&gt; &lt;span class="nb"&gt;ini_set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;display_errors&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As long I set it before every page (even before my &lt;code&gt;phpinfo&lt;/code&gt; page),
everything turns out OK!  &lt;/p&gt;
&lt;h3&gt;One Last Thing&lt;/h3&gt;
&lt;p&gt;For those just starting with PHP, you can find out a lot about your environment (flags, libraries, PHP version...) by creating a page that only contains this instruction (except &lt;code&gt;ini_set&lt;/code&gt;, of course!):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?&lt;/span&gt; &lt;span class="nb"&gt;phpinfo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You'll get a detailed report of your php environment. Remember to take it off once the site becomes production.&lt;/p&gt;
&lt;p&gt;Happy PHPing!&lt;/p&gt;</content><category term="FOSS"></category><category term="Programming"></category><category term="PHP"></category></entry></feed>